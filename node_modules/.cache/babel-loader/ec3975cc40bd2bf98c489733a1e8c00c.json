{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treetable/TreeTable.vue?vue&type=template&id=bf68a81e","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treetable/TreeTable.vue","mtime":1634589566242},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treetable/TreeTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div :class=\"containerClass\" data-scrollselectors=\".p-treetable-scrollable-body\">\n        <div class=\"p-treetable-loading\" v-if=\"loading\">\n            <div class=\"p-treetable-loading-overlay p-component-overlay\">\n                <i :class=\"loadingIconClass\"></i>\n            </div>\n        </div>\n        <div class=\"p-treetable-header\" v-if=\"$slots.header\">\n            <slot name=\"header\"></slot>\n        </div>\n         <TTPaginator v-if=\"paginatorTop\" :rows=\"d_rows\" :first=\"d_first\" :totalRecords=\"totalRecordsLength\" :pageLinkSize=\"pageLinkSize\" :template=\"paginatorTemplate\" :rowsPerPageOptions=\"rowsPerPageOptions\"\n                :currentPageReportTemplate=\"currentPageReportTemplate\" class=\"p-paginator-top\" @page=\"onPage($event)\" :alwaysShow=\"alwaysShowPaginator\">\n            <template #left v-if=\"$slots.paginatorLeft\">\n                <slot name=\"paginatorLeft\"></slot>\n            </template>\n            <template #right v-if=\"$slots.paginatorRight\">\n                <slot name=\"paginatorRight\"></slot>\n            </template>\n        </TTPaginator>\n        <div class=\"p-treetable-wrapper\" :style=\"{maxHeight: scrollHeight}\">\n            <table ref=\"table\">\n                <thead class=\"p-treetable-thead\">\n                    <tr>\n                        <template v-for=\"(col,i) of columns\" :key=\"columnProp(col, 'columnKey')||columnProp(col, 'field')||i\">\n                            <TTHeaderCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\" :resizableColumns=\"resizableColumns\"\n                            :sortField=\"d_sortField\" :sortOrder=\"d_sortOrder\" :multiSortMeta=\"d_multiSortMeta\" :sortMode=\"sortMode\"\n                            @column-click=\"onColumnHeaderClick\" @column-resizestart=\"onColumnResizeStart\"></TTHeaderCell>\n                        </template>\n                    </tr>\n                    <tr v-if=\"hasColumnFilter()\">\n                        <template v-for=\"(col,i) of columns\" :key=\"columnProp(col, 'columnKey')||columnProp(col, 'field')||i\">\n                            <th v-if=\"!columnProp(col, 'hidden')\" :class=\"getFilterColumnHeaderClass(col)\" :style=\"[columnProp(col, 'style'),columnProp(col, 'filterHeaderStyle')]\">\n                                <component :is=\"col.children.filter\" :column=\"col\" v-if=\"col.children && col.children.filter\"/>\n                            </th>\n                        </template>\n                    </tr>\n                </thead>\n                <tbody class=\"p-treetable-tbody\">\n                    <template v-if=\"!empty\">\n                        <TTRow v-for=\"node of dataToRender\" :key=\"node.key\" :columns=\"columns\" :node=\"node\" :level=\"0\"\n                        :expandedKeys=\"d_expandedKeys\" @node-toggle=\"onNodeToggle\" :indentation=\"indentation\"\n                        :selectionMode=\"selectionMode\" :selectionKeys=\"selectionKeys\" @node-click=\"onNodeClick\" @checkbox-change=\"onCheckboxChange\"></TTRow>\n                    </template>\n                    <tr v-else class=\"p-treetable-emptymessage\">\n                        <td :colspan=\"columns.length\">\n                            <slot name=\"empty\"></slot>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot class=\"p-treetable-tfoot\" v-if=\"hasFooter\">\n                    <tr>\n                        <template v-for=\"(col,i) of columns\" :key=\"columnProp(col, 'columnKey')||columnProp(col, 'field')||i\">\n                            <TTFooterCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\"></TTFooterCell>\n                        </template>\n                    </tr>\n                </tfoot>\n            </table>\n        </div>\n        <TTPaginator v-if=\"paginatorBottom\" :rows=\"d_rows\" :first=\"d_first\" :totalRecords=\"totalRecordsLength\" :pageLinkSize=\"pageLinkSize\" :template=\"paginatorTemplate\" :rowsPerPageOptions=\"rowsPerPageOptions\"\n                :currentPageReportTemplate=\"currentPageReportTemplate\" class=\"p-paginator-bottom\" @page=\"onPage($event)\" :alwaysShow=\"alwaysShowPaginator\">\n            <template #left v-if=\"$slots.paginatorLeft\">\n                <slot name=\"paginatorLeft\"></slot>\n            </template>\n            <template #right v-if=\"$slots.paginatorRight\">\n                <slot name=\"paginatorRight\"></slot>\n            </template>\n        </TTPaginator>\n        <div class=\"p-treetable-footer\" v-if=\"$slots.footer\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" class=\"p-column-resizer-helper p-highlight\" style=\"display: none\"></div>\n    </div>\n</template>\n\n<script>\nimport {ObjectUtils,DomHandler} from 'primevue/utils';\nimport {FilterService} from 'primevue/api';\nimport TreeTableRow from './TreeTableRow.vue';\nimport HeaderCell from './HeaderCell.vue';\nimport FooterCell from './FooterCell.vue';\nimport Paginator from 'primevue/paginator';\n\nexport default {\n    name: 'TreeTable',\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect',\n        'update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'column-resize-end'],\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: true\n        },\n        rows: {\n            type: Number,\n            default: 0\n        },\n        first: {\n            type: Number,\n            default: 0\n        },\n        totalRecords: {\n            type: Number,\n            default: 0\n        },\n        paginator: {\n            type: Boolean,\n            default: false\n        },\n        paginatorPosition: {\n            type: String,\n            default: 'bottom'\n        },\n        alwaysShowPaginator: {\n            type: Boolean,\n            default: true\n        },\n        paginatorTemplate: {\n            type: String,\n            default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n        },\n        pageLinkSize: {\n            type: Number,\n            default: 5\n        },\n        rowsPerPageOptions: {\n            type: Array,\n            default: null\n        },\n        currentPageReportTemplate: {\n            type: String,\n            default: '({currentPage} of {totalPages})'\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: 'pi pi-spinner'\n        },\n        rowHover: {\n            type: Boolean,\n            default: false\n        },\n        autoLayout: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        defaultSortOrder: {\n            type: Number,\n            default: 1\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        removableSort: {\n            type: Boolean,\n            default: false\n        },\n        filters: {\n            type: Object,\n            default: null\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        columnResizeMode: {\n            type: String,\n            default: 'fit'\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        showGridlines: {\n            type: Boolean,\n            default: false\n        },\n        scrollable: {\n            type: Boolean,\n            default: false\n        },\n        scrollDirection: {\n            type: String,\n            default: \"vertical\"\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        responsiveLayout: {\n            type: String,\n            default: null\n        }\n    },\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n        }\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        },\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        }\n    },\n    mounted() {\n        if (this.scrollable && this.scrollDirection !== 'vertical') {\n            this.updateScrollWidth();\n        }\n    },\n    updated() {\n        if (this.scrollable && this.scrollDirection !== 'vertical') {\n            this.updateScrollWidth();\n        }\n    },\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            }\n            else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = {...this.d_expandedKeys};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.rowSelectionMode && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = (originalEvent.metaKey||originalEvent.ctrlKey);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                }\n                else {\n                    _selectionKeys = {...this.selectionKeys};\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            }\n            else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                }\n                else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : (this.selectionKeys ? {...this.selectionKeys} : {});\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                }\n                else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            }\n            else {\n                if (selected) {\n                    _selectionKeys = {...this.selectionKeys};\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                }\n                else {\n                    _selectionKeys = this.selectionKeys ? {...this.selectionKeys} : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check)\n                this.$emit('node-select', event.node);\n            else\n                this.$emit('node-unselect', event.node);\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        onPage(event) {\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        getFilterColumnHeaderClass(column) {\n            return ['p-filter-column', this.columnProp(column, 'filterHeaderClass'), {\n                'p-frozen-column': this.columnProp(column, 'frozen')\n            }];\n        },\n        onColumnHeaderClick(e) {\n            let event = e.originalEvent;\n            let column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (DomHandler.hasClass(targetNode, 'p-sortable-column') || DomHandler.hasClass(targetNode, 'p-column-title')\n                    || DomHandler.hasClass(targetNode, 'p-sortable-column-icon') || DomHandler.hasClass(targetNode.parentElement, 'p-sortable-column-icon')) {\n                    DomHandler.clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && (this.d_sortOrder * -1 === this.defaultSortOrder)) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            }\n                            else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        }\n                        else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    }\n                    else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n                        if (!metaKey) {\n                            this.d_multiSortMeta =  this.d_multiSortMeta.filter(meta => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                }\n            }\n        },\n        addMultiSortField(field) {\n            let index =  this.d_multiSortMeta.findIndex(meta => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && (this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder))\n                    this.d_multiSortMeta.splice(index, 1);\n                else\n                    this.d_multiSortMeta[index] = {field: field, order: this.d_multiSortMeta[index].order * -1};\n            }\n            else {\n                this.d_multiSortMeta.push({field: field, order: this.defaultSortOrder});\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        sortSingle(nodes) {\n            return this.sortNodesSingle(nodes);\n        },\n        sortNodesSingle(nodes) {\n            let _nodes = [...nodes];\n\n            _nodes.sort((node1, node2) => {\n                const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_sortField);\n                const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.d_sortOrder * result);\n            });\n\n            return _nodes;\n        },\n        sortMultiple(nodes) {\n            return this.sortNodesMultiple(nodes);\n        },\n        sortNodesMultiple(nodes) {\n            let _nodes = [...nodes];\n            _nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, 0);\n            });\n\n            return _nodes;\n        },\n        multisortField(node1, node2, index) {\n            const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n            const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n            let result = null;\n\n            if (value1 == null && value2 != null)\n                result = -1;\n            else if (value1 != null && value2 == null)\n                result = 1;\n            else if (value1 == null && value2 == null)\n                result = 0;\n            else {\n                if (value1 === value2)  {\n                    return (this.d_multiSortMeta.length - 1) > (index) ? (this.multisortField(node1, node2, index + 1)) : 0;\n                }\n                else {\n                    if ((typeof value1 === 'string' || value1 instanceof String) && (typeof value2 === 'string' || value2 instanceof String))\n                        return (this.d_multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));\n                    else\n                        result = (value1 < value2) ? -1 : 1;\n                }\n            }\n\n            return (this.d_multiSortMeta[index].order * result);\n        },\n        filter(value) {\n            let filteredNodes = [];\n            const strict = this.filterMode === 'strict';\n\n            for (let node of value) {\n                let copyNode = {...node};\n                let localMatch = true;\n                let globalMatch = false;\n\n                for (let j = 0; j < this.columns.length; j++) {\n                    let col = this.columns[j];\n                    let filterField = this.columnProp(col, 'field');\n\n                    //local\n                    if (Object.prototype.hasOwnProperty.call(this.filters, this.columnProp(col, 'field'))) {\n                        let filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n                        let filterValue = this.filters[this.columnProp(col, 'field')];\n                        let filterConstraint = FilterService.filters[filterMatchMode];\n                        let paramsWithoutNode = {filterField, filterValue, filterConstraint, strict};\n\n                        if ((strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                            (!strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                                localMatch = false;\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n\n                    //global\n                    if (this.hasGlobalFilter() && !globalMatch) {\n                        let copyNodeForGlobal = {...copyNode};\n                        let filterValue = this.filters['global'];\n                        let filterConstraint = FilterService.filters['contains'];\n                        let globalFilterParamsWithoutNode = {filterField, filterValue, filterConstraint, strict};\n\n                        if ((strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode))) ||\n                            (!strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode)))) {\n                                globalMatch = true;\n                                copyNode = copyNodeForGlobal;\n                        }\n                    }\n                }\n\n                let matches = localMatch;\n                if (this.hasGlobalFilter()) {\n                    matches = localMatch && globalMatch;\n                }\n\n                if (matches) {\n                    filteredNodes.push(copyNode);\n                }\n            }\n\n            let filterEvent = this.createLazyLoadEvent(event);\n            filterEvent.filteredValue = filteredNodes;\n            this.$emit('filter', filterEvent);\n\n            return filteredNodes;\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n                if (node.children) {\n                    let childNodes = [...node.children];\n                    node.children = [];\n                    for (let childNode of childNodes) {\n                        let copyChildNode = {...childNode};\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, {filterField, filterValue, filterConstraint, strict}) {\n            let matched = false;\n            let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n            if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                matched = true;\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, {filterField, filterValue, filterConstraint, strict}) || matched;\n            }\n\n            return matched;\n        },\n        isNodeSelected(node) {\n            return (this.selectionMode && this.selectionKeys) ? this.selectionKeys[node.key] === true : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        createLazyLoadEvent(event) {\n            let filterMatchModes;\n            if (this.hasFilters()) {\n                filterMatchModes = {};\n                this.columns.forEach(col => {\n                    if (this.columnProp(col, 'field')) {\n                        filterMatchModes[col.props.field] = this.columnProp(col, 'filterMatchMode');\n                    }\n                });\n            }\n\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.filters,\n                filterMatchModes: filterMatchModes\n            };\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = (event.pageX - containerLeft + this.$el.scrollLeft);\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n            DomHandler.addClass(this.$el, 'p-unselectable-text');\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = (event.pageX - containerLeft + this.$el.scrollLeft) + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n let delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth||15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        if (!this.scrollable) {\n                            this.resizeColumnElement.style.width = newColumnWidth + 'px';\n                            if(nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                        else {\n                            this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                        }\n                    }\n                }\n                else if (this.columnResizeMode === 'expand') {\n                    this.$refs.table.style.width = this.$refs.table.offsetWidth + delta + 'px';\n\n                    if (!this.scrollable)\n                        this.resizeColumnElement.style.width = newColumnWidth + 'px';\n                    else\n                        this.resizeTableCells(newColumnWidth);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            DomHandler.removeClass(this.$el, 'p-unselectable-text');\n\n            this.unbindColumnResizeEvents();\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = DomHandler.index(this.resizeColumnElement);\n            let children = this.$refs.table.children;\n            for (let child of children) {\n                for (let row of child.children) {\n                    let resizeCell = row.children[colIndex];\n                    resizeCell.style.flex = '0 0 ' + newColumnWidth + 'px';\n\n                    if (this.columnResizeMode === 'fit') {\n                        let nextCell = resizeCell.nextElementSibling;\n                        if (nextCell) {\n                            nextCell.style.flex = '0 0 ' + nextColumnWidth + 'px';\n                        }\n                    }\n                }\n            }\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', () => {\n                    if(this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if(this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                 this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnKeyDown(event, col) {\n            if (event.which === 13 && event.currentTarget.nodeName === 'TH' && DomHandler.hasClass(event.currentTarget, 'p-sortable-column')) {\n                this.onColumnHeaderClick(event, col);\n            }\n        },\n        hasColumnFilter() {\n            if (this.columns) {\n                for (let col of this.columns) {\n                    if (col.children && col.children.filter) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        updateScrollWidth() {\n            this.$refs.table.style.width = this.$refs.table.scrollWidth + 'px';\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-treetable p-component', {\n                'p-treetable-hoverable-rows': (this.rowHover || this.rowSelectionMode),\n                'p-treetable-auto-layout': this.autoLayout,\n                'p-treetable-resizable': this.resizableColumns,\n                'p-treetable-resizable-fit': this.resizableColumns && this.columnResizeMode === 'fit',\n                'p-treetable-gridlines': this.showGridlines,\n                'p-treetable-scrollable': this.scrollable,\n                'p-treetable-scrollable-vertical': this.scrollable && this.scrollDirection === 'vertical',\n                'p-treetable-scrollable-horizontal': this.scrollable && this.scrollDirection === 'horizontal',\n                'p-treetable-scrollable-both': this.scrollable && this.scrollDirection === 'both',\n                'p-treetable-flex-scrollable': (this.scrollable && this.scrollHeight === 'flex'),\n                'p-treetable-responsive-scroll': this.responsiveLayout === 'scroll',\n            }];\n        },\n        columns() {\n            let cols = [];\n            let children = this.$slots.default();\n\n            children.forEach(child => {\n                if (child.children && child.children instanceof Array)\n                    cols = [...cols, ...child.children];\n                else if (child.type.name === 'Column')\n                    cols.push(child);\n            });\n\n            return cols;\n        },\n        processedData() {\n            if (this.lazy) {\n                return this.value;\n            }\n            else {\n                if (this.value && this.value.length) {\n                    let data = this.value;\n\n                    if (this.sorted) {\n                        if(this.sortMode === 'single')\n                            data = this.sortSingle(data);\n                        else if(this.sortMode === 'multiple')\n                            data = this.sortMultiple(data);\n                    }\n\n                    if (this.hasFilters()) {\n                        data = this.filter(data);\n                    }\n\n                    return data;\n                }\n                else {\n                    return null;\n                }\n            }\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n                return data.slice(first, first + this.d_rows);\n            }\n            else {\n                return data;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n            return (!data || data.length === 0);\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        hasFooter() {\n            let hasFooter = false;\n\n            for (let col of this.columns) {\n                if (this.columnProp(col, 'footer')|| (col.children && col.children.footer)) {\n                    hasFooter = true;\n                    break;\n                }\n            }\n\n            return hasFooter;\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        singleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'single';\n        },\n        multipleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'multiple';\n        },\n        rowSelectionMode() {\n            return this.singleSelectionMode || this.multipleSelectionMode;\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            }\n            else {\n                const data = this.processedData;\n                return data ? data.length : 0;\n            }\n        },\n        loadingIconClass() {\n            return ['p-treetable-loading-icon pi-spin', this.loadingIcon];\n        }\n    },\n    components: {\n        'TTRow': TreeTableRow,\n        'TTPaginator': Paginator,\n        'TTHeaderCell': HeaderCell,\n        'TTFooterCell': FooterCell\n    }\n}\n</script>\n\n<style>\n.p-treetable {\n    position: relative;\n}\n\n.p-treetable table {\n    border-collapse: collapse;\n    width: 100%;\n    table-layout: fixed;\n}\n\n.p-treetable .p-sortable-column {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-treetable-responsive-scroll > .p-treetable-wrapper {\n    overflow-x: auto;\n}\n\n.p-treetable-responsive-scroll > .p-treetable-wrapper > table,\n.p-treetable-auto-layout > .p-treetable-wrapper > table {\n    table-layout: auto;\n}\n\n.p-treetable-hoverable-rows .p-treetable-tbody > tr {\n    cursor: pointer;\n}\n\n.p-treetable-toggler {\n    cursor: pointer;\n    user-select: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    vertical-align: middle;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-treetable-toggler + .p-checkbox {\n    vertical-align: middle;\n}\n\n.p-treetable-toggler + .p-checkbox + span {\n    vertical-align: middle;\n}\n\n/* Resizable */\n.p-treetable-resizable > .p-treetable-wrapper {\n    overflow-x: auto;\n}\n\n.p-treetable-resizable .p-treetable-thead > tr > th,\n.p-treetable-resizable .p-treetable-tfoot > tr > td,\n.p-treetable-resizable .p-treetable-tbody > tr > td {\n    overflow: hidden;\n}\n\n.p-treetable-resizable .p-resizable-column {\n    background-clip: padding-box;\n    position: relative;\n}\n\n.p-treetable-resizable-fit .p-resizable-column:last-child .p-column-resizer {\n    display: none;\n}\n\n.p-treetable .p-column-resizer {\n    display: block;\n    position: absolute !important;\n    top: 0;\n    right: 0;\n    margin: 0;\n    width: .5rem;\n    height: 100%;\n    padding: 0px;\n    cursor:col-resize;\n    border: 1px solid transparent;\n}\n\n.p-treetable .p-column-resizer-helper {\n    width: 1px;\n    position: absolute;\n    z-index: 10;\n    display: none;\n}\n\n.p-treetable .p-treetable-loading-overlay {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 2;\n}\n\n/* Scrollable */\n.p-treetable-scrollable .p-treetable-wrapper {\n    position: relative;\n    overflow: auto;\n}\n\n.p-treetable-scrollable .p-treetable-table {\n    display: block;\n}\n\n.p-treetable-scrollable .p-treetable-thead,\n.p-treetable-scrollable .p-treetable-tbody,\n.p-treetable-scrollable .p-treetable-tfoot {\n    display: block;\n}\n\n.p-treetable-scrollable .p-treetable-thead > tr,\n.p-treetable-scrollable .p-treetable-tbody > tr,\n.p-treetable-scrollable .p-treetable-tfoot > tr {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n}\n\n.p-treetable-scrollable .p-treetable-thead > tr > th,\n.p-treetable-scrollable .p-treetable-tbody > tr > td,\n.p-treetable-scrollable .p-treetable-tfoot > tr > td {\n    display: flex;\n    flex: 1 1 0;\n    align-items: center;\n}\n\n.p-treetable-scrollable .p-treetable-thead {\n    position: sticky;\n    top: 0;\n    z-index: 1;\n}\n\n.p-treetable-scrollable .p-treetable-tfoot {\n    position: sticky;\n    bottom: 0;\n    z-index: 1;\n}\n\n.p-treetable-scrollable .p-frozen-column {\n    position: sticky;\n    background: inherit;\n}\n\n.p-treetable-scrollable-both .p-treetable-thead > tr > th,\n.p-treetable-scrollable-both .p-treetable-tbody > tr > td,\n.p-treetable-scrollable-both .p-treetable-tfoot > tr > td,\n.p-treetable-scrollable-horizontal .p-treetable-thead > tr > th\n.p-treetable-scrollable-horizontal .p-treetable-tbody > tr > td,\n.p-treetable-scrollable-horizontal .p-treetable-tfoot > tr > td {\n    flex: 0 0 auto;\n}\n\n.p-treetable-flex-scrollable {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.p-treetable-flex-scrollable .p-treetable-wrapper {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    height: 100%;\n}\n</style>\n"],"sourceRoot":""}]}