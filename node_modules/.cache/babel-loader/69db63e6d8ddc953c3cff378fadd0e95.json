{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/Tree.vue?vue&type=template&id=59567fa2","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/Tree.vue","mtime":1634589566241},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgdk1vZGVsVGV4dCBhcyBfdk1vZGVsVGV4dCwgd2l0aERpcmVjdGl2ZXMgYXMgX3dpdGhEaXJlY3RpdmVzLCByZW5kZXJMaXN0IGFzIF9yZW5kZXJMaXN0LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQgfSBmcm9tICJ2dWUiOwp2YXIgX2hvaXN0ZWRfMSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJwLXRyZWUtbG9hZGluZy1vdmVybGF5IHAtY29tcG9uZW50LW92ZXJsYXkiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGtleTogMSwKICBjbGFzczogInAtdHJlZS1maWx0ZXItY29udGFpbmVyIgp9OwoKdmFyIF9ob2lzdGVkXzMgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJzcGFuIiwgewogIGNsYXNzOiAicC10cmVlLWZpbHRlci1pY29uIHBpIHBpLXNlYXJjaCIKfSwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJwLXRyZWUtY29udGFpbmVyIiwKICByb2xlOiAidHJlZSIKfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9UcmVlTm9kZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJUcmVlTm9kZSIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIHsKICAgIGNsYXNzOiAkb3B0aW9ucy5jb250YWluZXJDbGFzcwogIH0sIFskcHJvcHMubG9hZGluZyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZSgiaSIsIHsKICAgIGNsYXNzOiAkb3B0aW9ucy5sb2FkaW5nSWNvbkNsYXNzCiAgfSwgbnVsbCwgMgogIC8qIENMQVNTICovCiAgKV0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgJHByb3BzLmZpbHRlciA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMiwgW193aXRoRGlyZWN0aXZlcyhfY3JlYXRlVk5vZGUoImlucHV0IiwgewogICAgdHlwZTogInRleHQiLAogICAgYXV0b2NvbXBsZXRlOiAib2ZmIiwKICAgIGNsYXNzOiAicC10cmVlLWZpbHRlciBwLWlucHV0dGV4dCBwLWNvbXBvbmVudCIsCiAgICBwbGFjZWhvbGRlcjogJHByb3BzLmZpbHRlclBsYWNlaG9sZGVyLAogICAgb25LZXlkb3duOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLm9uRmlsdGVyS2V5ZG93biAmJiAkb3B0aW9ucy5vbkZpbHRlcktleWRvd24uYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KSwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5maWx0ZXJWYWx1ZSA9ICRldmVudDsKICAgIH0pCiAgfSwgbnVsbCwgNDAKICAvKiBQUk9QUywgSFlEUkFURV9FVkVOVFMgKi8KICAsIFsicGxhY2Vob2xkZXIiXSksIFtbX3ZNb2RlbFRleHQsICRkYXRhLmZpbHRlclZhbHVlXV0pLCBfaG9pc3RlZF8zXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfY3JlYXRlVk5vZGUoImRpdiIsIHsKICAgIGNsYXNzOiAicC10cmVlLXdyYXBwZXIiLAogICAgc3R5bGU6IHsKICAgICAgbWF4SGVpZ2h0OiAkcHJvcHMuc2Nyb2xsSGVpZ2h0CiAgICB9CiAgfSwgW19jcmVhdGVWTm9kZSgidWwiLCBfaG9pc3RlZF80LCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRvcHRpb25zLnZhbHVlVG9SZW5kZXIsIGZ1bmN0aW9uIChub2RlKSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9UcmVlTm9kZSwgewogICAgICBrZXk6IG5vZGUua2V5LAogICAgICBub2RlOiBub2RlLAogICAgICB0ZW1wbGF0ZXM6IF9jdHguJHNsb3RzLAogICAgICBleHBhbmRlZEtleXM6ICRkYXRhLmRfZXhwYW5kZWRLZXlzLAogICAgICBvbk5vZGVUb2dnbGU6ICRvcHRpb25zLm9uTm9kZVRvZ2dsZSwKICAgICAgb25Ob2RlQ2xpY2s6ICRvcHRpb25zLm9uTm9kZUNsaWNrLAogICAgICBzZWxlY3Rpb25Nb2RlOiAkcHJvcHMuc2VsZWN0aW9uTW9kZSwKICAgICAgc2VsZWN0aW9uS2V5czogJHByb3BzLnNlbGVjdGlvbktleXMsCiAgICAgIG9uQ2hlY2tib3hDaGFuZ2U6ICRvcHRpb25zLm9uQ2hlY2tib3hDaGFuZ2UKICAgIH0sIG51bGwsIDgKICAgIC8qIFBST1BTICovCiAgICAsIFsibm9kZSIsICJ0ZW1wbGF0ZXMiLCAiZXhwYW5kZWRLZXlzIiwgIm9uTm9kZVRvZ2dsZSIsICJvbk5vZGVDbGljayIsICJzZWxlY3Rpb25Nb2RlIiwgInNlbGVjdGlvbktleXMiLCAib25DaGVja2JveENoYW5nZSJdKTsKICB9KSwgMTI4CiAgLyogS0VZRURfRlJBR01FTlQgKi8KICApKV0pXSwgNAogIC8qIFNUWUxFICovCiAgKV0sIDIKICAvKiBDTEFTUyAqLwogICk7Cn0="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/Tree.vue"],"names":[],"mappings":";;;;AAGiB,EAAA,KAAK,EAAC;;;;AAIV,EAAA,KAAK,EAAC;;;8BAGP,YAAA,CAAqD,MAArD,EAAqD;AAA/C,EAAA,KAAK,EAAC;AAAyC,CAArD,EAA6C,IAA7C,EAA6C,CAAA;AAAA;AAA7C,C;;;AAGI,EAAA,KAAK,EAAC,kB;AAAmB,EAAA,IAAI,EAAC;;;;;uBAZ1C,YAAA,CAkBM,KAlBN,EAkBM;AAlBA,IAAA,KAAK,EAAE,QAAA,CAAA;AAkBP,GAlBN,EAA2B,CACP,MAAA,CAAA,O,kBACZ,YAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,YAAA,CAA+B,GAA/B,EAA+B;AAA3B,IAAA,KAAK,EAAE,QAAA,CAAA;AAAoB,GAA/B,EAA2B,IAA3B,EAA2B;AAAA;AAA3B,GACE,CAFN,C,qCAFmB,EAMoB,MAAA,CAAA,M,kBAA3C,YAAA,CAIM,KAJN,EAAA,UAAA,EAIM,C,gBAHF,YAAA,CACuD,OADvD,EACuD;AADhD,IAAA,IAAI,EAAC,MAC2C;AADpC,IAAA,YAAY,EAAC,KACuB;AADjB,IAAA,KAAK,EAAC,uCACW;AAD8B,IAAA,WAAW,EAAE,MAAA,CAAA,iBAC3C;AAAlD,IAAA,SAAO,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,QAAA,CAAA,eAAA,IAAA,QAAA,CAAA,eAAA,OAAA,QAAA,YAAF;AAAA,KAAA,CAA2C;;aAAf,KAAA,CAAA,WAAA,GAAW,M;;AAAI,GADvD,E,IAAA,E;;AAAA,I,eAAA,C,iBACwC,KAAA,CAAA,W,GAEtC,EADF,UACE,CAJN,C,qCANuB,EAWvB,YAAA,CAMM,KANN,EAMM;AAND,IAAA,KAAK,EAAC,gBAML;AANuB,IAAA,KAAK,EAAA;AAAA,MAAA,SAAA,EAAc,MAAA,CAAA;AAAd;AAM5B,GANN,E,CACI,YAAA,CAIK,IAJL,EAAA,UAAA,EAIK,E,kBAHD,YAAA,CAEiH,SAFjH,EAEiH,IAFjH,EAEiH,WAAA,CAFxF,QAAA,CAAA,aAEwF,EAF3E,UAArB,IAAqB,EAAjB;yBAArB,YAAA,CAEiH,mBAFjH,EAEiH;AAFxE,MAAA,GAAG,EAAE,IAAI,CAAC,GAE8D;AAFxD,MAAA,IAAI,EAAE,IAEkD;AAF3C,MAAA,SAAS,EAAE,IAAA,CAAA,MAEgC;AAD5G,MAAA,YAAY,EAAE,KAAA,CAAA,cAC8F;AAD7E,MAAA,YAAW,EAAE,QAAA,CAAA,YACgE;AADjD,MAAA,WAAU,EAAE,QAAA,CAAA,WACqC;AAA5G,MAAA,aAAa,EAAE,MAAA,CAAA,aAA6F;AAA7E,MAAA,aAAa,EAAE,MAAA,CAAA,aAA8D;AAA9C,MAAA,gBAAe,EAAE,QAAA,CAAA;AAA6B,KAFjH,E,IAAA,E;;AAAA,M,0HAAA,C;GAEiH,CAFjH,E;;AAAA,GAGC,EAJL,C,CADJ,E;;AAAA,GAXuB,CAA3B,E;;AAAA,G","sourcesContent":["<template>\n    <div :class=\"containerClass\">\n        <template v-if=\"loading\">\n            <div class=\"p-tree-loading-overlay p-component-overlay\">\n                <i :class=\"loadingIconClass\" />\n            </div>\n        </template>\n        <div class=\"p-tree-filter-container\" v-if=\"filter\">\n            <input type=\"text\" autocomplete=\"off\" class=\"p-tree-filter p-inputtext p-component\" :placeholder=\"filterPlaceholder\"\n                @keydown=\"onFilterKeydown\" v-model=\"filterValue\" />\n            <span class=\"p-tree-filter-icon pi pi-search\"></span>\n        </div>\n        <div class=\"p-tree-wrapper\" :style=\"{maxHeight: scrollHeight}\">\n            <ul class=\"p-tree-container\" role=\"tree\">\n                <TreeNode v-for=\"node of valueToRender\" :key=\"node.key\" :node=\"node\" :templates=\"$slots\"\n                    :expandedKeys=\"d_expandedKeys\" @node-toggle=\"onNodeToggle\" @node-click=\"onNodeClick\"\n                    :selectionMode=\"selectionMode\" :selectionKeys=\"selectionKeys\" @checkbox-change=\"onCheckboxChange\"></TreeNode>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\nimport TreeNode from './TreeNode.vue';\nimport {ObjectUtils} from 'primevue/utils';\n\nexport default {\n    name: 'Tree',\n    emits: ['node-expand', 'node-collapse', 'update:expandedKeys', 'update:selectionKeys', 'node-select', 'node-unselect'],\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: true\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: 'pi pi-spinner'\n        },\n        filter: {\n            type: Boolean,\n            default: false\n        },\n        filterBy: {\n            type: String,\n            default: 'label'\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterPlaceholder: {\n            type: String,\n            default: null\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        }\n    },\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            filterValue: null\n        }\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        }\n    },\n    methods: {\n        onNodeToggle(node) {\n            const key = node.key;\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            }\n            else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = {...this.d_expandedKeys};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.selectionMode != null && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check)\n                this.$emit('node-select', event.node);\n            else\n                this.$emit('node-unselect', event.node);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const metaKey = (originalEvent.metaKey||originalEvent.ctrlKey);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                }\n                else {\n                    _selectionKeys = {...this.selectionKeys};\n                    delete _selectionKeys[node.key];\n                }\n\n                this.$emit('node-unselect', node);\n            }\n            else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                }\n                else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : (this.selectionKeys ? {...this.selectionKeys} : {});\n                }\n\n                _selectionKeys[node.key] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                }\n                else {\n                    _selectionKeys = {};\n                    _selectionKeys[node.key] = true;\n                    this.$emit('node-select', node);\n                }\n            }\n            else {\n                if (selected) {\n                    _selectionKeys = {...this.selectionKeys};\n                    delete _selectionKeys[node.key];\n\n                    this.$emit('node-unselect', node);\n                }\n                else {\n                    _selectionKeys = this.selectionKeys ? {...this.selectionKeys} : {};\n                    _selectionKeys[node.key] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isNodeSelected(node) {\n            return (this.selectionMode && this.selectionKeys) ? this.selectionKeys[node.key] === true : false;\n        },\n        isChecked(node) {\n            return this.selectionKeys ? this.selectionKeys[node.key] && this.selectionKeys[node.key].checked: false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        onFilterKeydown(event) {\n            if (event.which === 13) {\n                event.preventDefault();\n            }\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n                if (node.children) {\n                    let childNodes = [...node.children];\n                    node.children = [];\n                    for (let childNode of childNodes) {\n                        let copyChildNode = {...childNode};\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, {searchFields, filterText, strict}) {\n            let matched = false;\n            for(let field of searchFields) {\n                let fieldValue = String(ObjectUtils.resolveFieldData(node, field)).toLocaleLowerCase(this.filterLocale);\n                if(fieldValue.indexOf(filterText) > -1) {\n                    matched = true;\n                }\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, {searchFields, filterText, strict}) || matched;\n            }\n\n            return matched;\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-tree p-component', {\n                'p-tree-selectable': this.selectionMode != null,\n                'p-tree-loading': this.loading,\n                'p-tree-flex-scrollable': this.scrollHeight === 'flex'\n            }];\n        },\n        loadingIconClass() {\n            return ['p-tree-loading-icon pi-spin', this.loadingIcon];\n        },\n        filteredValue() {\n            let filteredNodes = [];\n            const searchFields = this.filterBy.split(',');\n            const filterText = this.filterValue.trim().toLocaleLowerCase(this.filterLocale);\n            const strict = this.filterMode === 'strict';\n\n            for (let node of this.value) {\n                let _node = {...node};\n                let paramsWithoutNode = {searchFields, filterText, strict};\n\n                if ((strict && (this.findFilteredNodes(_node, paramsWithoutNode) || this.isFilterMatched(_node, paramsWithoutNode))) ||\n                    (!strict && (this.isFilterMatched(_node, paramsWithoutNode) || this.findFilteredNodes(_node, paramsWithoutNode)))) {\n                    filteredNodes.push(_node);\n                }\n            }\n\n            return filteredNodes;\n        },\n        valueToRender() {\n            if (this.filterValue && this.filterValue.trim().length > 0)\n                return this.filteredValue;\n            else\n                return this.value;\n        }\n    },\n    components: {\n        'TreeNode': TreeNode\n    }\n}\n</script>\n\n<style>\n.p-tree-container {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    overflow: auto;\n}\n\n.p-treenode-children {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n}\n\n.p-tree-wrapper {\n    overflow: auto;\n}\n\n.p-treenode-selectable {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-tree-toggler {\n    cursor: pointer;\n    user-select: none;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-treenode-leaf > .p-treenode-content .p-tree-toggler {\n    visibility: hidden;\n}\n\n.p-treenode-content {\n    display: flex;\n    align-items: center;\n}\n\n.p-tree-filter {\n    width: 100%;\n}\n\n.p-tree-filter-container {\n    position: relative;\n    display: block;\n    width: 100%;\n}\n\n.p-tree-filter-icon {\n    position: absolute;\n    top: 50%;\n    margin-top: -.5rem;\n}\n\n.p-tree-loading {\n    position: relative;\n    min-height: 4rem;\n}\n\n.p-tree .p-tree-loading-overlay {\n    position: absolute;\n    z-index: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-tree-flex-scrollable {\n    display: flex;\n    flex: 1;\n    height: 100%;\n    flex-direction: column;\n}\n\n.p-tree-flex-scrollable .p-tree-wrapper {\n    flex: 1;\n}\n</style>\n"],"sourceRoot":""}]}