{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/orderlist/OrderList.vue?vue&type=template&id=915d15ae","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/orderlist/OrderList.vue","mtime":1634589566226},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZW5kZXJTbG90IGFzIF9yZW5kZXJTbG90LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIFRyYW5zaXRpb25Hcm91cCBhcyBfVHJhbnNpdGlvbkdyb3VwLCB3aXRoQ3R4IGFzIF93aXRoQ3R4IH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJwLW9yZGVybGlzdCBwLWNvbXBvbmVudCIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJwLW9yZGVybGlzdC1jb250cm9scyIKfTsKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJwLW9yZGVybGlzdC1saXN0LWNvbnRhaW5lciIKfTsKdmFyIF9ob2lzdGVkXzQgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAicC1vcmRlcmxpc3QtaGVhZGVyIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X09MQnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoIk9MQnV0dG9uIik7CgogIHZhciBfZGlyZWN0aXZlX3JpcHBsZSA9IF9yZXNvbHZlRGlyZWN0aXZlKCJyaXBwbGUiKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfT0xCdXR0b24sIHsKICAgIHR5cGU6ICJidXR0b24iLAogICAgaWNvbjogInBpIHBpLWFuZ2xlLXVwIiwKICAgIG9uQ2xpY2s6ICRvcHRpb25zLm1vdmVVcAogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJvbkNsaWNrIl0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9PTEJ1dHRvbiwgewogICAgdHlwZTogImJ1dHRvbiIsCiAgICBpY29uOiAicGkgcGktYW5nbGUtZG91YmxlLXVwIiwKICAgIG9uQ2xpY2s6ICRvcHRpb25zLm1vdmVUb3AKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsib25DbGljayJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfT0xCdXR0b24sIHsKICAgIHR5cGU6ICJidXR0b24iLAogICAgaWNvbjogInBpIHBpLWFuZ2xlLWRvd24iLAogICAgb25DbGljazogJG9wdGlvbnMubW92ZURvd24KICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsib25DbGljayJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfT0xCdXR0b24sIHsKICAgIHR5cGU6ICJidXR0b24iLAogICAgaWNvbjogInBpIHBpLWFuZ2xlLWRvdWJsZS1kb3duIiwKICAgIG9uQ2xpY2s6ICRvcHRpb25zLm1vdmVCb3R0b20KICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsib25DbGljayJdKV0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3R4LiRzbG90cy5oZWFkZXIgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIF9ob2lzdGVkXzQsIFtfcmVuZGVyU2xvdChfY3R4LiRzbG90cywgImhlYWRlciIpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfY3JlYXRlVk5vZGUoX1RyYW5zaXRpb25Hcm91cCwgewogICAgcmVmOiAibGlzdCIsCiAgICBuYW1lOiAicC1vcmRlcmxpc3QtZmxpcCIsCiAgICB0YWc6ICJ1bCIsCiAgICBjbGFzczogInAtb3JkZXJsaXN0LWxpc3QiLAogICAgc3R5bGU6ICRwcm9wcy5saXN0U3R5bGUsCiAgICByb2xlOiAibGlzdGJveCIsCiAgICAiYXJpYS1tdWx0aXNlbGVjdGFibGUiOiAibXVsdGlwbGUiCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gWyhfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkcHJvcHMubW9kZWxWYWx1ZSwgZnVuY3Rpb24gKGl0ZW0sIGkpIHsKICAgICAgICByZXR1cm4gX3dpdGhEaXJlY3RpdmVzKChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygibGkiLCB7CiAgICAgICAgICBrZXk6ICRvcHRpb25zLmdldEl0ZW1LZXkoaXRlbSwgaSksCiAgICAgICAgICB0YWJpbmRleDogIjAiLAogICAgICAgICAgY2xhc3M6IFsncC1vcmRlcmxpc3QtaXRlbScsIHsKICAgICAgICAgICAgJ3AtaGlnaGxpZ2h0JzogJG9wdGlvbnMuaXNTZWxlY3RlZChpdGVtKQogICAgICAgICAgfV0sCiAgICAgICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKCRldmVudCkgewogICAgICAgICAgICByZXR1cm4gJG9wdGlvbnMub25JdGVtQ2xpY2soJGV2ZW50LCBpdGVtLCBpKTsKICAgICAgICAgIH0sCiAgICAgICAgICBvbktleWRvd246IGZ1bmN0aW9uIG9uS2V5ZG93bigkZXZlbnQpIHsKICAgICAgICAgICAgcmV0dXJuICRvcHRpb25zLm9uSXRlbUtleURvd24oJGV2ZW50LCBpdGVtLCBpKTsKICAgICAgICAgIH0sCiAgICAgICAgICBvblRvdWNoZW5kOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICRvcHRpb25zLm9uSXRlbVRvdWNoRW5kICYmICRvcHRpb25zLm9uSXRlbVRvdWNoRW5kLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgICAgICAgfSksCiAgICAgICAgICByb2xlOiAib3B0aW9uIiwKICAgICAgICAgICJhcmlhLXNlbGVjdGVkIjogJG9wdGlvbnMuaXNTZWxlY3RlZChpdGVtKQogICAgICAgIH0sIFtfcmVuZGVyU2xvdChfY3R4LiRzbG90cywgIml0ZW0iLCB7CiAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgaW5kZXg6IGkKICAgICAgICB9KV0sIDQyCiAgICAgICAgLyogQ0xBU1MsIFBST1BTLCBIWURSQVRFX0VWRU5UUyAqLwogICAgICAgICwgWyJvbkNsaWNrIiwgIm9uS2V5ZG93biIsICJhcmlhLXNlbGVjdGVkIl0pKSwgW1tfZGlyZWN0aXZlX3JpcHBsZV1dKTsKICAgICAgfSksIDEyOAogICAgICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICAgICApKV07CiAgICB9KSwKICAgIF86IDMKICAgIC8qIEZPUldBUkRFRCAqLwoKICB9LCA4CiAgLyogUFJPUFMgKi8KICAsIFsic3R5bGUiXSldKV0pOwp9"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/orderlist/OrderList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"p-orderlist p-component\">\n        <div class=\"p-orderlist-controls\">\n            <OLButton type=\"button\" icon=\"pi pi-angle-up\" @click=\"moveUp\"></OLButton>\n            <OLButton type=\"button\" icon=\"pi pi-angle-double-up\" @click=\"moveTop\"></OLButton>\n            <OLButton type=\"button\" icon=\"pi pi-angle-down\" @click=\"moveDown\"></OLButton>\n            <OLButton type=\"button\" icon=\"pi pi-angle-double-down\" @click=\"moveBottom\"></OLButton>\n        </div>\n        <div class=\"p-orderlist-list-container\">\n            <div class=\"p-orderlist-header\" v-if=\"$slots.header\">\n                <slot name=\"header\"></slot>\n            </div>\n            <transition-group ref=\"list\" name=\"p-orderlist-flip\" tag=\"ul\" class=\"p-orderlist-list\" :style=\"listStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                <template v-for=\"(item, i) of modelValue\" :key=\"getItemKey(item, i)\">\n                    <li tabindex=\"0\" :class=\"['p-orderlist-item', {'p-highlight': isSelected(item)}]\" v-ripple\n                        @click=\"onItemClick($event, item, i)\" @keydown=\"onItemKeyDown($event, item, i)\" @touchend=\"onItemTouchEnd\"\n                        role=\"option\" :aria-selected=\"isSelected(item)\">\n                        <slot name=\"item\" :item=\"item\" :index=\"i\"> </slot>\n                    </li>\n                </template>\n            </transition-group>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Button from 'primevue/button';\nimport {ObjectUtils,UniqueComponentId,DomHandler} from 'primevue/utils';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'OrderList',\n    emits: ['update:modelValue', 'reorder', 'update:selection', 'selection-change'],\n    props: {\n        modelValue: {\n            type: Array,\n            default: null\n        },\n        selection: {\n            type: Array,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        listStyle: {\n            type: null,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: true\n        },\n        responsive: {\n            type: Boolean,\n            default: true\n        },\n        breakpoint: {\n            type: String,\n            default: '960px'\n        }\n    },\n    itemTouched: false,\n    reorderDirection: null,\n    styleElement: null,\n    data() {\n        return {\n            d_selection: this.selection\n        }\n    },\n    beforeUnmount() {\n        this.destroyStyle();\n    },\n    updated() {\n        if (this.reorderDirection) {\n            this.updateListScroll();\n            this.reorderDirection = null;\n        }\n    },\n    mounted() {\n        if (this.responsive) {\n            this.createStyle();\n        }\n    },\n    methods: {\n        getItemKey(item, index) {\n            return this.dataKey ? ObjectUtils.resolveFieldData(item, this.dataKey): index;\n        },\n        isSelected(item) {\n            return ObjectUtils.findIndexInList(item, this.d_selection) != -1;\n        },\n        moveUp() {\n            if (this.d_selection) {\n                let value = [...this.modelValue];\n\n                for (let i = 0; i < this.d_selection.length; i++) {\n                    let selectedItem = this.d_selection[i];\n                    let selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, value);\n\n                    if (selectedItemIndex !== 0) {\n                        let movedItem = value[selectedItemIndex];\n                        let temp = value[selectedItemIndex - 1];\n                        value[selectedItemIndex - 1] = movedItem;\n                        value[selectedItemIndex] = temp;\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                this.reorderDirection = 'up';\n                this.$emit('update:modelValue', value);\n                this.$emit('reorder', {\n                    originalEvent: event,\n                    value: value,\n                    direction: this.reorderDirection\n                });\n            }\n        },\n        moveTop() {\n            if(this.d_selection) {\n                let value = [...this.modelValue];\n\n                for (let i = 0; i < this.d_selection.length; i++) {\n                    let selectedItem = this.d_selection[i];\n                    let selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, value);\n\n                    if (selectedItemIndex !== 0) {\n                        let movedItem = value.splice(selectedItemIndex, 1)[0];\n                        value.unshift(movedItem);\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                this.reorderDirection = 'top';\n                this.$emit('update:modelValue', value);\n                this.$emit('reorder', {\n                    originalEvent: event,\n                    value: value,\n                    direction: this.reorderDirection\n                });\n            }\n        },\n        moveDown() {\n            if(this.d_selection) {\n                let value = [...this.modelValue];\n\n                for (let i = this.d_selection.length - 1; i >= 0; i--) {\n                    let selectedItem = this.d_selection[i];\n                    let selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, value);\n\n                    if (selectedItemIndex !== (value.length - 1)) {\n                        let movedItem = value[selectedItemIndex];\n                        let temp = value[selectedItemIndex + 1];\n                        value[selectedItemIndex + 1] = movedItem;\n                        value[selectedItemIndex] = temp;\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                this.reorderDirection = 'down';\n                this.$emit('update:modelValue', value);\n                this.$emit('reorder', {\n                    originalEvent: event,\n                    value: value,\n                    direction: this.reorderDirection\n                });\n            }\n        },\n        moveBottom() {\n            if (this.d_selection) {\n                let value = [...this.modelValue];\n\n                for (let i = this.d_selection.length - 1; i >= 0; i--) {\n                    let selectedItem = this.d_selection[i];\n                    let selectedItemIndex = ObjectUtils.findIndexInList(selectedItem, value);\n\n                    if (selectedItemIndex !== (value.length - 1)) {\n                        let movedItem = value.splice(selectedItemIndex, 1)[0];\n                        value.push(movedItem);\n                    }\n                    else {\n                        break;\n                    }\n                }\n\n                this.reorderDirection = 'bottom';\n                this.$emit('update:modelValue', value);\n                this.$emit('reorder', {\n                    originalEvent: event,\n                    value: value,\n                    direction: this.reorderDirection\n                });\n            }\n        },\n        onItemClick(event, item, index) {\n            this.itemTouched = false;\n            let selectedIndex = ObjectUtils.findIndexInList(item, this.d_selection);\n            let selected = (selectedIndex != -1);\n            let metaSelection = this.itemTouched ? false : this.metaKeySelection;\n\n            if (metaSelection) {\n                let metaKey = (event.metaKey || event.ctrlKey);\n\n                if (selected && metaKey) {\n                    this.d_selection = this.d_selection.filter((val, index) => index !== selectedIndex);\n                }\n                else {\n                    this.d_selection = (metaKey) ? this.d_selection ? [...this.d_selection] : [] : [];\n                    ObjectUtils.insertIntoOrderedArray(item, index, this.d_selection, this.modelValue);\n                }\n            }\n            else {\n                if (selected) {\n                    this.d_selection = this.d_selection.filter((val, index) => index !== selectedIndex);\n                }\n                else {\n                    this.d_selection = this.d_selection ? [...this.d_selection] : [];\n                    ObjectUtils.insertIntoOrderedArray(item, index, this.d_selection, this.modelValue);\n                }\n            }\n\n            this.$emit('update:selection', this.d_selection);\n            this.$emit('selection-change', {\n                originalEvent:event,\n                value: this.d_selection\n            });\n        },\n        onItemTouchEnd() {\n            this.itemTouched = true;\n        },\n        onItemKeyDown(event, item, index) {\n            let listItem = event.currentTarget;\n\n            switch(event.which) {\n                //down\n                case 40:\n                    var nextItem = this.findNextItem(listItem);\n                    if (nextItem) {\n                        nextItem.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //up\n                case 38:\n                    var prevItem = this.findPrevItem(listItem);\n                    if (prevItem) {\n                        prevItem.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //enter\n                case 13:\n                    this.onItemClick(event, item, index);\n                    event.preventDefault();\n                break;\n\n                default:\n                break;\n            }\n        },\n        findNextItem(item) {\n            let nextItem = item.nextElementSibling;\n\n            if (nextItem)\n                return !DomHandler.hasClass(nextItem, 'p-orderlist-item') ? this.findNextItem(nextItem) : nextItem;\n            else\n                return null;\n        },\n        findPrevItem(item) {\n            let prevItem = item.previousElementSibling;\n\n            if (prevItem)\n                return !DomHandler.hasClass(prevItem, 'p-orderlist-item') ? this.findPrevItem(prevItem) : prevItem;\n            else\n                return null;\n        },\n        updateListScroll() {\n            const listItems = DomHandler.find(this.$refs.list.$el, '.p-orderlist-item.p-highlight');\n\n            if (listItems && listItems.length) {\n                switch(this.reorderDirection) {\n                    case 'up':\n                        DomHandler.scrollInView(this.$refs.list.$el, listItems[0]);\n                    break;\n\n                    case 'top':\n                        this.$refs.list.$el.scrollTop = 0;\n                    break;\n\n                    case 'down':\n                        DomHandler.scrollInView(this.$refs.list.$el, listItems[listItems.length - 1]);\n                    break;\n\n                    case 'bottom':\n                        this.$refs.list.$el.scrollTop = this.$refs.list.$el.scrollHeight;\n                    break;\n\n                    default:\n                    break;\n                }\n            }\n        },\n        createStyle() {\n\t\t\tif (!this.styleElement) {\n                this.$el.setAttribute(this.attributeSelector, '');\n\t\t\t\tthis.styleElement = document.createElement('style');\n\t\t\t\tthis.styleElement.type = 'text/css';\n\t\t\t\tdocument.head.appendChild(this.styleElement);\n\n                let innerHTML = `\n@media screen and (max-width: ${this.breakpoint}) {\n    .p-orderlist[${this.attributeSelector}] {\n        flex-direction: column;\n    }\n\n    .p-orderlist[${this.attributeSelector}] .p-orderlist-controls {\n        padding: var(--content-padding);\n        flex-direction: row;\n    }\n\n    .p-orderlist[${this.attributeSelector}] .p-orderlist-controls .p-button {\n        margin-right: var(--inline-spacing);\n        margin-bottom: 0;\n    }\n\n    .p-orderlist[${this.attributeSelector}] .p-orderlist-controls .p-button:last-child {\n        margin-right: 0;\n    }\n}\n`;\n\n                this.styleElement.innerHTML = innerHTML;\n\t\t\t}\n\t\t},\n        destroyStyle() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        }\n    },\n    computed: {\n        attributeSelector() {\n            return UniqueComponentId();\n        }\n    },\n    components: {\n        'OLButton': Button\n    },\n    directives: {\n        'ripple': Ripple\n    }\n}\n</script>\n\n<style>\n.p-orderlist {\n    display: flex;\n}\n\n.p-orderlist-controls {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n}\n\n.p-orderlist-list-container {\n    flex: 1 1 auto;\n}\n\n.p-orderlist-list {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: auto;\n    min-height: 12rem;\n    max-height: 24rem;\n}\n\n.p-orderlist-item {\n    cursor: pointer;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-orderlist.p-state-disabled .p-orderlist-item,\n.p-orderlist.p-state-disabled .p-button {\n    cursor: default;\n}\n\n.p-orderlist.p-state-disabled .p-orderlist-list {\n    overflow: hidden;\n}\n</style>\n"],"sourceRoot":""}]}