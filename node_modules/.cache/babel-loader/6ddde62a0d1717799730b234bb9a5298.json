{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue?vue&type=template&id=b4029980","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue","mtime":1634589566291},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCB3aXRoQ3R4IGFzIF93aXRoQ3R4IH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJjb250ZW50LXNlY3Rpb24gaW50cm9kdWN0aW9uIgp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJmZWF0dXJlLWludHJvIgp9LCBbLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDEiLCBudWxsLCBbLyojX19QVVJFX18qL19jcmVhdGVUZXh0Vk5vZGUoIlRyZWVUYWJsZSAiKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgic3BhbiIsIG51bGwsICJDb2x1bW4gVG9nZ2xlIildKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgicCIsIG51bGwsICJNdWx0aVNlbGVjdCBjb21wb25lbnQgY2FuIGJlIHVzZWQgdG8gaW1wbGVtZW50IGNvbHVtbiB0b2dnbGUgZnVuY3Rpb25hbGl0eS4iKV0sIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAiY29udGVudC1zZWN0aW9uIGltcGxlbWVudGF0aW9uIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IHsKICBjbGFzczogImNhcmQiCn07CnZhciBfaG9pc3RlZF81ID0gewogIHN0eWxlOiB7CiAgICAidGV4dC1hbGlnbiI6ICJsZWZ0IgogIH0KfTsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9BcHBEZW1vQWN0aW9ucyA9IF9yZXNvbHZlQ29tcG9uZW50KCJBcHBEZW1vQWN0aW9ucyIpOwoKICB2YXIgX2NvbXBvbmVudF9NdWx0aVNlbGVjdCA9IF9yZXNvbHZlQ29tcG9uZW50KCJNdWx0aVNlbGVjdCIpOwoKICB2YXIgX2NvbXBvbmVudF9Db2x1bW4gPSBfcmVzb2x2ZUNvbXBvbmVudCgiQ29sdW1uIik7CgogIHZhciBfY29tcG9uZW50X1RyZWVUYWJsZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJUcmVlVGFibGUiKTsKCiAgdmFyIF9jb21wb25lbnRfQXBwRG9jID0gX3Jlc29sdmVDb21wb25lbnQoIkFwcERvYyIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIG51bGwsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzEsIFtfaG9pc3RlZF8yLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9BcHBEZW1vQWN0aW9ucyldKSwgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF80LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfVHJlZVRhYmxlLCB7CiAgICB2YWx1ZTogJGRhdGEubm9kZXMKICB9LCB7CiAgICBoZWFkZXI6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzUsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9NdWx0aVNlbGVjdCwgewogICAgICAgIG1vZGVsVmFsdWU6ICRkYXRhLnNlbGVjdGVkQ29sdW1ucywKICAgICAgICAib25VcGRhdGU6bW9kZWxWYWx1ZSI6ICRvcHRpb25zLm9uVG9nZ2xlLAogICAgICAgIG9wdGlvbnM6ICRkYXRhLmNvbHVtbnMsCiAgICAgICAgb3B0aW9uTGFiZWw6ICJoZWFkZXIiLAogICAgICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0IENvbHVtbnMiLAogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAid2lkdGgiOiAiMjBlbSIKICAgICAgICB9CiAgICAgIH0sIG51bGwsIDgKICAgICAgLyogUFJPUFMgKi8KICAgICAgLCBbIm1vZGVsVmFsdWUiLCAib25VcGRhdGU6bW9kZWxWYWx1ZSIsICJvcHRpb25zIl0pXSldOwogICAgfSksCiAgICBkZWZhdWx0OiBfd2l0aEN0eChmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQ29sdW1uLCB7CiAgICAgICAgZmllbGQ6ICJuYW1lIiwKICAgICAgICBoZWFkZXI6ICJOYW1lIiwKICAgICAgICBleHBhbmRlcjogdHJ1ZQogICAgICB9KSwgKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLnNlbGVjdGVkQ29sdW1ucywgZnVuY3Rpb24gKGNvbCkgewogICAgICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X0NvbHVtbiwgewogICAgICAgICAgZmllbGQ6IGNvbC5maWVsZCwKICAgICAgICAgIGhlYWRlcjogY29sLmhlYWRlciwKICAgICAgICAgIGtleTogY29sLmZpZWxkCiAgICAgICAgfSwgbnVsbCwgOAogICAgICAgIC8qIFBST1BTICovCiAgICAgICAgLCBbImZpZWxkIiwgImhlYWRlciJdKTsKICAgICAgfSksIDEyOAogICAgICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICAgICApKV07CiAgICB9KSwKICAgIF86IDEKICAgIC8qIFNUQUJMRSAqLwoKICB9LCA4CiAgLyogUFJPUFMgKi8KICAsIFsidmFsdWUiXSldKV0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9BcHBEb2MsIHsKICAgIG5hbWU6ICJUcmVlVGFibGVDb2xUb2dnbGVEZW1vIiwKICAgIHNvdXJjZXM6ICRkYXRhLnNvdXJjZXMsCiAgICBzZXJ2aWNlOiBbJ05vZGVTZXJ2aWNlJ10sCiAgICBkYXRhOiBbJ3RyZWV0YWJsZW5vZGVzJ10sCiAgICBnaXRodWI6ICJ0cmVldGFibGUvVHJlZVRhYmxlQ29sVG9nZ2xlRGVtby52dWUiCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInNvdXJjZXMiXSldKTsKfQ=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue"],"names":[],"mappings":";;AAEa,EAAA,KAAK,EAAC;;;8BACP,YAAA,CAGM,KAHN,EAGM;AAHD,EAAA,KAAK,EAAC;AAGL,CAHN,EAA0B,C,aACtB,YAAA,CAA6C,IAA7C,EAA6C,IAA7C,EAA6C,C,8BAAzC,Y,CAAyC,E,aAA/B,YAAA,CAA0B,MAA1B,EAA0B,IAA1B,EAAM,eAAN,CAA+B,CAA7C,CADsB,E,aAEtB,YAAA,CAAkF,GAAlF,EAAkF,IAAlF,EAAG,6EAAH,CAFsB,CAA1B,E;;AAAA,C;;;AAOC,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;AAGM,EAAA,KAAuB,EAAvB;AAAA,kBAAA;AAAA;;;;;;;;;;;;;uBAbzB,YAAA,CAwBM,KAxBN,EAwBM,IAxBN,EAwBM,CAvBF,YAAA,CAMM,KANN,EAAA,UAAA,EAMM,CALF,UAKE,EADF,YAAA,CAAkB,yBAAlB,CACE,CANN,CAuBE,EAfF,YAAA,CAYM,KAZN,EAAA,UAAA,EAYM,CAXF,YAAA,CAUM,KAVN,EAAA,UAAA,EAUM,CATF,YAAA,CAQY,oBARZ,EAQY;AARA,IAAA,KAAK,EAAE,KAAA,CAAA;AAQP,GARZ,EAAwB;AACT,IAAA,MAAM,EAAA,QAAA,CACb;AAAA,aAEM,CAFN,YAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,YAAA,CAAmK,sBAAnK,EAAmK;AAArJ,QAAA,UAAU,EAAE,KAAA,CAAA,eAAyI;AAAvH,+BAAmB,QAAA,CAAA,QAAoG;AAAzF,QAAA,OAAO,EAAE,KAAA,CAAA,OAAgF;AAAvE,QAAA,WAAW,EAAC,QAA2D;AAAlD,QAAA,WAAW,EAAC,gBAAsC;AAArB,QAAA,KAAmB,EAAnB;AAAA,mBAAA;AAAA;AAAqB,OAAnK,E,IAAA,E;;AAAA,Q,gDAAA,CACE,CAFN,CAEM,CAFN;AAAA,KADa,CADG;sBAMpB;AAAA,aAA6D,CAA7D,YAAA,CAA6D,iBAA7D,EAA6D;AAArD,QAAA,KAAK,EAAC,MAA+C;AAAxC,QAAA,MAAM,EAAC,MAAiC;AAAzB,QAAA,QAAQ,EAAE;AAAe,OAA7D,CAA6D,G,kBAC7D,YAAA,CAAyG,SAAzG,EAAyG,IAAzG,EAAyG,WAAA,CAAnF,KAAA,CAAA,eAAmF,EAApE,UAAtB,GAAsB,EAAnB;6BAAlB,YAAA,CAAyG,iBAAzG,EAAyG;AAAjE,UAAA,KAAK,EAAE,GAAG,CAAC,KAAsD;AAA9C,UAAA,MAAM,EAAE,GAAG,CAAC,MAAkC;AAAzB,UAAA,GAAG,EAAE,GAAG,CAAC;AAAgB,SAAzG,E,IAAA,E;;AAAA,U,mBAAA,C;OAAyG,CAAzG,E;;AAAA,OAD6D,EAA7D;AAAA,K,CANoB;;;;AAAA,GAAxB,E;;AAAA,I,SAAA,CASE,CAVN,CAWE,CAZN,CAeE,EADF,YAAA,CAA+J,iBAA/J,EAA+J;AAAvJ,IAAA,IAAI,EAAC,wBAAkJ;AAAxH,IAAA,OAAO,EAAE,KAAA,CAAA,OAA+G;AAArG,IAAA,OAAO,EAAE,CAAA,aAAA,CAA4F;AAA1E,IAAA,IAAI,EAAE,CAAA,gBAAA,CAAoE;AAAhD,IAAA,MAAM,EAAC;AAAyC,GAA/J,E,IAAA,E;;AAAA,I,WAAA,CACE,CAxBN,C","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Column Toggle</span></h1>\n                <p>MultiSelect component can be used to implement column toggle functionality.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\">\n                    <template #header>\n                        <div style=\"text-align:left\">\n                            <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                        </div>\n                    </template>\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableColToggleDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableColToggleDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const columns = ref([\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ]);\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const selectedColumns = ref(columns.value);\n        const onToggle = (val) => {\n            selectedColumns.value = columns.value.filter(col => val.includes(col));\n        }\n\n        return { columns, nodes, nodeService, selectedColumns, onToggle }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/multiselect/multiselect.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\">\n                <template #header>\n                    <div style=\"text-align:left\">\n                        <p-multiselect :model-value=\"selectedColumns\" @update:model-value=\"onToggle\" :options=\"columns\" option-label=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"></p-multiselect>\n                    </div>\n                </template>\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></p-olumn>\n            </p-treetable>\n        </div>                    \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n                const columns = ref([\n                    {field: 'size', header: 'Size'},\n                    {field: 'type', header: 'Type'}\n                ]);\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n                const selectedColumns = ref(columns.value);\n                const onToggle = (val) => {\n                    selectedColumns.value = columns.value.filter(col => val.includes(col));\n                }\n\n                return { columns, nodes, nodeService, selectedColumns, onToggle }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column,\n                \"p-multiselect\": primevue.multiselect\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}