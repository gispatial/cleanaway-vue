{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue?vue&type=template&id=881a4684","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue","mtime":1634589566292},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgd2l0aEN0eCBhcyBfd2l0aEN0eCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiY29udGVudC1zZWN0aW9uIGludHJvZHVjdGlvbiIKfTsKCnZhciBfaG9pc3RlZF8yID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiZGl2IiwgewogIGNsYXNzOiAiZmVhdHVyZS1pbnRybyIKfSwgWy8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImgxIiwgbnVsbCwgWy8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCJUcmVlVGFibGUgIiksIC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoInNwYW4iLCBudWxsLCAiTGF6eSIpXSksIC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoInAiLCBudWxsLCAiTGF6eSBtb2RlIGlzIGhhbmR5IHRvIGRlYWwgd2l0aCBsYXJnZSBkYXRhc2V0cywgaW5zdGVhZCBvZiBsb2FkaW5nIHRoZSBlbnRpcmUgZGF0YSwgc21hbGwgY2h1bmtzIG9mIGRhdGEgaXMgbG9hZGVkIGJ5IGludm9raW5nIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tzIGV2ZXJ5dGltZSBwYWdpbmcgb3Igc29ydGluZy4gSW4gYWRkaXRpb24sIGNoaWxkcmVuIG9mIGEgbm9kZSBjYW4gYmUgbG9hZGVkIG9uIGRlbWFuZCBhdCBvbk5vZGVFeHBhbmQgZXZlbnQgYXMgd2VsbC4gU2FtcGxlIGJlbG93cyBpbWl0YXRlcyBsYXp5IHBhZ2luZyBieSB1c2luZyBhbiBpbiBtZW1vcnkgbGlzdC4uIildLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMyA9IHsKICBjbGFzczogImNvbnRlbnQtc2VjdGlvbiBpbXBsZW1lbnRhdGlvbiIKfTsKdmFyIF9ob2lzdGVkXzQgPSB7CiAgY2xhc3M6ICJjYXJkIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0FwcERlbW9BY3Rpb25zID0gX3Jlc29sdmVDb21wb25lbnQoIkFwcERlbW9BY3Rpb25zIik7CgogIHZhciBfY29tcG9uZW50X0NvbHVtbiA9IF9yZXNvbHZlQ29tcG9uZW50KCJDb2x1bW4iKTsKCiAgdmFyIF9jb21wb25lbnRfVHJlZVRhYmxlID0gX3Jlc29sdmVDb21wb25lbnQoIlRyZWVUYWJsZSIpOwoKICB2YXIgX2NvbXBvbmVudF9BcHBEb2MgPSBfcmVzb2x2ZUNvbXBvbmVudCgiQXBwRG9jIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19ob2lzdGVkXzIsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0FwcERlbW9BY3Rpb25zKV0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzQsIFtfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9UcmVlVGFibGUsIHsKICAgIHZhbHVlOiAkZGF0YS5ub2RlcywKICAgIGxhenk6IHRydWUsCiAgICBwYWdpbmF0b3I6IHRydWUsCiAgICByb3dzOiAkZGF0YS5yb3dzLAogICAgbG9hZGluZzogJGRhdGEubG9hZGluZywKICAgIG9uTm9kZUV4cGFuZDogJG9wdGlvbnMub25FeHBhbmQsCiAgICBvblBhZ2U6ICRvcHRpb25zLm9uUGFnZSwKICAgIHRvdGFsUmVjb3JkczogJGRhdGEudG90YWxSZWNvcmRzCiAgfSwgewogICAgZGVmYXVsdDogX3dpdGhDdHgoZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gW19jcmVhdGVWTm9kZShfY29tcG9uZW50X0NvbHVtbiwgewogICAgICAgIGZpZWxkOiAibmFtZSIsCiAgICAgICAgaGVhZGVyOiAiTmFtZSIsCiAgICAgICAgZXhwYW5kZXI6IHRydWUKICAgICAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0NvbHVtbiwgewogICAgICAgIGZpZWxkOiAic2l6ZSIsCiAgICAgICAgaGVhZGVyOiAiU2l6ZSIKICAgICAgfSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0NvbHVtbiwgewogICAgICAgIGZpZWxkOiAidHlwZSIsCiAgICAgICAgaGVhZGVyOiAiVHlwZSIKICAgICAgfSldOwogICAgfSksCiAgICBfOiAxCiAgICAvKiBTVEFCTEUgKi8KCiAgfSwgOAogIC8qIFBST1BTICovCiAgLCBbInZhbHVlIiwgInJvd3MiLCAibG9hZGluZyIsICJvbk5vZGVFeHBhbmQiLCAib25QYWdlIiwgInRvdGFsUmVjb3JkcyJdKV0pXSksIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0FwcERvYywgewogICAgbmFtZTogIlRyZWVUYWJsZUxhenlEZW1vIiwKICAgIHNvdXJjZXM6ICRkYXRhLnNvdXJjZXMsCiAgICBzZXJ2aWNlOiBbJ05vZGVTZXJ2aWNlJ10sCiAgICBkYXRhOiBbJ3RyZWV0YWJsZW5vZGVzJ10sCiAgICBnaXRodWI6ICJ0cmVldGFibGUvVHJlZVRhYmxlTGF6eURlbW8udnVlIgogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJzb3VyY2VzIl0pXSk7Cn0="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue"],"names":[],"mappings":";;AAEa,EAAA,KAAK,EAAC;;;8BACP,YAAA,CAIM,KAJN,EAIM;AAJD,EAAA,KAAK,EAAC;AAIL,CAJN,EAA0B,C,aACtB,YAAA,CAAoC,IAApC,EAAoC,IAApC,EAAoC,C,8BAAhC,Y,CAAgC,E,aAAtB,YAAA,CAAiB,MAAjB,EAAiB,IAAjB,EAAM,MAAN,CAAsB,CAApC,CADsB,E,aAEtB,YAAA,CACiJ,GADjJ,EACiJ,IADjJ,EAAG,4UAAH,CAFsB,CAA1B,E;;AAAA,C;;;AAQC,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;;;;;;;;;uBAXnB,YAAA,CAsBM,KAtBN,EAsBM,IAtBN,EAsBM,CArBF,YAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANF,UAME,EADF,YAAA,CAAkB,yBAAlB,CACE,CAPN,CAqBE,EAZF,YAAA,CASM,KATN,EAAA,UAAA,EASM,CARF,YAAA,CAOM,KAPN,EAAA,UAAA,EAOM,CANF,YAAA,CAKY,oBALZ,EAKY;AALA,IAAA,KAAK,EAAE,KAAA,CAAA,KAKP;AALe,IAAA,IAAI,EAAE,IAKrB;AAL4B,IAAA,SAAS,EAAE,IAKvC;AAL8C,IAAA,IAAI,EAAE,KAAA,CAAA,IAKpD;AAL2D,IAAA,OAAO,EAAE,KAAA,CAAA,OAKpE;AAJP,IAAA,YAAW,EAAE,QAAA,CAAA,QAIN;AAJiB,IAAA,MAAI,EAAE,QAAA,CAAA,MAIvB;AAJgC,IAAA,YAAY,EAAE,KAAA,CAAA;AAI9C,GALZ,E;sBAEI;AAAA,aAA6D,CAA7D,YAAA,CAA6D,iBAA7D,EAA6D;AAArD,QAAA,KAAK,EAAC,MAA+C;AAAxC,QAAA,MAAM,EAAC,MAAiC;AAAzB,QAAA,QAAQ,EAAE;AAAe,OAA7D,CAA6D,EAC7D,YAAA,CAA4C,iBAA5C,EAA4C;AAApC,QAAA,KAAK,EAAC,MAA8B;AAAvB,QAAA,MAAM,EAAC;AAAgB,OAA5C,CAD6D,EAE7D,YAAA,CAA4C,iBAA5C,EAA4C;AAApC,QAAA,KAAK,EAAC,MAA8B;AAAvB,QAAA,MAAM,EAAC;AAAgB,OAA5C,CAF6D,CAA7D;AAAA,K;;;;GAFJ,E;;AAAA,I,sEAAA,CAME,CAPN,CAQE,CATN,CAYE,EADF,YAAA,CAAqJ,iBAArJ,EAAqJ;AAA7I,IAAA,IAAI,EAAC,mBAAwI;AAAnH,IAAA,OAAO,EAAE,KAAA,CAAA,OAA0G;AAAhG,IAAA,OAAO,EAAE,CAAA,aAAA,CAAuF;AAArE,IAAA,IAAI,EAAE,CAAA,gBAAA,CAA+D;AAA3C,IAAA,MAAM,EAAC;AAAoC,GAArJ,E,IAAA,E;;AAAA,I,WAAA,CACE,CAtBN,C","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Lazy</span></h1>\n                <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition,\n                    children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                    @node-expand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column field=\"size\" header=\"Size\"></Column>\n                    <Column field=\"type\" header=\"Type\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableLazyDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableLazyDemo.vue\" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(0, rows.value);\n                totalRecords.value = 1000;\n            }, 1000);\n        })\n        const nodes = ref();\n        const rows = ref(10);\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const onExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let newNodes = nodes.value.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    loading.value = false;\n                    nodes.value = newNodes;\n                }, 250);\n            }\n        };\n        const onPage = (event) => {\n            loading.value = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(event.first, rows.value);\n            }, 1000);\n        };\n        const loadNodes = (first, rows) => {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n\n        return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n    }\n    \n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                @node-expand=\"onExpand\" @page=\"onPage\" :total-records=\"totalRecords\">\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column field=\"size\" header=\"Size\"></p-column>\n                <p-column field=\"type\" header=\"Type\"></p-column>\n            </p-treetable>\n        </div>                   \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(0, rows.value);\n                        totalRecords.value = 1000;\n                    }, 1000);\n                })\n                const nodes = ref();\n                const rows = ref(10);\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const onExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let lazyNode = {...node};\n\n                            lazyNode.children = [\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 0',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    },\n                                },\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 1',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    }\n                                }\n                            ];\n\n                            let newNodes = nodes.value.map(n => {\n                                if (n.key === node.key) {\n                                    n = lazyNode;\n                                }\n\n                                return n;\n                            });\n\n                            loading.value = false;\n                            nodes.value = newNodes;\n                        }, 250);\n                    }\n                };\n                const onPage = (event) => {\n                    loading.value = true;\n\n                    //imitate delay of a backend call\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(event.first, rows.value);\n                    }, 1000);\n                };\n                const loadNodes = (first, rows) => {\n                    let nodes = [];\n\n                    for(let i = 0; i < rows; i++) {\n                        let node = {\n                            key: (first + i),\n                            data: {\n                                name: 'Item ' + (first + i),\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'Type ' + (first + i)\n                            },\n                            leaf: false\n                        };\n\n                        nodes.push(node);\n                    }\n\n                    return nodes;\n                }\n\n                return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}