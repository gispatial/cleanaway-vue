{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/terminal/TerminalDoc.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/terminal/TerminalDoc.vue","mtime":1634589566287},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/terminal/TerminalDoc.vue"],"names":[],"mappings":"AAuIA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAyEL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SAzEd;AAsJL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,sFAFO;AAGd,UAAA,OAAO;AAHO;AAtJb;AADN,KAAP;AA6OJ;AA/OW,CAAf","sourcesContent":["<template>\n\t<AppDoc name=\"TerminalDemo\" :sources=\"sources\" github=\"terminal/TerminalDemo.vue\" >\n        <h5>Import</h5>\n<pre v-code.script><code>\nimport Terminal from 'primevue/terminal';\nimport TerminalService from 'primevue/terminalservice';\n\n</code></pre>\n\n        <h5>Import via CDN</h5>\n<pre v-code><code>\n&lt;script src=\"https://unpkg.com/primevue@^3/core/core.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/primevue@^3/terminal/terminal.min.js\"&gt;&lt;/script&gt;\n\n</code></pre>\n\n\t\t<h5>Getting Started</h5>\n\t\t<p>Commands are processed using an EventBus implementation called TerminalService.\n            Import this service into your component and subscribe to the <i>command</i> event to process the commands by\n                sending replies with the <i>response</i> event.</p>\n<pre v-code><code>\n&lt;Terminal welcomeMessage=\"Welcome to PrimeVue\" prompt=\"primevue $\" /&gt;\n\n</code></pre>\n\n<pre v-code.script><code>\nimport TerminalService from 'primevue/terminalservice';\n\nexport default {\n     methods: {\n        commandHandler(text) {\n            let response;\n            let argsIndex = text.indexOf(' ');\n            let command = argsIndex !== -1 ? text.substring(0, argsIndex) : text;\n\n            switch(command) {\n                case \"date\":\n                    response = 'Today is ' + new Date().toDateString();\n                    break;\n\n                case \"greet\":\n                    response = 'Hola ' + text.substring(argsIndex + 1);\n                    break;\n\n                case \"random\":\n                    response = Math.floor(Math.random() * 100);\n                    break;\n\n                default:\n                    response = \"Unknown command: \" + command;\n            }\n\n            TerminalService.$emit('response', response);\n        }\n    },\n    mounted() {\n        TerminalService.$on('command', this.commandHandler);\n    },\n    beforeUnmount() {\n        TerminalService.$off('command', this.commandHandler);\n    }\n}\n\n</code></pre>\n\n        <h5>Properties</h5>\n        <p>Any property as style and class are passed to the main container element. Following are the additional properties to configure the component.</p>\n\t\t<div class=\"doc-tablewrapper\">\n\t\t\t<table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Default</th>\n                        <th>Description</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    <tr>\n                        <td>welcomeMessage</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Initial text to display on terminal.</td>\n                    </tr>\n                    <tr>\n                        <td>prompt</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Prompt text for each command.</td>\n                    </tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<h5>Styling</h5>\n\t\t<p>Following is the list of structural style classes, for theming classes visit <router-link to=\"/theming\">theming</router-link> page.</p>\n\t\t<div class=\"doc-tablewrapper\">\n\t\t\t<table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Element</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                     <tr>\n                        <td>p-terminal</td>\n                        <td>Container element.</td>\n                    </tr>\n                    <tr>\n                        <td>p-terminal-content</td>\n                        <td>Content of terminal.</td>\n                    </tr>\n                    <tr>\n                        <td>p-terminal-prompt</td>\n                        <td>Prompt text.</td>\n                    </tr>\n                     <tr>\n                        <td>p-terminal-response</td>\n                        <td>Command response.</td>\n                    </tr>\n                    <tr>\n                        <td>p-terminal-input</td>\n                        <td>Input element to enter commands.</td>\n                    </tr>\n                </tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<h5>Dependencies</h5>\n\t\t<p>None.</p>\n    </AppDoc>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <p>Enter \"date\" to display the current date, \"greet {0}\" for a message and \"random\" to get a random number.</p>\n        <Terminal welcomeMessage=\"Welcome to PrimeVue\" prompt=\"primevue $\" class=\"dark-demo-terminal\" />\n    </div>\n</template>\n\n<script>\nimport TerminalService from \"primevue/terminalservice\";\n\nexport default {\n    methods: {\n        commandHandler(text) {\n            let response;\n            let argsIndex = text.indexOf(' ');\n            let command = argsIndex !== -1 ? text.substring(0, argsIndex) : text;\n\n            switch(command) {\n                case \"date\":\n                    response = 'Today is ' + new Date().toDateString();\n                    break;\n\n                case \"greet\":\n                    response = 'Hola ' + text.substring(argsIndex + 1);\n                    break;\n\n                case \"random\":\n                    response = Math.floor(Math.random() * 100);\n                    break;\n\n                default:\n                    response = \"Unknown command: \" + command;\n            }\n            \n            TerminalService.emit('response', response);\n        }\n    },\n    mounted() {\n        TerminalService.on('command', this.commandHandler);\n    },\n    beforeUnmount() {\n        TerminalService.off('command', this.commandHandler);\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\np {\n    margin-top: 0;\n}\n\n::v-deep(.dark-demo-terminal) {\n    background-color: #212121;\n    color: #ffffff;\n\n    .p-terminal-command {\n        color: #80CBC4;\n    }\n\n    .p-terminal-prompt {\n        color: #FFD54F;\n    }\n\n    .p-terminal-response {\n        color: #9FA8DA;\n    }\n}\n</style>`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <p>Enter \"date\" to display the current date, \"greet {0}\" for a message and \"random\" to get a random number.</p>\n        <Terminal welcomeMessage=\"Welcome to PrimeVue\" prompt=\"primevue $\" class=\"dark-demo-terminal\" />\n    </div>\n</template>\n\n<script>\nimport { onMounted, onBeforeUnmount } from 'vue';\nimport TerminalService from \"primevue/terminalservice\";\n\nexport default {\n    setup() {\n        onMounted(() => {\n            TerminalService.on('command', commandHandler);\n        })\n\n        onBeforeUnmount(() => {\n            TerminalService.off('command', commandHandler);\n        })\n\n        const commandHandler = (text) => {\n            let response;\n            let argsIndex = text.indexOf(' ');\n            let command = argsIndex !== -1 ? text.substring(0, argsIndex) : text;\n\n            switch(command) {\n                case \"date\":\n                    response = 'Today is ' + new Date().toDateString();\n                    break;\n\n                case \"greet\":\n                    response = 'Hola ' + text.substring(argsIndex + 1);\n                    break;\n\n                case \"random\":\n                    response = Math.floor(Math.random() * 100);\n                    break;\n\n                default:\n                    response = \"Unknown command: \" + command;\n            }\n            \n            TerminalService.emit('response', response);\n        }\n\n        return { commandHandler }\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\np {\n    margin-top: 0;\n}\n\n::v-deep(.dark-demo-terminal) {\n    background-color: #212121;\n    color: #ffffff;\n\n    .p-terminal-command {\n        color: #80CBC4;\n    }\n\n    .p-terminal-prompt {\n        color: #FFD54F;\n    }\n\n    .p-terminal-response {\n        color: #9FA8DA;\n    }\n}\n</style>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/terminal/terminal.min.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p>Enter \"date\" to display the current date, \"greet {0}\" for a message and \"random\" to get a random number.</p>\n            <p-terminal welcome-message=\"Welcome to PrimeVue\" prompt=\"primevue $\" class=\"dark-demo-terminal\"></p-terminal>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, onMounted, onBeforeUnmount } = Vue;\n        const TerminalService = primevue.terminalservice;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    TerminalService.on('command', commandHandler);\n                })\n\n                onBeforeUnmount(() => {\n                    TerminalService.off('command', commandHandler);\n                })\n\n                const commandHandler = (text) => {\n                    let response;\n                    let argsIndex = text.indexOf(' ');\n                    let command = argsIndex !== -1 ? text.substring(0, argsIndex) : text;\n\n                    switch(command) {\n                        case \"date\":\n                            response = 'Today is ' + new Date().toDateString();\n                            break;\n\n                        case \"greet\":\n                            response = 'Hola ' + text.substring(argsIndex + 1);\n                            break;\n\n                        case \"random\":\n                            response = Math.floor(Math.random() * 100);\n                            break;\n\n                        default:\n                            response = \"Unknown command: \" + command;\n                    }\n            \n                    TerminalService.emit('response', response);\n                }\n\n                return { commandHandler }\n            },\n            components: {\n                \"p-terminal\": primevue.terminal\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n\n        <style>\n        p {\n            margin-top: 0;\n        }\n\n        .dark-demo-terminal {\n            background-color: #212121;\n            color: #ffffff;\n        }\n\n        .dark-demo-terminal .p-terminal-command {\n            color: #80CBC4;\n        }\n\n        .dark-demo-terminal .p-terminal-prompt {\n            color: #FFD54F;\n        }\n\n        .dark-demo-terminal .p-terminal-response {\n            color: #9FA8DA;\n        }\n        </style>\n\n`\n                }\n            }\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}