{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeScrollDemo.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeScrollDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeScrollDemo.vue"],"names":[],"mappings":";;;AAoCA,OAAO,WAAP,MAAwB,2BAAxB;AAEA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,MAAM,EAAE,IADL;AAEH,MAAA,MAAM,EAAE,IAFL;AAGH,MAAA,aAAa,EAAE,KAHZ;AAIH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAoEL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SApEd;AAqIL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,kUAFO;AAMd,UAAA,OAAO;AANO;AArIb;AAJN,KAAP;AAuNH,GAzNU;AA0NX,EAAA,WAAW,EAAE,IA1NF;AA2NX,EAAA,OA3NW,qBA2ND;AACN,SAAK,WAAL,GAAmB,IAAI,WAAJ,EAAnB;AACH,GA7NU;AA8NX,EAAA,OA9NW,qBA8ND;AAAA;;AACN,SAAK,WAAL,CAAiB,YAAjB,GAAgC,IAAhC,CAAqC,UAAA,IAAG;AAAA,aAAK,KAAI,CAAC,MAAL,GAAc,IAAnB;AAAA,KAAxC;AACA,SAAK,MAAL,GAAc,KAAK,CAAC,IAAN,CAAW;AAAC,MAAA,MAAM,EAAE;AAAT,KAAX,EAA0B,GAA1B,CAA8B,UAAC,CAAD,EAAG,CAAH;AAAA,aAAS,KAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,CAAT;AAAA,KAA9B,CAAd;AACH,GAjOU;AAkOX,EAAA,OAAO,EAAE;AACL,IAAA,UADK,sBACM,CADN,EACS,QADT,EACmB;AACpB,UAAI,IAAG,GAAI;AACP,QAAA,GAAG,EAAE,UAAU,CADR;AAEP,QAAA,KAAK,EAAE,UAAU,CAFV;AAGP,QAAA,IAAI,EAAE,UAAU,CAHT;AAIP,QAAA,YAAY,EAAE,mBAJP;AAKP,QAAA,aAAa,EAAE,cALR;AAMP,QAAA,QAAQ,EAAE,KAAK,CAAC,IAAN,CAAW;AAAC,UAAA,MAAM,EAAE;AAAT,SAAX,EAA+B,GAA/B,CAAmC,UAAC,CAAD,EAAG,CAAH,EAAS;AAClD,iBAAO;AACH,YAAA,KAAK,EAAE,UAAU,CAAV,GAAc,GAAd,GAAoB,CADxB;AAEH,YAAA,IAAI,EAAE,UAAU,CAAV,GAAc,GAAd,GAAoB,CAFvB;AAGH,YAAA,IAAI,EAAE;AAHH,WAAP;AAKH,SANS;AANH,OAAX;AAeA,aAAO,IAAP;AACJ;AAlBK;AAlOE,CAAf","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Scroll</span></h1>\n                <p>Scrolling is used to preserve space in cases when rendering large data.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Regular Scroll</h5>\n                <p>Scrollable viewport is fixed.</p>\n                <Tree :value=\"nodes1\" scrollHeight=\"200px\"></Tree>\n\n                <h5>Flex Scroll</h5>\n                <p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below\n                to display maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n                <Button type=\"button\" icon=\"pi pi-external-link\" label=\"View\" @click=\"dialogVisible = true\"></Button>\n\n                <Dialog header=\"Flex Scroll\" v-model:visible=\"dialogVisible\" :style=\"{width: '50vw'}\" maximizable\n                    :contentStyle=\"{height: '300px'}\" class=\"p-fluid\">\n                    <Tree :value=\"nodes2\" scrollHeight=\"flex\"></Tree>\n                    <template #footer>\n                        <Button type=\"button\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" class=\"p-button-text\"></Button>\n                    </template>\n                </Dialog>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeScrollDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeScrollDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes1: null,\n            nodes2: null,\n            dialogVisible: false,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Regular Scroll</h5>\n        <p>Scrollable viewport is fixed.</p>\n        <Tree :value=\"nodes1\" scrollHeight=\"200px\"></Tree>\n\n        <h5>Flex Scroll</h5>\n        <p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below\n        to display maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n        <Button type=\"button\" icon=\"pi pi-external-link\" label=\"View\" @click=\"dialogVisible = true\"></Button>\n\n        <Dialog header=\"Flex Scroll\" v-model:visible=\"dialogVisible\" :style=\"{width: '50vw'}\" maximizable\n            :contentStyle=\"{height: '300px'}\" class=\"p-fluid\">\n            <Tree :value=\"nodes2\" scrollHeight=\"flex\"></Tree>\n            <template #footer>\n                <Button type=\"button\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" class=\"p-button-text\"></Button>\n            </template>\n        </Dialog>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes1: null,\n            nodes2: null,\n            dialogVisible: false\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes1 = data);\n        this.nodes2 = Array.from({length: 100}).map((_,i) => this.createNode(i, 2));\n    },\n    methods: {\n        createNode(i, children) {\n            let node = {\n                key: 'node_' + i,\n                label: 'Node ' + i,\n                data: 'Node ' + i,\n                expandedIcon: 'pi pi-folder-open',\n                collapsedIcon: 'pi pi-folder',\n                children: Array.from({length: children}).map((_,j) => {\n                    return {\n                        label: 'Node ' + i + '.' + j, \n                        data: 'Node ' + i + '.' + j, \n                        icon: 'pi pi-file-o'\n                    }\n                })\n            };\n\n            return node;\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Regular Scroll</h5>\n        <p>Scrollable viewport is fixed.</p>\n        <Tree :value=\"nodes1\" scrollHeight=\"200px\"></Tree>\n\n        <h5>Flex Scroll</h5>\n        <p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below\n        to display maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n        <Button type=\"button\" icon=\"pi pi-external-link\" label=\"View\" @click=\"dialogVisible = true\"></Button>\n\n        <Dialog header=\"Flex Scroll\" v-model:visible=\"dialogVisible\" :style=\"{width: '50vw'}\" :maximizable=\"true\"\n            :contentStyle=\"{height: '300px'}\" class=\"p-fluid\">\n            <Tree :value=\"nodes2\" scrollHeight=\"flex\"></Tree>\n            <template #footer>\n                <Button type=\"button\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" class=\"p-button-text\"></Button>\n            </template>\n        </Dialog>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useToast } from 'primevue/usetoast';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        const createNode = (i, children) => {\n            let node = {\n                key: 'node_' + i,\n                label: 'Node ' + i,\n                data: 'Node ' + i,\n                expandedIcon: 'pi pi-folder-open',\n                collapsedIcon: 'pi pi-folder',\n                children: Array.from({length: children}).map((_,j) => {\n                    return {\n                        label: 'Node ' + i + '.' + j, \n                        data: 'Node ' + i + '.' + j, \n                        icon: 'pi pi-file-o'\n                    }\n                })\n            };\n\n            return node;\n        }\n\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes1.value = data);\n            nodes2.value = Array.from({length: 100}).map((_,i) => createNode(i, 2));\n        })\n\n        const nodes1 = ref(null);\n        const nodes2 = ref(null);\n        const dialogVisible = ref(false);\n        const nodeService = ref(new NodeService());\n\n        return { nodes1, nodes2, dialogVisible }\n    }\n}\n<\\\\/script>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/dialog/dialog.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/toast/toast.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/toastservice/toastservice.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <h5>Regular Scroll</h5>\n            <p>Scrollable viewport is fixed.</p>\n            <p-tree :value=\"nodes1\" scroll-height=\"200px\"></p-tree>\n\n            <h5>Flex Scroll</h5>\n            <p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the tree. Click the button below\n            to display maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\n            <p-button type=\"button\" icon=\"pi pi-external-link\" label=\"View\" @click=\"dialogVisible = true\"></p-button>\n\n            <p-dialog header=\"Flex Scroll\" v-model:visible=\"dialogVisible\" :style=\"{width: '50vw'}\" :maximizable=\"true\"\n                :content-style=\"{height: '300px'}\" class=\"p-fluid\">\n                <p-tree :value=\"nodes2\" scrollHeight=\"flex\"></p-tree>\n                <template #footer>\n                    <p-button type=\"button\" icon=\"pi pi-check\" @click=\"dialogVisible = false\" class=\"p-button-text\"></p-button>\n                </template>\n            </p-dialog>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n        const { useToast } = primevue.usetoast;\n\n        const App = {\n            setup() {\n                const createNode = (i, children) => {\n                    let node = {\n                        key: 'node_' + i,\n                        label: 'Node ' + i,\n                        data: 'Node ' + i,\n                        expandedIcon: 'pi pi-folder-open',\n                        collapsedIcon: 'pi pi-folder',\n                        children: Array.from({length: children}).map((_,j) => {\n                            return {\n                                label: 'Node ' + i + '.' + j, \n                                data: 'Node ' + i + '.' + j, \n                                icon: 'pi pi-file-o'\n                            }\n                        })\n                    };\n\n                    return node;\n                }\n\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes1.value = data);\n                    nodes2.value = Array.from({length: 100}).map((_,i) => createNode(i, 2));\n                })\n\n                const nodes1 = ref(null);\n                const nodes2 = ref(null);\n                const dialogVisible = ref(false);\n                const nodeService = ref(new NodeService());\n\n                return { nodes1, nodes2, dialogVisible }\n            },\n            components: {\n                \"p-tree\": primevue.tree,\n                \"p-toast\": primevue.toast,\n                \"p-dialog\": primevue.dialog,\n                \"p-button\": primevue.button\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .use(primevue.toastservice)\n            .mount(\"#app\");\n        <\\\\/script>`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes1 = data);\n        this.nodes2 = Array.from({length: 100}).map((_,i) => this.createNode(i, 2));\n    },\n    methods: {\n        createNode(i, children) {\n            let node = {\n                key: 'node_' + i,\n                label: 'Node ' + i,\n                data: 'Node ' + i,\n                expandedIcon: 'pi pi-folder-open',\n                collapsedIcon: 'pi pi-folder',\n                children: Array.from({length: children}).map((_,j) => {\n                    return {\n                        label: 'Node ' + i + '.' + j, \n                        data: 'Node ' + i + '.' + j, \n                        icon: 'pi pi-file-o'\n                    }\n                })\n            };\n\n            return node;\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"],"sourceRoot":""}]}