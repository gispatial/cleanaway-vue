{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/datatable/DataTable.vue?vue&type=template&id=abf7e44e","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/datatable/DataTable.vue","mtime":1634589566215},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/datatable/DataTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div :class=\"containerClass\" data-scrollselectors=\".p-datatable-wrapper\">\n        <slot></slot>\n        <div class=\"p-datatable-loading-overlay p-component-overlay\" v-if=\"loading\">\n            <i :class=\"loadingIconClass\"></i>\n        </div>\n        <div class=\"p-datatable-header\" v-if=\"$slots.header\">\n            <slot name=\"header\"></slot>\n        </div>\n        <DTPaginator v-if=\"paginatorTop\" :rows=\"d_rows\" :first=\"d_first\" :totalRecords=\"totalRecordsLength\" :pageLinkSize=\"pageLinkSize\" :template=\"paginatorTemplate\" :rowsPerPageOptions=\"rowsPerPageOptions\"\n                :currentPageReportTemplate=\"currentPageReportTemplate\" class=\"p-paginator-top\" @page=\"onPage($event)\" :alwaysShow=\"alwaysShowPaginator\">\n            <template #left v-if=\"$slots.paginatorLeft\">\n                <slot name=\"paginatorLeft\"></slot>\n            </template>\n            <template #right v-if=\"$slots.paginatorRight\">\n                <slot name=\"paginatorRight\"></slot>\n            </template>\n        </DTPaginator>\n        <div class=\"p-datatable-wrapper\" :style=\"{maxHeight: scrollHeight}\">\n            <table ref=\"table\" role=\"table\" class=\"p-datatable-table\">\n                <DTTableHeader :columnGroup=\"headerColumnGroup\" :columns=\"columns\" :rowGroupMode=\"rowGroupMode\"\n                        :groupRowsBy=\"groupRowsBy\" :groupRowSortField=\"groupRowSortField\" :resizableColumns=\"resizableColumns\" :allRowsSelected=\"allRowsSelected\" :empty=\"empty\"\n                        :sortMode=\"sortMode\" :sortField=\"d_sortField\" :sortOrder=\"d_sortOrder\" :multiSortMeta=\"d_multiSortMeta\" :filters=\"d_filters\" :filtersStore=\"filters\" :filterDisplay=\"filterDisplay\"\n                        @column-click=\"onColumnHeaderClick($event)\" @column-mousedown=\"onColumnHeaderMouseDown($event)\" @filter-change=\"onFilterChange\" @filter-apply=\"onFilterApply\"\n                        @column-dragstart=\"onColumnHeaderDragStart($event)\" @column-dragover=\"onColumnHeaderDragOver($event)\" @column-dragleave=\"onColumnHeaderDragLeave($event)\" @column-drop=\"onColumnHeaderDrop($event)\"\n                        @column-resizestart=\"onColumnResizeStart($event)\" @checkbox-change=\"toggleRowsWithCheckbox($event)\" />\n                <DTTableBody v-if=\"frozenValue\" :value=\"frozenValue\" :frozenRow=\"true\" class=\"p-datatable-frozen-tbody\" :columns=\"columns\" :dataKey=\"dataKey\" :selection=\"selection\" :selectionKeys=\"d_selectionKeys\" :selectionMode=\"selectionMode\" :contextMenu=\"contextMenu\" :contextMenuSelection=\"contextMenuSelection\"\n                    :rowGroupMode=\"rowGroupMode\" :groupRowsBy=\"groupRowsBy\" :expandableRowGroups=\"expandableRowGroups\" :rowClass=\"rowClass\" :editMode=\"editMode\" :compareSelectionBy=\"compareSelectionBy\" :scrollable=\"scrollable\"\n                    :expandedRowIcon=\"expandedRowIcon\" :collapsedRowIcon=\"collapsedRowIcon\" :expandedRows=\"expandedRows\" :expandedRowKeys=\"d_expandedRowKeys\" :expandedRowGroups=\"expandedRowGroups\"\n                    :editingRows=\"editingRows\" :editingRowKeys=\"d_editingRowKeys\" :templates=\"$slots\" :loading=\"loading\" :responsiveLayout=\"responsiveLayout\"\n                    @rowgroup-toggle=\"toggleRowGroup\" @row-click=\"onRowClick($event)\" @row-dblclick=\"onRowDblClick($event)\" @row-rightclick=\"onRowRightClick($event)\" @row-touchend=\"onRowTouchEnd\" @row-keydown=\"onRowKeyDown\"\n                    @row-mousedown=\"onRowMouseDown\" @row-dragstart=\"onRowDragStart($event)\" @row-dragover=\"onRowDragOver($event)\" @row-dragleave=\"onRowDragLeave($event)\" @row-dragend=\"onRowDragEnd($event)\" @row-drop=\"onRowDrop($event)\"\n                    @row-toggle=\"toggleRow($event)\" @radio-change=\"toggleRowWithRadio($event)\" @checkbox-change=\"toggleRowWithCheckbox($event)\"\n                    @cell-edit-init=\"onCellEditInit($event)\" @cell-edit-complete=\"onCellEditComplete($event)\" @cell-edit-cancel=\"onCellEditCancel($event)\"\n                    @row-edit-init=\"onRowEditInit($event)\" @row-edit-save=\"onRowEditSave($event)\" @row-edit-cancel=\"onRowEditCancel($event)\"\n                    :editingMeta=\"d_editingMeta\" @editing-meta-change=\"onEditingMetaChange\" />\n                <DTTableBody :value=\"dataToRender\" :columns=\"columns\" :empty=\"empty\" :dataKey=\"dataKey\" :selection=\"selection\" :selectionKeys=\"d_selectionKeys\" :selectionMode=\"selectionMode\" :contextMenu=\"contextMenu\" :contextMenuSelection=\"contextMenuSelection\"\n                    :rowGroupMode=\"rowGroupMode\" :groupRowsBy=\"groupRowsBy\" :expandableRowGroups=\"expandableRowGroups\" :rowClass=\"rowClass\" :editMode=\"editMode\" :compareSelectionBy=\"compareSelectionBy\" :scrollable=\"scrollable\"\n                    :expandedRowIcon=\"expandedRowIcon\" :collapsedRowIcon=\"collapsedRowIcon\" :expandedRows=\"expandedRows\" :expandedRowKeys=\"d_expandedRowKeys\" :expandedRowGroups=\"expandedRowGroups\"\n                    :editingRows=\"editingRows\" :editingRowKeys=\"d_editingRowKeys\" :templates=\"$slots\" :loading=\"loading\" :responsiveLayout=\"responsiveLayout\"\n                    @rowgroup-toggle=\"toggleRowGroup\" @row-click=\"onRowClick($event)\" @row-dblclick=\"onRowDblClick($event)\" @row-rightclick=\"onRowRightClick($event)\" @row-touchend=\"onRowTouchEnd\" @row-keydown=\"onRowKeyDown\"\n                    @row-mousedown=\"onRowMouseDown\" @row-dragstart=\"onRowDragStart($event)\" @row-dragover=\"onRowDragOver($event)\" @row-dragleave=\"onRowDragLeave($event)\" @row-dragend=\"onRowDragEnd($event)\" @row-drop=\"onRowDrop($event)\"\n                    @row-toggle=\"toggleRow($event)\" @radio-change=\"toggleRowWithRadio($event)\" @checkbox-change=\"toggleRowWithCheckbox($event)\"\n                    @cell-edit-init=\"onCellEditInit($event)\" @cell-edit-complete=\"onCellEditComplete($event)\" @cell-edit-cancel=\"onCellEditCancel($event)\"\n                    @row-edit-init=\"onRowEditInit($event)\" @row-edit-save=\"onRowEditSave($event)\" @row-edit-cancel=\"onRowEditCancel($event)\"\n                    :editingMeta=\"d_editingMeta\" @editing-meta-change=\"onEditingMetaChange\" />\n                <DTTableFooter :columnGroup=\"footerColumnGroup\" :columns=\"columns\" />\n            </table>\n        </div>\n        <DTPaginator v-if=\"paginatorBottom\" :rows=\"d_rows\" :first=\"d_first\" :totalRecords=\"totalRecordsLength\" :pageLinkSize=\"pageLinkSize\" :template=\"paginatorTemplate\" :rowsPerPageOptions=\"rowsPerPageOptions\"\n                :currentPageReportTemplate=\"currentPageReportTemplate\" class=\"p-paginator-bottom\" @page=\"onPage($event)\" :alwaysShow=\"alwaysShowPaginator\">\n            <template #left v-if=\"$slots.paginatorLeft\">\n                <slot name=\"paginatorLeft\"></slot>\n            </template>\n            <template #right v-if=\"$slots.paginatorRight\">\n                <slot name=\"paginatorRight\"></slot>\n            </template>\n        </DTPaginator>\n        <div class=\"p-datatable-footer\" v-if=\"$slots.footer\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" class=\"p-column-resizer-helper\" style=\"display: none\"></div>\n        <span ref=\"reorderIndicatorUp\" class=\"pi pi-arrow-down p-datatable-reorder-indicator-up\" style=\"position: absolute; display: none\" v-if=\"reorderableColumns\" />\n        <span ref=\"reorderIndicatorDown\" class=\"pi pi-arrow-up p-datatable-reorder-indicator-down\" style=\"position: absolute; display: none\" v-if=\"reorderableColumns\" />\n    </div>\n</template>\n\n<script>\nimport {ObjectUtils,DomHandler,UniqueComponentId} from 'primevue/utils';\nimport {FilterMatchMode,FilterOperator,FilterService} from 'primevue/api';\nimport Paginator from 'primevue/paginator';\nimport TableHeader from './TableHeader.vue';\nimport TableBody from './TableBody.vue';\nimport TableFooter from './TableFooter.vue';\n\nexport default {\n    name: 'DataTable',\n    emits: ['value-change', 'update:first', 'update:rows', 'page', 'update:sortField', 'update:sortOrder', 'update:multiSortMeta', 'sort', 'filter', 'row-click', 'row-dblclick',\n        'update:selection', 'row-select', 'row-unselect', 'update:contextMenuSelection', 'row-contextmenu', 'row-unselect-all', 'row-select-all',\n        'column-resize-end', 'column-reorder', 'row-reorder', 'update:expandedRows', 'row-collapse', 'row-expand',\n        'update:expandedRowGroups', 'rowgroup-collapse', 'rowgroup-expand', 'update:filters', 'state-restore', 'state-save',\n        'cell-edit-init', 'cell-edit-complete', 'cell-edit-cancel', 'update:editingRows', 'row-edit-init', 'row-edit-save', 'row-edit-cancel'],\n    props: {\n        value: {\n            type: Array,\n            default: null\n        },\n        dataKey: {\n            type: String,\n            default: null\n        },\n        rows: {\n            type: Number,\n            default: 0\n        },\n        first: {\n            type: Number,\n            default: 0\n        },\n        totalRecords: {\n            type: Number,\n            default: 0\n        },\n        paginator: {\n            type: Boolean,\n            default: false\n        },\n        paginatorPosition: {\n            type: String,\n            default: 'bottom'\n        },\n        alwaysShowPaginator: {\n            type: Boolean,\n            default: true\n        },\n        paginatorTemplate: {\n            type: String,\n            default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n        },\n        pageLinkSize: {\n            type: Number,\n            default: 5\n        },\n        rowsPerPageOptions: {\n            type: Array,\n            default: null\n        },\n        currentPageReportTemplate: {\n            type: String,\n            default: '({currentPage} of {totalPages})'\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: 'pi pi-spinner'\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        defaultSortOrder: {\n            type: Number,\n            default: 1\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        removableSort: {\n            type: Boolean,\n            default: false\n        },\n        filters: {\n            type: Object,\n            default: null\n        },\n        filterDisplay: {\n            type: String,\n            default: null\n        },\n        globalFilterFields: {\n            type: Array,\n            default: null\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        selection: {\n            type: [Array,Object],\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        compareSelectionBy: {\n            type: String,\n            default: 'deepEquals'\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: true\n        },\n        contextMenu: {\n            type: Boolean,\n            default: false\n        },\n        contextMenuSelection: {\n            type: Object,\n            default: null\n        },\n        rowHover: {\n            type: Boolean,\n            default: false\n        },\n        csvSeparator: {\n            type: String,\n            default: ','\n        },\n        exportFilename: {\n            type: String,\n            default: 'download'\n        },\n        exportFunction: {\n            type: Function,\n            default: null\n        },\n        autoLayout: {\n            type: Boolean,\n            default: false\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        columnResizeMode: {\n            type: String,\n            default: 'fit'\n        },\n        reorderableColumns: {\n            type: Boolean,\n            default: false\n        },\n        expandedRows: {\n            type: Array,\n            default: null\n        },\n        expandedRowIcon: {\n            type: String,\n            default: 'pi-chevron-down'\n        },\n        collapsedRowIcon: {\n            type: String,\n            default: 'pi-chevron-right'\n        },\n        rowGroupMode: {\n            type: String,\n            default: null\n        },\n        groupRowsBy: {\n            type: [Array,String],\n            default: null\n        },\n        expandableRowGroups: {\n            type: Boolean,\n            default: false\n        },\n        expandedRowGroups: {\n            type: Array,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        editMode: {\n            type: String,\n            default: null\n        },\n        editingRows: {\n            type: Array,\n            default: null\n        },\n        rowClass: {\n            type: null,\n            default: null\n        },\n        scrollable: {\n            type: Boolean,\n            default: false\n        },\n        scrollDirection: {\n            type: String,\n            default: \"vertical\"\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        frozenValue: {\n            type: Array,\n            default: null\n        },\n        responsiveLayout: {\n            type: String,\n            default: 'stack'\n        },\n        breakpoint: {\n            type: String,\n            default: '960px'\n        },\n        showGridlines: {\n            type: Boolean,\n            default: false\n        },\n        stripedRows: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data() {\n        return {\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n            d_groupRowsSortMeta: null,\n            d_selectionKeys: null,\n            d_expandedRowKeys: null,\n            d_columnOrder: null,\n            d_editingRowKeys: null,\n            d_editingMeta: {},\n            d_filters: this.cloneFilters(this.filters)\n        };\n    },\n    rowTouched: false,\n    anchorRowIndex: null,\n    rangeRowIndex: null,\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    columnResizing: false,\n    colReorderIconWidth: null,\n    colReorderIconHeight: null,\n    draggedColumn: null,\n    draggedRowIndex: null,\n    droppedRowIndex: null,\n    rowDragging: null,\n    columnWidthsState: null,\n    tableWidthState: null,\n    columnWidthsRestored: false,\n    watch: {\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        },\n        selection: {\n            immediate: true,\n            handler(newValue) {\n                if (this.dataKey) {\n                    this.updateSelectionKeys(newValue);\n                }\n            }\n        },\n        expandedRows(newValue) {\n            if (this.dataKey) {\n                this.updateExpandedRowKeys(newValue);\n            }\n        },\n        editingRows(newValue) {\n            if (this.dataKey) {\n                this.updateEditingRowKeys(newValue);\n            }\n        },\n        filters: {\n            deep: true,\n            handler: function(newValue) {\n                this.d_filters = this.cloneFilters(newValue);\n            }\n        }\n    },\n    beforeMount() {\n        if (this.isStateful()) {\n            this.restoreState();\n        }\n    },\n    mounted() {\n        this.$el.setAttribute(this.attributeSelector, '');\n\n        if (this.responsiveLayout === 'stack' && !this.scrollable) {\n            this.createResponsiveStyle();\n        }\n\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n\n        if (this.editMode === 'row' && this.dataKey && !this.d_editingRowKeys) {\n            this.updateEditingRowKeys(this.editingRows);\n        }\n    },\n    beforeUnmount() {\n        this.unbindColumnResizeEvents();\n        this.destroyStyleElement();\n        this.destroyResponsiveStyle();\n    },\n    updated() {\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        if (this.editMode === 'row' && this.dataKey && !this.d_editingRowKeys) {\n            this.updateEditingRowKeys(this.editingRows);\n        }\n    },\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        onPage(event) {\n            this.clearEditingMetaData();\n\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n            this.$emit('value-change', this.processedData);\n        },\n        onColumnHeaderClick(e) {\n            const event = e.originalEvent;\n            const column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (DomHandler.hasClass(targetNode, 'p-sortable-column') || DomHandler.hasClass(targetNode, 'p-column-title') || DomHandler.hasClass(targetNode, 'p-column-header-content')\n                    || DomHandler.hasClass(targetNode, 'p-sortable-column-icon') || DomHandler.hasClass(targetNode.parentElement, 'p-sortable-column-icon')) {\n                    DomHandler.clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && (this.d_sortOrder * -1 === this.defaultSortOrder)) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            }\n                            else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        }\n                        else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    }\n                    else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n                        if (!metaKey) {\n                            this.d_multiSortMeta =  this.d_multiSortMeta.filter(meta => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                    this.$emit('value-change', this.processedData);\n                }\n            }\n        },\n        sortSingle(value) {\n            this.clearEditingMetaData();\n\n            if (this.groupRowsBy && this.groupRowsBy === this.sortField) {\n                this.d_multiSortMeta = [\n                    {field: this.sortField, order: this.sortOrder || this.defaultSortOrder},\n                    {field: this.d_sortField, order: this.d_sortOrder}\n                ];\n\n                return this.sortMultiple(value);\n            }\n\n            let data = [...value];\n\n            data.sort((data1, data2) => {\n                let value1 = ObjectUtils.resolveFieldData(data1, this.d_sortField);\n                let value2 = ObjectUtils.resolveFieldData(data2, this.d_sortField);\n\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2, undefined, { numeric: true });\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.d_sortOrder * result);\n            });\n\n            return data;\n        },\n        sortMultiple(value) {\n            this.clearEditingMetaData();\n\n            if (this.groupRowsBy && (this.d_groupRowsSortMeta || (this.d_multiSortMeta.length && this.groupRowsBy === this.d_multiSortMeta[0].field))) {\n                const firstSortMeta = this.d_multiSortMeta[0];\n                !this.d_groupRowsSortMeta && (this.d_groupRowsSortMeta = firstSortMeta);\n\n                if (firstSortMeta.field !== this.d_groupRowsSortMeta.field) {\n                    this.d_multiSortMeta = [this.d_groupRowsSortMeta, ...this.d_multiSortMeta];\n                }\n            }\n\n            let data = [...value];\n\n            data.sort((data1, data2) => {\n                return this.multisortField(data1, data2, 0);\n            });\n\n            return data;\n        },\n        multisortField(data1, data2, index) {\n            const value1 = ObjectUtils.resolveFieldData(data1, this.d_multiSortMeta[index].field);\n            const value2 = ObjectUtils.resolveFieldData(data2, this.d_multiSortMeta[index].field);\n            let result = null;\n\n            if (typeof value1 === 'string' || value1 instanceof String) {\n                if (value1.localeCompare && (value1 !== value2)) {\n                    return (this.d_multiSortMeta[index].order * value1.localeCompare(value2, undefined, { numeric: true }));\n                }\n            }\n            else {\n                result = (value1 < value2) ? -1 : 1;\n            }\n\n            if (value1 === value2)  {\n                return (this.d_multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, index + 1)) : 0;\n            }\n\n            return (this.d_multiSortMeta[index].order * result);\n        },\n        addMultiSortField(field) {\n            let index =  this.d_multiSortMeta.findIndex(meta => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && (this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder))\n                    this.d_multiSortMeta.splice(index, 1);\n                else\n                    this.d_multiSortMeta[index] = {field: field, order: this.d_multiSortMeta[index].order * -1};\n            }\n            else {\n                this.d_multiSortMeta.push({field: field, order: this.defaultSortOrder});\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        filter(data) {\n            if (!data) {\n                return;\n            }\n\n            this.clearEditingMetaData();\n\n            let globalFilterFieldsArray;\n            if (this.filters['global']) {\n                globalFilterFieldsArray = this.globalFilterFields|| this.columns.map(col => this.columnProp(col, 'filterField') || this.columnProp(col, 'field'));\n            }\n\n            let filteredValue = [];\n\n            for (let i = 0; i < data.length; i++) {\n                let localMatch = true;\n                let globalMatch = false;\n                let localFiltered = false;\n\n                for (let prop in this.filters) {\n                    if (Object.prototype.hasOwnProperty.call(this.filters, prop) && prop !== 'global') {\n                        localFiltered = true;\n                        let filterField = prop;\n                        let filterMeta = this.filters[filterField];\n\n                        if (filterMeta.operator) {\n                            for (let filterConstraint of filterMeta.constraints) {\n                                localMatch = this.executeLocalFilter(filterField, data[i], filterConstraint);\n\n                                if ((filterMeta.operator === FilterOperator.OR && localMatch) || (filterMeta.operator === FilterOperator.AND && !localMatch)) {\n                                    break;\n                                }\n                            }\n                        }\n                        else {\n                            localMatch = this.executeLocalFilter(filterField, data[i], filterMeta);\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n                }\n\n                if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                    for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                        let globalFilterField = globalFilterFieldsArray[j];\n                        globalMatch = FilterService.filters[this.filters['global'].matchMode || FilterMatchMode.CONTAINS](ObjectUtils.resolveFieldData(data[i], globalFilterField), this.filters['global'].value, this.filterLocale);\n\n                        if (globalMatch) {\n                            break;\n                        }\n                    }\n                }\n\n                let matches;\n                if (this.filters['global']) {\n                    matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                }\n                else {\n                    matches = localFiltered && localMatch;\n                }\n\n                if (matches) {\n                    filteredValue.push(data[i]);\n                }\n            }\n\n            if (filteredValue.length === this.value.length) {\n                filteredValue = data;\n            }\n\n            let filterEvent = this.createLazyLoadEvent();\n            filterEvent.filteredValue = filteredValue;\n            this.$emit('filter', filterEvent);\n            this.$emit('value-change', filteredValue);\n\n            return filteredValue;\n        },\n        executeLocalFilter(field, rowData, filterMeta) {\n            let filterValue = filterMeta.value;\n            let filterMatchMode = filterMeta.matchMode || FilterMatchMode.STARTS_WITH;\n            let dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);\n            let filterConstraint = FilterService.filters[filterMatchMode];\n\n            return filterConstraint(dataFieldValue, filterValue, this.filterLocale);\n        },\n        onRowClick(e) {\n            const event = e.originalEvent;\n            if (DomHandler.isClickable(event.target)) {\n                return;\n            }\n\n            this.$emit('row-click', e);\n\n            if (this.selectionMode) {\n                const rowData = e.data;\n                const rowIndex = e.index;\n\n                if (this.isMultipleSelectionMode() && event.shiftKey && this.anchorRowIndex != null) {\n                    DomHandler.clearSelection();\n                    this.rangeRowIndex = rowIndex;\n                    this.selectRange(event);\n                }\n                else {\n                    const selected = this.isSelected(rowData);\n                    const metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                    this.anchorRowIndex = rowIndex;\n                    this.rangeRowIndex = rowIndex;\n\n                    if (metaSelection) {\n                        let metaKey = event.metaKey || event.ctrlKey;\n\n                        if (selected && metaKey) {\n                            if(this.isSingleSelectionMode()) {\n                                this.$emit('update:selection', null);\n                            }\n                            else {\n                                const selectionIndex = this.findIndexInSelection(rowData);\n                                const _selection = this.selection.filter((val,i) => i != selectionIndex);\n                                this.$emit('update:selection', _selection);\n                            }\n\n                            this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                        }\n                        else {\n                            if(this.isSingleSelectionMode()) {\n                                this.$emit('update:selection', rowData);\n                            }\n                            else if (this.isMultipleSelectionMode()) {\n                                let _selection = metaKey ? (this.selection || []) : [];\n                                _selection = [..._selection, rowData];\n                                this.$emit('update:selection', _selection);\n                            }\n\n                            this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                        }\n                    }\n                    else {\n                        if (this.selectionMode === 'single') {\n                            if (selected) {\n                                this.$emit('update:selection', null);\n                                this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                            }\n                            else {\n                                this.$emit('update:selection', rowData);\n                                this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                            }\n                        }\n                        else if (this.selectionMode === 'multiple') {\n                            if (selected) {\n                                const selectionIndex = this.findIndexInSelection(rowData);\n                                const _selection = this.selection.filter((val, i) => i != selectionIndex);\n                                this.$emit('update:selection', _selection);\n                                this.$emit('row-unselect', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                            }\n                            else {\n                                const _selection = this.selection ? [...this.selection, rowData] : [rowData];\n                                this.$emit('update:selection', _selection);\n                                this.$emit('row-select', {originalEvent: event, data: rowData, index: event.index, type: 'row'});\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.rowTouched = false;\n        },\n        onRowDblClick(e) {\n            const event = e.originalEvent;\n            if (DomHandler.isClickable(event.target)) {\n                return;\n            }\n\n            this.$emit('row-dblclick', e);\n        },\n        onRowRightClick(event) {\n            DomHandler.clearSelection();\n            event.originalEvent.target.focus();\n\n            this.$emit('update:contextMenuSelection', event.data);\n            this.$emit('row-contextmenu', event);\n        },\n        onRowTouchEnd() {\n            this.rowTouched = true;\n        },\n        onRowKeyDown(e) {\n            const event = e.originalEvent;\n            const rowData = e.data;\n            const rowIndex = e.index;\n\n            if (this.selectionMode) {\n                const row = event.target;\n\n                switch (event.which) {\n                    //down arrow\n                    case 40:\n                        var nextRow = this.findNextSelectableRow(row);\n                        if (nextRow) {\n                            nextRow.focus();\n                        }\n\n                        event.preventDefault();\n                    break;\n\n                    //up arrow\n                    case 38:\n                        var prevRow = this.findPrevSelectableRow(row);\n                        if (prevRow) {\n                            prevRow.focus();\n                        }\n\n                        event.preventDefault();\n                    break;\n\n                    //enter\n                    case 13:\n                        this.onRowClick({originalEvent: event, data: rowData, index: rowIndex});\n                    break;\n\n                    default:\n                        //no op\n                    break;\n                }\n            }\n        },\n        findNextSelectableRow(row) {\n            let nextRow = row.nextElementSibling;\n            if (nextRow) {\n                if (DomHandler.hasClass(nextRow, 'p-selectable-row'))\n                    return nextRow;\n                else\n                    return this.findNextSelectableRow(nextRow);\n            }\n            else {\n                return null;\n            }\n        },\n        findPrevSelectableRow(row) {\n            let prevRow = row.previousElementSibling;\n            if (prevRow) {\n                if (DomHandler.hasClass(prevRow, 'p-selectable-row'))\n                    return prevRow;\n                else\n                    return this.findPrevSelectableRow(prevRow);\n            }\n            else {\n                return null;\n            }\n        },\n        toggleRowWithRadio(event) {\n            const rowData = event.data;\n\n            if (this.isSelected(rowData)) {\n                this.$emit('update:selection', null);\n                this.$emit('row-unselect', {originalEvent: event, data: rowData, type: 'radiobutton'});\n            }\n            else {\n                this.$emit('update:selection', rowData);\n                this.$emit('row-select', {originalEvent: event, data: rowData, type: 'radiobutton'});\n            }\n        },\n        toggleRowWithCheckbox(event) {\n            const rowData = event.data;\n\n            if (this.isSelected(rowData)) {\n                const selectionIndex = this.findIndexInSelection(rowData);\n                const _selection = this.selection.filter((val, i) => i != selectionIndex);\n                this.$emit('update:selection', _selection);\n                this.$emit('row-unselect', {originalEvent: event, data: rowData, type: 'checkbox'});\n            }\n            else {\n                let _selection = this.selection ? [...this.selection] : [];\n                _selection = [..._selection, rowData];\n                this.$emit('update:selection', _selection);\n                this.$emit('row-select', {originalEvent: event, data: rowData, type: 'checkbox'});\n            }\n        },\n        toggleRowsWithCheckbox(event) {\n            const processedData = this.processedData;\n            const checked = this.allRowsSelected;\n            const _selection = checked ? [] : (this.frozenValue ? [...this.frozenValue, ...processedData]: processedData);\n            this.$emit('update:selection', _selection);\n\n            if (checked)\n                this.$emit('row-unselect-all', {originalEvent: event});\n            else\n                this.$emit('row-select-all', {originalEvent: event, data: _selection});\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        isSelected(rowData) {\n            if (rowData && this.selection) {\n                if (this.dataKey) {\n                    return this.d_selectionKeys ? this.d_selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;\n                }\n                else {\n                    if (this.selection instanceof Array)\n                        return this.findIndexInSelection(rowData) > -1;\n                    else\n                        return this.equals(rowData, this.selection);\n                }\n            }\n\n            return false;\n        },\n        findIndexInSelection(rowData) {\n            return this.findIndex(rowData, this.selection);\n        },\n        findIndex(rowData, collection) {\n            let index = -1;\n            if (collection && collection.length) {\n                for (let i = 0; i < collection.length; i++) {\n                    if (this.equals(rowData, collection[i])) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n\n            return index;\n        },\n        updateSelectionKeys(selection) {\n            this.d_selectionKeys = {};\n            if (Array.isArray(selection)) {\n                for (let data of selection) {\n                    this.d_selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.d_selectionKeys[String(ObjectUtils.resolveFieldData(selection, this.dataKey))] = 1;\n            }\n        },\n        updateExpandedRowKeys(expandedRows) {\n            if (expandedRows && expandedRows.length) {\n                this.d_expandedRowKeys = {};\n                for (let data of expandedRows) {\n                    this.d_expandedRowKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.d_expandedRowKeys = null;\n            }\n        },\n        updateEditingRowKeys(editingRows) {\n            if (editingRows && editingRows.length) {\n                this.d_editingRowKeys = {};\n                for (let data of editingRows) {\n                    this.d_editingRowKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.d_editingRowKeys = null;\n            }\n        },\n        equals(data1, data2) {\n            return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n        },\n        selectRange(event) {\n            let rangeStart, rangeEnd;\n\n            if (this.rangeRowIndex > this.anchorRowIndex) {\n                rangeStart = this.anchorRowIndex;\n                rangeEnd = this.rangeRowIndex;\n            }\n            else if(this.rangeRowIndex < this.anchorRowIndex) {\n                rangeStart = this.rangeRowIndex;\n                rangeEnd = this.anchorRowIndex;\n            }\n            else {\n                rangeStart = this.rangeRowIndex;\n                rangeEnd = this.rangeRowIndex;\n            }\n\n            if (this.lazy && this.paginator) {\n                rangeStart -= this.first;\n                rangeEnd -= this.first;\n            }\n\n            const value = this.processedData;\n            let _selection = [];\n            for(let i = rangeStart; i <= rangeEnd; i++) {\n                let rangeRowData = value[i];\n                _selection.push(rangeRowData);\n                this.$emit('row-select', {originalEvent: event, data: rangeRowData, type: 'row'});\n            }\n\n            this.$emit('update:selection', _selection);\n        },\n        exportCSV(options) {\n            let data = this.processedData;\n            let csv = '\\ufeff';\n\n            if (options && options.selectionOnly)\n                data = this.selection || [];\n            else if (this.frozenValue)\n                data = data ? [...this.frozenValue, ...data] : this.frozenValue;\n\n            //headers\n            let headerInitiated = false;\n            for (let i = 0; i < this.columns.length; i++) {\n                let column = this.columns[i];\n\n                if (this.columnProp(column, 'exportable') !== false && this.columnProp(column, 'field')) {\n                    if (headerInitiated)\n                        csv += this.csvSeparator;\n                    else\n                        headerInitiated = true;\n\n                    csv += '\"' + (this.columnProp(column, 'header') || this.columnProp(column, 'field')) + '\"';\n                }\n            }\n\n            //body\n            if (data) {\n                data.forEach(record => {\n                    csv += '\\n';\n                    let rowInitiated = false;\n                    for (let i = 0; i < this.columns.length; i++) {\n                        let column = this.columns[i];\n                        if (this.columnProp(column, 'exportable') !== false && this.columnProp(column, 'field')) {\n                            if (rowInitiated)\n                                csv += this.csvSeparator;\n                            else\n                                rowInitiated = true;\n\n                            let cellData = ObjectUtils.resolveFieldData(record, this.columnProp(column, 'field'));\n\n                            if (cellData != null) {\n                                if (this.exportFunction) {\n                                    cellData = this.exportFunction({\n                                        data: cellData,\n                                        field: this.columnProp(column, 'field')\n                                    });\n                                }\n                                else\n                                    cellData = String(cellData).replace(/\"/g, '\"\"');\n                            }\n                            else\n                                cellData = '';\n\n                            csv += '\"' + cellData + '\"';\n                        }\n                    }\n                });\n            }\n\n            let blob = new Blob([csv], {\n                type: 'text/csv;charset=utf-8;'\n            });\n\n            if (window.navigator.msSaveOrOpenBlob) {\n                navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n            }\n            else {\n                let link = document.createElement(\"a\");\n                link.style.display = 'none';\n                document.body.appendChild(link);\n                if (link.download !== undefined) {\n                    link.setAttribute('href', URL.createObjectURL(blob));\n                    link.setAttribute('download', this.exportFilename + '.csv');\n                    link.click();\n                }\n                else {\n                    csv = 'data:text/csv;charset=utf-8,' + csv;\n                    window.open(encodeURI(csv));\n                }\n                document.body.removeChild(link);\n            }\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = (event.pageX - containerLeft + this.$el.scrollLeft);\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n            DomHandler.addClass(this.$el, 'p-unselectable-text');\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = (event.pageX - containerLeft + this.$el.scrollLeft) + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n            let delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth||15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        if (!this.scrollable) {\n                            this.resizeColumnElement.style.width = newColumnWidth + 'px';\n                            if(nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                        else {\n                            this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                        }\n                    }\n                }\n                else if (this.columnResizeMode === 'expand') {\n                    const tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n                    this.$refs.table.style.width = tableWidth;\n                    this.$refs.table.style.minWidth = tableWidth;\n\n                    if (!this.scrollable)\n                        this.resizeColumnElement.style.width = newColumnWidth + 'px';\n                    else\n                        this.resizeTableCells(newColumnWidth);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            DomHandler.removeClass(this.$el, 'p-unselectable-text');\n\n            this.unbindColumnResizeEvents();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = DomHandler.index(this.resizeColumnElement);\n            let widths = [];\n            let headers = DomHandler.find(this.$refs.table, '.p-datatable-thead > tr > th');\n            headers.forEach(header => widths.push(DomHandler.getOuterWidth(header)));\n\n            this.destroyStyleElement();\n            this.createStyleElement();\n\n            let innerHTML = '';\n            widths.forEach((width,index) => {\n                let colWidth = index === colIndex ? newColumnWidth : (nextColumnWidth && index === colIndex + 1) ? nextColumnWidth : width;\n                innerHTML += `\n                    .p-datatable[${this.attributeSelector}] .p-datatable-thead > tr > th:nth-child(${index+1}) {\n                        flex: 0 0 ${colWidth}px !important;\n                    }\n\n                    .p-datatable[${this.attributeSelector}] .p-datatable-tbody > tr > td:nth-child(${index+1}) {\n                        flex: 0 0 ${colWidth}px !important;\n                    }\n                `\n            });\n            this.styleElement.innerHTML = innerHTML;\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', () => {\n                    if(this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if(this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                 this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnHeaderMouseDown(e) {\n            const event = e.originalEvent;\n            const column = e.column;\n\n            if (this.reorderableColumns && this.columnProp(column, 'reorderableColumn') !== false) {\n                if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\n                    event.currentTarget.draggable = false;\n                else\n                    event.currentTarget.draggable = true;\n            }\n        },\n        onColumnHeaderDragStart(event) {\n            if (this.columnResizing) {\n                event.preventDefault();\n                return;\n            }\n\n            this.colReorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.$refs.reorderIndicatorUp);\n            this.colReorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.$refs.reorderIndicatorUp);\n\n            this.draggedColumn = this.findParentHeader(event.target);\n            event.dataTransfer.setData('text', 'b'); // Firefox requires this to make dragging possible\n        },\n        onColumnHeaderDragOver(event) {\n            let dropHeader = this.findParentHeader(event.target);\n            if(this.reorderableColumns && this.draggedColumn && dropHeader) {\n                event.preventDefault();\n                let containerOffset = DomHandler.getOffset(this.$el);\n                let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n                if (this.draggedColumn !== dropHeader) {\n                    let targetLeft =  dropHeaderOffset.left - containerOffset.left;\n                    let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                    this.$refs.reorderIndicatorUp.style.top = dropHeaderOffset.top - containerOffset.top - (this.colReorderIconHeight - 1) + 'px';\n                    this.$refs.reorderIndicatorDown.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                    if(event.pageX > columnCenter) {\n                        this.$refs.reorderIndicatorUp.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2)) + 'px';\n                        this.$refs.reorderIndicatorDown.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.colReorderIconWidth / 2))+ 'px';\n                        this.dropPosition = 1;\n                    }\n                    else {\n                        this.$refs.reorderIndicatorUp.style.left = (targetLeft - Math.ceil(this.colReorderIconWidth / 2)) + 'px';\n                        this.$refs.reorderIndicatorDown.style.left = (targetLeft - Math.ceil(this.colReorderIconWidth / 2))+ 'px';\n                        this.dropPosition = -1;\n                    }\n\n                    this.$refs.reorderIndicatorUp.style.display = 'block';\n                    this.$refs.reorderIndicatorDown.style.display = 'block';\n                }\n            }\n        },\n        onColumnHeaderDragLeave(event) {\n            if(this.reorderableColumns && this.draggedColumn) {\n                event.preventDefault();\n                this.$refs.reorderIndicatorUp.style.display = 'none';\n                this.$refs.reorderIndicatorDown.style.display = 'none';\n            }\n        },\n        onColumnHeaderDrop(event) {\n            event.preventDefault();\n            if (this.draggedColumn) {\n                let dragIndex = DomHandler.index(this.draggedColumn);\n                let dropIndex = DomHandler.index(this.findParentHeader(event.target));\n                let allowDrop = (dragIndex !== dropIndex);\n                if (allowDrop && ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dragIndex - dropIndex === 1 && this.dropPosition === 1))) {\n                    allowDrop = false;\n                }\n\n                if (allowDrop) {\n                    ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n                    this.updateReorderableColumns();\n\n                    this.$emit('column-reorder', {\n                        originalEvent: event,\n                        dragIndex: dragIndex,\n                        dropIndex: dropIndex\n                    });\n                }\n\n                this.$refs.reorderIndicatorUp.style.display = 'none';\n                this.$refs.reorderIndicatorDown.style.display = 'none';\n                this.draggedColumn.draggable = false;\n                this.draggedColumn = null;\n                this.dropPosition = null;\n            }\n        },\n        findParentHeader(element) {\n            if(element.nodeName === 'TH') {\n                return element;\n            }\n            else {\n                let parent = element.parentElement;\n                while(parent.nodeName !== 'TH') {\n                    parent = parent.parentElement;\n                    if (!parent) break;\n                }\n                return parent;\n            }\n        },\n        findColumnByKey(columns, key) {\n            if (columns && columns.length) {\n                for (let i = 0; i < columns.length; i++) {\n                    let column = columns[i];\n                    if (this.columnProp(column, 'columnKey') === key || this.columnProp(column, 'field') === key) {\n                        return column;\n                    }\n                }\n            }\n\n            return null;\n        },\n        onRowMouseDown(event) {\n            if (DomHandler.hasClass(event.target, 'p-datatable-reorderablerow-handle'))\n                event.currentTarget.draggable = true;\n            else\n                event.currentTarget.draggable = false;\n        },\n        onRowDragStart(e) {\n            const event = e.originalEvent;\n            const index = e.index;\n            this.rowDragging = true;\n            this.draggedRowIndex = index;\n            event.dataTransfer.setData('text', 'b');    // For firefox\n        },\n        onRowDragOver(e) {\n            const event = e.originalEvent;\n            const index = e.index;\n\n            if (this.rowDragging && this.draggedRowIndex !== index) {\n                let rowElement = event.currentTarget;\n                let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n                let pageY = event.pageY;\n                let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n                let prevRowElement = rowElement.previousElementSibling;\n\n                if (pageY < rowMidY) {\n                    DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n\n                    this.droppedRowIndex = index;\n                    if (prevRowElement)\n                        DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                    else\n                        DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n                }\n                else {\n                    if (prevRowElement)\n                        DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n                    else\n                        DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n\n                    this.droppedRowIndex = index + 1;\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n                }\n\n                event.preventDefault();\n            }\n        },\n        onRowDragLeave(event) {\n            let rowElement = event.currentTarget;\n            let prevRowElement = rowElement.previousElementSibling;\n            if (prevRowElement) {\n                DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n            }\n\n            DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n            DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n        },\n        onRowDragEnd(event) {\n            this.rowDragging = false;\n            this.draggedRowIndex = null;\n            this.droppedRowIndex = null;\n            event.currentTarget.draggable = false;\n        },\n        onRowDrop(event) {\n            if (this.droppedRowIndex != null) {\n                let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n                let processedData = [...this.processedData];\n                ObjectUtils.reorderArray(processedData, this.draggedRowIndex, dropIndex);\n\n                this.$emit('row-reorder', {\n                    originalEvent: event,\n                    dragIndex: this.draggedRowIndex,\n                    dropIndex: dropIndex,\n                    value: processedData\n                });\n            }\n\n            //cleanup\n            this.onRowDragLeave(event);\n            this.onRowDragEnd(event);\n            event.preventDefault();\n        },\n        toggleRow(event) {\n            let rowData = event.data;\n            let expanded;\n            let expandedRowIndex;\n            let _expandedRows = this.expandedRows ? [...this.expandedRows] : [];\n\n            if (this.dataKey) {\n                expanded = this.d_expandedRowKeys ? this.d_expandedRowKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined : false;\n            }\n            else {\n                expandedRowIndex = this.findIndex(rowData, this.expandedRows);\n                expanded = expandedRowIndex > -1;\n            }\n\n            if (expanded) {\n                if (expandedRowIndex == null) {\n                    expandedRowIndex = this.findIndex(rowData, this.expandedRows);\n                }\n                _expandedRows.splice(expandedRowIndex, 1);\n                this.$emit('update:expandedRows', _expandedRows);\n                this.$emit('row-collapse', event);\n            }\n            else {\n                _expandedRows.push(rowData);\n                this.$emit('update:expandedRows', _expandedRows);\n                this.$emit('row-expand', event);\n            }\n        },\n        toggleRowGroup(e) {\n            const event = e.originalEvent;\n            const data = e.data;\n            const groupFieldValue = ObjectUtils.resolveFieldData(data, this.groupRowsBy);\n            let _expandedRowGroups = this.expandedRowGroups ? [...this.expandedRowGroups] : [];\n\n            if (this.isRowGroupExpanded(data)) {\n                _expandedRowGroups = _expandedRowGroups.filter(group => group !== groupFieldValue);\n                this.$emit('update:expandedRowGroups', _expandedRowGroups);\n                this.$emit('rowgroup-collapse', {originalEvent: event, data: groupFieldValue});\n            }\n            else {\n                _expandedRowGroups.push(groupFieldValue);\n                this.$emit('update:expandedRowGroups', _expandedRowGroups);\n                this.$emit('rowgroup-expand', {originalEvent: event, data: groupFieldValue});\n            }\n        },\n        isRowGroupExpanded(rowData) {\n            if (this.expandableRowGroups && this.expandedRowGroups) {\n                let groupFieldValue = ObjectUtils.resolveFieldData(rowData, this.groupRowsBy);\n                return this.expandedRowGroups.indexOf(groupFieldValue) > -1;\n            }\n            return false;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch(this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            const storage = this.getStorage();\n            let state = {};\n\n            if (this.paginator) {\n                state.first = this.d_first;\n                state.rows = this.d_rows;\n            }\n\n            if (this.d_sortField) {\n                state.sortField = this.d_sortField;\n                state.sortOrder = this.d_sortOrder;\n            }\n\n            if (this.d_multiSortMeta) {\n                state.multiSortMeta = this.d_multiSortMeta;\n            }\n\n            if (this.hasFilters) {\n                state.filters = this.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.saveColumnWidths(state);\n            }\n\n            if (this.reorderableColumns) {\n                state.columnOrder = this.d_columnOrder;\n            }\n\n            if (this.expandedRows) {\n                state.expandedRows = this.expandedRows;\n                state.expandedRowKeys = this.d_expandedRowKeys;\n            }\n\n            if (this.expandedRowGroups) {\n                state.expandedRowGroups = this.expandedRowGroups;\n            }\n\n            if (this.selection) {\n                state.selection = this.selection;\n                state.selectionKeys = this.d_selectionKeys;\n            }\n\n            if (Object.keys(state).length) {\n                storage.setItem(this.stateKey, JSON.stringify(state));\n            }\n\n            this.$emit('state-save', state);\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n            const dateFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n            const reviver = function(key, value) {\n                if (typeof value === \"string\" && dateFormat.test(value)) {\n                    return new Date(value);\n                }\n\n                return value;\n            }\n\n            if (stateString) {\n                let restoredState = JSON.parse(stateString, reviver);\n\n                if (this.paginator) {\n                    this.d_first = restoredState.first;\n                    this.d_rows = restoredState.rows;\n                }\n\n                if (restoredState.sortField) {\n                    this.d_sortField = restoredState.sortField;\n                    this.d_sortOrder = restoredState.sortOrder;\n                }\n\n                if (restoredState.multiSortMeta) {\n                    this.d_multiSortMeta = restoredState.multiSortMeta;\n                }\n\n                if (restoredState.filters) {\n                    this.$emit('update:filters', restoredState.filters);\n                }\n\n                if (this.resizableColumns) {\n                    this.columnWidthsState = restoredState.columnWidths;\n                    this.tableWidthState = restoredState.tableWidth;\n                }\n\n                if (this.reorderableColumns) {\n                    this.d_columnOrder = restoredState.columnOrder;\n                }\n\n                if (restoredState.expandedRows) {\n                    this.d_expandedRowKeys = restoredState.expandedRowKeys;\n                    this.$emit('update:expandedRows', restoredState.expandedRows);\n                }\n\n                if (restoredState.expandedRowGroups) {\n                    this.$emit('update:expandedRowGroups', restoredState.expandedRowGroups);\n                }\n\n                if (restoredState.selection) {\n                    this.d_selectionKeys = restoredState.d_selectionKeys;\n                    this.$emit('update:selection', restoredState.selection);\n                }\n\n                this.$emit('state-restore', restoredState);\n            }\n        },\n        saveColumnWidths(state) {\n            let widths = [];\n            let headers = DomHandler.find(this.$el, '.p-datatable-thead > tr > th');\n            headers.forEach(header => widths.push(DomHandler.getOuterWidth(header)));\n            state.columnWidths = widths.join(',');\n\n            if (this.columnResizeMode === 'expand') {\n                state.tableWidth = DomHandler.getOuterWidth(this.$refs.table) + 'px';\n            }\n        },\n        restoreColumnWidths() {\n            if (this.columnWidthsState) {\n                let widths = this.columnWidthsState.split(',');\n\n                if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                    this.$refs.table.style.width = this.tableWidthState;\n                    this.$refs.table.style.minWidth = this.tableWidthState;\n                    this.$el.style.width = this.tableWidthState;\n                }\n\n                this.createStyleElement();\n\n                if (this.scrollable && widths && widths.length > 0) {\n                    let innerHTML = '';\n                    widths.forEach((width,index) => {\n                        innerHTML += `\n                            .p-datatable[${this.attributeSelector}] .p-datatable-thead > tr > th:nth-child(${index+1}) {\n                                flex: 0 0 ${width}px;\n                            }\n\n                            .p-datatable[${this.attributeSelector}] .p-datatable-tbody > tr > td:nth-child(${index+1}) {\n                                flex: 0 0 ${width}px;\n                            }\n                        `\n                    });\n\n                    this.styleElement.innerHTML = innerHTML;\n                }\n                else {\n                    DomHandler.find(this.$refs.table, '.p-datatable-thead > tr > th').forEach((header, index) => header.style.width = widths[index] + 'px');\n                }\n            }\n        },\n        onCellEditInit(event) {\n            this.$emit('cell-edit-init', event);\n        },\n        onCellEditComplete(event) {\n            this.$emit('cell-edit-complete', event);\n        },\n        onCellEditCancel(event) {\n            this.$emit('cell-edit-cancel', event);\n        },\n        onRowEditInit(event) {\n            let _editingRows = this.editingRows ? [...this.editingRows] : [];\n            _editingRows.push(event.data);\n            this.$emit('update:editingRows', _editingRows);\n            this.$emit('row-edit-init', event);\n        },\n        onRowEditSave(event) {\n            let _editingRows = [...this.editingRows];\n            _editingRows.splice(this.findIndex(event.data, _editingRows), 1);\n            this.$emit('update:editingRows', _editingRows);\n            this.$emit('row-edit-save', event);\n        },\n        onRowEditCancel(event) {\n            let _editingRows = [...this.editingRows];\n            _editingRows.splice(this.findIndex(event.data, _editingRows), 1);\n            this.$emit('update:editingRows', _editingRows);\n            this.$emit('row-edit-cancel', event);\n        },\n        onEditingMetaChange(event) {\n            let { data, field, index, editing } = event;\n            let meta = this.d_editingMeta[index];\n\n            if (editing) {\n                !meta && (meta = this.d_editingMeta[index] = { data: { ...data }, fields: [] });\n                meta['fields'].push(field);\n            }\n            else if (meta) {\n                const fields = meta['fields'].filter(f => f !== field);\n                !fields.length ? (delete this.d_editingMeta[index]) : (meta['fields'] = fields);\n            }\n        },\n        clearEditingMetaData() {\n            if (this.editMode) {\n                this.d_editingMeta = {};\n            }\n        },\n        createLazyLoadEvent(event) {\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.d_filters\n            };\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        getChildren() {\n            return this.$slots.default ? this.$slots.default() : null;\n        },\n        onFilterChange(filters) {\n            this.d_filters = filters;\n        },\n        onFilterApply() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:filters', this.d_filters);\n\n            if (this.lazy) {\n                this.$emit('filter', this.createLazyLoadEvent());\n            }\n        },\n        cloneFilters() {\n            let cloned = {};\n            if (this.filters) {\n                Object.entries(this.filters).forEach(([prop,value]) => {\n                    cloned[prop] = value.operator ? {operator: value.operator, constraints: value.constraints.map(constraint => {return {...constraint}})} : {...value};\n                });\n            }\n\n            return cloned;\n        },\n        updateReorderableColumns() {\n            let columnOrder = [];\n            this.columns.forEach(col => columnOrder.push(this.columnProp(col, 'columnKey')||this.columnProp(col, 'field')));\n            this.d_columnOrder = columnOrder;\n        },\n        createStyleElement() {\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            document.head.appendChild(this.styleElement);\n        },\n        createResponsiveStyle() {\n\t\t\tif (!this.responsiveStyleElement) {\n\t\t\t\tthis.responsiveStyleElement = document.createElement('style');\n\t\t\t\tthis.responsiveStyleElement.type = 'text/css';\n\t\t\t\tdocument.head.appendChild(this.responsiveStyleElement);\n\n                let innerHTML = `\n@media screen and (max-width: ${this.breakpoint}) {\n    .p-datatable[${this.attributeSelector}] .p-datatable-thead > tr > th,\n    .p-datatable[${this.attributeSelector}] .p-datatable-tfoot > tr > td {\n        display: none !important;\n    }\n\n    .p-datatable[${this.attributeSelector}] .p-datatable-tbody > tr > td {\n        display: flex;\n        width: 100% !important;\n        align-items: center;\n        justify-content: space-between;\n    }\n\n    .p-datatable[${this.attributeSelector}] .p-datatable-tbody > tr > td:not(:last-child) {\n        border: 0 none;\n    }\n\n    .p-datatable[${this.attributeSelector}].p-datatable-gridlines .p-datatable-tbody > tr > td:last-child {\n        border-top: 0;\n        border-right: 0;\n        border-left: 0;\n    }\n\n    .p-datatable[${this.attributeSelector}] .p-datatable-tbody > tr > td > .p-column-title {\n        display: block;\n    }\n}\n`;\n\n                this.responsiveStyleElement.innerHTML = innerHTML;\n\t\t\t}\n\t\t},\n        destroyResponsiveStyle() {\n            if (this.responsiveStyleElement) {\n                document.head.removeChild(this.responsiveStyleElement);\n                this.responsiveStyleElement = null;\n            }\n        },\n        destroyStyleElement() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [\n                'p-datatable p-component', {\n                    'p-datatable-hoverable-rows': (this.rowHover || this.selectionMode),\n                    'p-datatable-auto-layout': this.autoLayout,\n                    'p-datatable-resizable': this.resizableColumns,\n                    'p-datatable-resizable-fit': this.resizableColumns && this.columnResizeMode === 'fit',\n                    'p-datatable-scrollable': this.scrollable,\n                    'p-datatable-scrollable-vertical': this.scrollable && this.scrollDirection === 'vertical',\n                    'p-datatable-scrollable-horizontal': this.scrollable && this.scrollDirection === 'horizontal',\n                    'p-datatable-scrollable-both': this.scrollable && this.scrollDirection === 'both',\n                    'p-datatable-flex-scrollable': (this.scrollable && this.scrollHeight === 'flex'),\n                    'p-datatable-responsive-stack': this.responsiveLayout === 'stack',\n                    'p-datatable-responsive-scroll': this.responsiveLayout === 'scroll',\n                    'p-datatable-striped': this.stripedRows,\n                    'p-datatable-gridlines': this.showGridlines,\n                    'p-datatable-grouped-header': this.headerColumnGroup != null,\n                    'p-datatable-grouped-footer': this.footerColumnGroup != null\n                }\n            ];\n        },\n        columns() {\n            let cols = [];\n            let children = this.getChildren();\n\n            if (!children) {\n                return;\n            }\n\n            children.forEach(child => {\n                if (child.children && child.children instanceof Array)\n                    cols = [...cols, ...child.children];\n                else if (child.type.name === 'Column')\n                    cols.push(child);\n            });\n\n            if (this.reorderableColumns && this.d_columnOrder) {\n                let orderedColumns = [];\n                for (let columnKey of this.d_columnOrder) {\n                    let column = this.findColumnByKey(cols, columnKey);\n                    if (column) {\n                        orderedColumns.push(column);\n                    }\n                }\n\n                return [...orderedColumns, ...cols.filter((item) => orderedColumns.indexOf(item) < 0)];\n            }\n\n            return cols;\n        },\n        headerColumnGroup() {\n            const children = this.getChildren();\n            if (children) {\n                for (let child of children) {\n                    if (child.type.name === 'ColumnGroup' && this.columnProp(child, 'type') === 'header') {\n                        return child;\n                    }\n                }\n            }\n\n            return null;\n        },\n        footerColumnGroup() {\n            const children = this.getChildren();\n            if (children) {\n                for (let child of children) {\n                    if (child.type.name === 'ColumnGroup' && this.columnProp(child, 'type') === 'footer') {\n                        return child;\n                    }\n                }\n            }\n\n            return null;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        processedData() {\n            let data = this.value || [];\n\n            if (!this.lazy) {\n                if (data && data.length) {\n                    if (this.hasFilters) {\n                        data = this.filter(data);\n                    }\n\n                    if (this.sorted) {\n                        if(this.sortMode === 'single')\n                            data = this.sortSingle(data);\n                        else if(this.sortMode === 'multiple')\n                            data = this.sortMultiple(data);\n                    }\n                }\n            }\n\n            return data;\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (data && this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n                return data.slice(first, first + this.d_rows);\n            }\n            else {\n                return data;\n            }\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            }\n            else {\n                const data = this.processedData;\n                return data ? data.length : 0;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n            return (!data || data.length === 0);\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        loadingIconClass() {\n            return ['p-datatable-loading-icon pi-spin', this.loadingIcon];\n        },\n        allRowsSelected() {\n            const val = this.frozenValue ? [...this.frozenValue, ...this.processedData]: this.processedData;\n            const length = this.lazy ? this.totalRecords : (val ? val.length : 0);\n            return (val && length > 0 && this.selection && this.selection.length > 0 && this.selection.length === length);\n        },\n        attributeSelector() {\n            return UniqueComponentId();\n        },\n        groupRowSortField() {\n            return this.sortMode === 'single' ? this.sortField : (this.d_groupRowsSortMeta ? this.d_groupRowsSortMeta.field : null);\n        }\n    },\n    components: {\n        'DTPaginator': Paginator,\n        'DTTableHeader': TableHeader,\n        'DTTableBody': TableBody,\n        'DTTableFooter': TableFooter,\n    }\n}\n</script>\n\n<style>\n.p-datatable {\n    position: relative;\n}\n\n.p-datatable table {\n    border-collapse: collapse;\n    min-width: 100%;\n    table-layout: fixed;\n}\n\n.p-datatable .p-sortable-column {\n    cursor: pointer;\n    user-select: none;\n}\n\n.p-datatable .p-sortable-column .p-column-title,\n.p-datatable .p-sortable-column .p-sortable-column-icon,\n.p-datatable .p-sortable-column .p-sortable-column-badge {\n    vertical-align: middle;\n}\n\n.p-datatable .p-sortable-column .p-sortable-column-badge {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.p-datatable-responsive-scroll > .p-datatable-wrapper {\n    overflow-x: auto;\n}\n\n.p-datatable-responsive-scroll > .p-datatable-wrapper > table,\n.p-datatable-auto-layout > .p-datatable-wrapper > table {\n    table-layout: auto;\n}\n\n.p-datatable-hoverable-rows .p-selectable-row {\n    cursor: pointer;\n}\n\n/* Scrollable */\n.p-datatable-scrollable .p-datatable-wrapper {\n    position: relative;\n    overflow: auto;\n}\n\n.p-datatable-scrollable .p-datatable-thead,\n.p-datatable-scrollable .p-datatable-tbody,\n.p-datatable-scrollable .p-datatable-tfoot {\n    display: block;\n}\n\n.p-datatable-scrollable .p-datatable-thead > tr,\n.p-datatable-scrollable .p-datatable-tbody > tr,\n.p-datatable-scrollable .p-datatable-tfoot > tr {\n    display: flex;\n    flex-wrap: nowrap;\n    width: 100%;\n}\n\n.p-datatable-scrollable .p-datatable-thead > tr > th,\n.p-datatable-scrollable .p-datatable-tbody > tr > td,\n.p-datatable-scrollable .p-datatable-tfoot > tr > td {\n    display: flex;\n    flex: 1 1 0;\n    align-items: center;\n}\n\n.p-datatable-scrollable .p-datatable-thead {\n    position: sticky;\n    top: 0;\n    z-index: 1;\n}\n\n.p-datatable-scrollable .p-datatable-frozen-tbody {\n    position: sticky;\n    z-index: 1;\n}\n\n.p-datatable-scrollable .p-datatable-tfoot {\n    position: sticky;\n    bottom: 0;\n    z-index: 1;\n}\n\n.p-datatable-scrollable .p-frozen-column {\n    position: sticky;\n    background: inherit;\n}\n\n.p-datatable-scrollable th.p-frozen-column {\n    z-index: 1;\n}\n\n.p-datatable-scrollable-both .p-datatable-thead > tr > th,\n.p-datatable-scrollable-both .p-datatable-tbody > tr > td,\n.p-datatable-scrollable-both .p-datatable-tfoot > tr > td,\n.p-datatable-scrollable-horizontal .p-datatable-thead > tr > th\n.p-datatable-scrollable-horizontal .p-datatable-tbody > tr > td,\n.p-datatable-scrollable-horizontal .p-datatable-tfoot > tr > td {\n    flex: 0 0 auto;\n}\n\n.p-datatable-flex-scrollable {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.p-datatable-flex-scrollable .p-datatable-wrapper {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    height: 100%;\n}\n\n.p-datatable-scrollable .p-rowgroup-header {\n    position: sticky;\n    z-index: 1;\n}\n\n.p-datatable-scrollable.p-datatable-grouped-header .p-datatable-thead,\n.p-datatable-scrollable.p-datatable-grouped-footer .p-datatable-tfoot {\n    display: table;\n    border-collapse: collapse;\n    width: 100%;\n    table-layout: fixed;\n}\n\n.p-datatable-scrollable.p-datatable-grouped-header .p-datatable-thead > tr,\n.p-datatable-scrollable.p-datatable-grouped-footer .p-datatable-tfoot > tr {\n    display: table-row;\n}\n\n.p-datatable-scrollable.p-datatable-grouped-header .p-datatable-thead > tr > th,\n.p-datatable-scrollable.p-datatable-grouped-footer .p-datatable-tfoot > tr > td {\n    display: table-cell;\n}\n\n/* Resizable */\n.p-datatable-resizable > .p-datatable-wrapper {\n    overflow-x: auto;\n}\n\n.p-datatable-resizable .p-datatable-thead > tr > th,\n.p-datatable-resizable .p-datatable-tfoot > tr > td,\n.p-datatable-resizable .p-datatable-tbody > tr > td {\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.p-datatable-resizable .p-resizable-column {\n    background-clip: padding-box;\n    position: relative;\n}\n\n.p-datatable-resizable-fit .p-resizable-column:last-child .p-column-resizer {\n    display: none;\n}\n\n.p-datatable .p-column-resizer {\n    display: block;\n    position: absolute !important;\n    top: 0;\n    right: 0;\n    margin: 0;\n    width: .5rem;\n    height: 100%;\n    padding: 0px;\n    cursor:col-resize;\n    border: 1px solid transparent;\n}\n\n.p-datatable .p-column-header-content {\n    display: flex;\n    align-items: center;\n}\n\n.p-datatable .p-column-resizer-helper {\n    width: 1px;\n    position: absolute;\n    z-index: 10;\n    display: none;\n}\n\n.p-datatable .p-row-editor-init,\n.p-datatable .p-row-editor-save,\n.p-datatable .p-row-editor-cancel {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n\n/* Expand */\n.p-datatable .p-row-toggler {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n}\n\n/* Reorder */\n.p-datatable-reorder-indicator-up,\n.p-datatable-reorder-indicator-down {\n    position: absolute;\n    display: none;\n}\n\n/* Loader */\n.p-datatable .p-datatable-loading-overlay {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 2;\n}\n\n/* Filter */\n.p-column-filter-row {\n    display: flex;\n    align-items: center;\n    width: 100%;\n}\n\n.p-column-filter-menu {\n    display: inline-flex;\n    margin-left: auto;\n}\n\n.p-column-filter-row .p-column-filter-element {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n.p-column-filter-menu-button,\n.p-column-filter-clear-button {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n    text-decoration: none;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-column-filter-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.p-column-filter-row-items {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.p-column-filter-row-item {\n    cursor: pointer;\n}\n\n.p-column-filter-add-button,\n.p-column-filter-remove-button {\n    justify-content: center;\n}\n\n.p-column-filter-add-button .p-button-label,\n.p-column-filter-remove-button .p-button-label {\n    flex-grow: 0;\n}\n\n.p-column-filter-buttonbar {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.p-column-filter-buttonbar .p-button:not(.p-button-icon-only) {\n    width: auto;\n}\n\n/* Responsive */\n.p-datatable .p-datatable-tbody > tr > td > .p-column-title {\n    display: none;\n}\n</style>\n"],"sourceRoot":""}]}