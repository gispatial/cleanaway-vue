{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue?vue&type=template&id=e6522e4c&scoped=true","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtZTY1MjJlNGMiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LWU2NTIyZTRjIik7Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImRpdiIsIHsKICBjbGFzczogImZlYXR1cmUtaW50cm8iCn0sIFsvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMSIsIG51bGwsIFsvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiVHJlZSAiKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgic3BhbiIsIG51bGwsICJTZWxlY3Rpb24iKV0pLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJwIiwgbnVsbCwgWy8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCJUcmVlIHN1cHBvcnRzICIpLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJiIiwgbnVsbCwgInNpbmdsZSIpLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiLCAiKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiYiIsIG51bGwsICJtdWx0aXBsZSIpLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiIGFuZCAiKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiYiIsIG51bGwsICJjaGVja2JveCIpLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiIGFzIHNlbGVjdGlvbiBtb2Rlcy4iKV0pXSwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJjb250ZW50LXNlY3Rpb24gaW1wbGVtZW50YXRpb24iCn07CnZhciBfaG9pc3RlZF80ID0gewogIGNsYXNzOiAiY2FyZCIKfTsKCnZhciBfaG9pc3RlZF81ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiU2luZ2xlIFNlbGVjdGlvbiIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF82ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiTXVsdGlwbGUgU2VsZWN0aW9uIHdpdGggTWV0YUtleSIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF83ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiTXVsdGlwbGUgU2VsZWN0aW9uIHdpdGhvdXQgTWV0YUtleSIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF84ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiQ2hlY2tib3ggU2VsZWN0aW9uIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzkgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoNSIsIG51bGwsICJFdmVudHMiLCAtMQovKiBIT0lTVEVEICovCik7CgpfcG9wU2NvcGVJZCgpOwoKZXhwb3J0IHZhciByZW5kZXIgPSAvKiNfX1BVUkVfXyovX3dpdGhJZChmdW5jdGlvbiAoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfQXBwRGVtb0FjdGlvbnMgPSBfcmVzb2x2ZUNvbXBvbmVudCgiQXBwRGVtb0FjdGlvbnMiKTsKCiAgdmFyIF9jb21wb25lbnRfVHJlZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJUcmVlIik7CgogIHZhciBfY29tcG9uZW50X0FwcERvYyA9IF9yZXNvbHZlQ29tcG9uZW50KCJBcHBEb2MiKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBudWxsLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2hvaXN0ZWRfMiwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXBwRGVtb0FjdGlvbnMpXSksIF9jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMywgW19jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNCwgW19ob2lzdGVkXzUsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X1RyZWUsIHsKICAgIHZhbHVlOiAkZGF0YS5ub2RlcywKICAgIHNlbGVjdGlvbk1vZGU6ICJzaW5nbGUiLAogICAgc2VsZWN0aW9uS2V5czogJGRhdGEuc2VsZWN0ZWRLZXkxLAogICAgIm9uVXBkYXRlOnNlbGVjdGlvbktleXMiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkS2V5MSA9ICRldmVudDsKICAgIH0pCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInZhbHVlIiwgInNlbGVjdGlvbktleXMiXSksIF9ob2lzdGVkXzYsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X1RyZWUsIHsKICAgIHZhbHVlOiAkZGF0YS5ub2RlcywKICAgIHNlbGVjdGlvbk1vZGU6ICJtdWx0aXBsZSIsCiAgICBzZWxlY3Rpb25LZXlzOiAkZGF0YS5zZWxlY3RlZEtleXMxLAogICAgIm9uVXBkYXRlOnNlbGVjdGlvbktleXMiOiBfY2FjaGVbMl0gfHwgKF9jYWNoZVsyXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkS2V5czEgPSAkZXZlbnQ7CiAgICB9KQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJ2YWx1ZSIsICJzZWxlY3Rpb25LZXlzIl0pLCBfaG9pc3RlZF83LCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9UcmVlLCB7CiAgICB2YWx1ZTogJGRhdGEubm9kZXMsCiAgICBzZWxlY3Rpb25Nb2RlOiAibXVsdGlwbGUiLAogICAgc2VsZWN0aW9uS2V5czogJGRhdGEuc2VsZWN0ZWRLZXlzMiwKICAgICJvblVwZGF0ZTpzZWxlY3Rpb25LZXlzIjogX2NhY2hlWzNdIHx8IChfY2FjaGVbM10gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5zZWxlY3RlZEtleXMyID0gJGV2ZW50OwogICAgfSksCiAgICBtZXRhS2V5U2VsZWN0aW9uOiBmYWxzZQogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJ2YWx1ZSIsICJzZWxlY3Rpb25LZXlzIl0pLCBfaG9pc3RlZF84LCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9UcmVlLCB7CiAgICB2YWx1ZTogJGRhdGEubm9kZXMsCiAgICBzZWxlY3Rpb25Nb2RlOiAiY2hlY2tib3giLAogICAgc2VsZWN0aW9uS2V5czogJGRhdGEuc2VsZWN0ZWRLZXlzMywKICAgICJvblVwZGF0ZTpzZWxlY3Rpb25LZXlzIjogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5zZWxlY3RlZEtleXMzID0gJGV2ZW50OwogICAgfSkKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsidmFsdWUiLCAic2VsZWN0aW9uS2V5cyJdKSwgX2hvaXN0ZWRfOSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfVHJlZSwgewogICAgdmFsdWU6ICRkYXRhLm5vZGVzLAogICAgc2VsZWN0aW9uTW9kZTogInNpbmdsZSIsCiAgICBzZWxlY3Rpb25LZXlzOiAkZGF0YS5zZWxlY3RlZEtleTIsCiAgICAib25VcGRhdGU6c2VsZWN0aW9uS2V5cyI6IF9jYWNoZVs1XSB8fCAoX2NhY2hlWzVdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJGRhdGEuc2VsZWN0ZWRLZXkyID0gJGV2ZW50OwogICAgfSksCiAgICBtZXRhS2V5U2VsZWN0aW9uOiBmYWxzZSwKICAgIG9uTm9kZVNlbGVjdDogJG9wdGlvbnMub25Ob2RlU2VsZWN0LAogICAgb25Ob2RlVW5zZWxlY3Q6ICRvcHRpb25zLm9uTm9kZVVuc2VsZWN0CiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInZhbHVlIiwgInNlbGVjdGlvbktleXMiLCAib25Ob2RlU2VsZWN0IiwgIm9uTm9kZVVuc2VsZWN0Il0pXSldKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXBwRG9jLCB7CiAgICBuYW1lOiAiVHJlZVNlbGVjdGlvbkRlbW8iLAogICAgc291cmNlczogJGRhdGEuc291cmNlcywKICAgIHNlcnZpY2U6IFsnTm9kZVNlcnZpY2UnXSwKICAgIGRhdGE6IFsndHJlZW5vZGVzJ10sCiAgICBnaXRodWI6ICJ0cmVlL1RyZWVTZWxlY3Rpb25EZW1vLnZ1ZSIKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsic291cmNlcyJdKV0pOwp9KTs="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Selection</span></h1>\n                <p>Tree supports <b>single</b>, <b>multiple</b> and <b>checkbox</b> as selection modes.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Single Selection</h5>\n                <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n                <h5>Multiple Selection with MetaKey</h5>\n                <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n                <h5>Multiple Selection without MetaKey</h5>\n                <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n                <h5>Checkbox Selection</h5>\n                <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n                <h5>Events</h5>\n                <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n                    @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeSelectionDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeSelectionDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n            @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n            @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useToast } from 'primevue/usetoast';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const toast = useToast();\n        const selectedKey1 = ref(null);\n        const selectedKey2 = ref(null);\n        const selectedKeys1 = ref(null);\n        const selectedKeys2 = ref(null);\n        const selectedKeys3 = ref(null);\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const onNodeSelect = (node) => {\n            toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        };\n        const onNodeUnselect = (node) => {\n            toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        };\n\n        return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n    }\n}\n<\\\\/script>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/toast/toast.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/toastservice/toastservice.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-toast></p-toast>\n\n            <h5>Single Selection</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"single\" v-model:selection-keys=\"selectedKey1\"></p-tree>\n\n            <h5>Multiple Selection with MetaKey</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"multiple\" v-model:selection-keys=\"selectedKeys1\"></p-tree>\n\n            <h5>Multiple Selection without MetaKey</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"multiple\" v-model:selection-keys=\"selectedKeys2\" :meta-key-selection=\"false\"></p-tree>\n\n            <h5>Checkbox Selection</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"checkbox\" v-model:selection-keys=\"selectedKeys3\"></p-tree>\n\n            <h5>Events</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"single\" v-model:selection-keys=\"selectedKey2\" :meta-key-delection=\"false\"\n                @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></p-tree>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n        const { useToast } = primevue.usetoast;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const toast = useToast();\n                const selectedKey1 = ref(null);\n                const selectedKey2 = ref(null);\n                const selectedKeys1 = ref(null);\n                const selectedKeys2 = ref(null);\n                const selectedKeys3 = ref(null);\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const onNodeSelect = (node) => {\n                    toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n                };\n                const onNodeUnselect = (node) => {\n                    toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n                };\n\n                return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n            },\n            components: {\n                \"p-tree\": primevue.tree,\n                \"p-toast\": primevue.toast\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .use(primevue.toastservice)\n            .mount(\"#app\");\n        <\\\\/script>`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"],"sourceRoot":""}]}