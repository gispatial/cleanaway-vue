{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/overlaypanel/OverlayPanel.vue?vue&type=template&id=7ada7a62","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/overlaypanel/OverlayPanel.vue","mtime":1634589566227},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVuZGVyU2xvdCBhcyBfcmVuZGVyU2xvdCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCBtZXJnZVByb3BzIGFzIF9tZXJnZVByb3BzLCBUcmFuc2l0aW9uIGFzIF9UcmFuc2l0aW9uLCB3aXRoQ3R4IGFzIF93aXRoQ3R4LCBUZWxlcG9ydCBhcyBfVGVsZXBvcnQgfSBmcm9tICJ2dWUiOwoKdmFyIF9ob2lzdGVkXzEgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJzcGFuIiwgewogIGNsYXNzOiAicC1vdmVybGF5cGFuZWwtY2xvc2UtaWNvbiBwaSBwaS10aW1lcyIKfSwgbnVsbCwgLTEKLyogSE9JU1RFRCAqLwopOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2RpcmVjdGl2ZV9yaXBwbGUgPSBfcmVzb2x2ZURpcmVjdGl2ZSgicmlwcGxlIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfVGVsZXBvcnQsIHsKICAgIHRvOiAkcHJvcHMuYXBwZW5kVG8KICB9LCBbX2NyZWF0ZVZOb2RlKF9UcmFuc2l0aW9uLCB7CiAgICBuYW1lOiAicC1vdmVybGF5cGFuZWwiLAogICAgb25FbnRlcjogJG9wdGlvbnMub25FbnRlciwKICAgIG9uTGVhdmU6ICRvcHRpb25zLm9uTGVhdmUsCiAgICBvbkFmdGVyTGVhdmU6ICRvcHRpb25zLm9uQWZ0ZXJMZWF2ZQogIH0sIHsKICAgIGRlZmF1bHQ6IF93aXRoQ3R4KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFskZGF0YS52aXNpYmxlID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfbWVyZ2VQcm9wcyh7CiAgICAgICAga2V5OiAwLAogICAgICAgIGNsYXNzOiAkb3B0aW9ucy5jb250YWluZXJDbGFzcywKICAgICAgICByZWY6ICRvcHRpb25zLmNvbnRhaW5lclJlZgogICAgICB9LCBfY3R4LiRhdHRycywgewogICAgICAgIG9uQ2xpY2s6IF9jYWNoZVs0XSB8fCAoX2NhY2hlWzRdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuICRvcHRpb25zLm9uT3ZlcmxheUNsaWNrICYmICRvcHRpb25zLm9uT3ZlcmxheUNsaWNrLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgICAgIH0pCiAgICAgIH0pLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgICAgICAgY2xhc3M6ICJwLW92ZXJsYXlwYW5lbC1jb250ZW50IiwKICAgICAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiAkb3B0aW9ucy5vbkNvbnRlbnRDbGljayAmJiAkb3B0aW9ucy5vbkNvbnRlbnRDbGljay5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgICAgICB9KSwKICAgICAgICBvbk1vdXNlZG93bjogX2NhY2hlWzJdIHx8IChfY2FjaGVbMl0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gJG9wdGlvbnMub25Db250ZW50Q2xpY2sgJiYgJG9wdGlvbnMub25Db250ZW50Q2xpY2suYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSkKICAgICAgfSwgW19yZW5kZXJTbG90KF9jdHguJHNsb3RzLCAiZGVmYXVsdCIpXSwgMzIKICAgICAgLyogSFlEUkFURV9FVkVOVFMgKi8KICAgICAgKSwgJHByb3BzLnNob3dDbG9zZUljb24gPyBfd2l0aERpcmVjdGl2ZXMoKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJidXR0b24iLCB7CiAgICAgICAga2V5OiAwLAogICAgICAgIGNsYXNzOiAicC1vdmVybGF5cGFuZWwtY2xvc2UgcC1saW5rIiwKICAgICAgICBvbkNsaWNrOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiAkb3B0aW9ucy5oaWRlICYmICRvcHRpb25zLmhpZGUuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSksCiAgICAgICAgImFyaWEtbGFiZWwiOiAkcHJvcHMuYXJpYUNsb3NlTGFiZWwsCiAgICAgICAgdHlwZTogImJ1dHRvbiIKICAgICAgfSwgW19ob2lzdGVkXzFdLCA4CiAgICAgIC8qIFBST1BTICovCiAgICAgICwgWyJhcmlhLWxhYmVsIl0pKSwgW1tfZGlyZWN0aXZlX3JpcHBsZV1dKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0sIDE2CiAgICAgIC8qIEZVTExfUFJPUFMgKi8KICAgICAgKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSldOwogICAgfSksCiAgICBfOiAzCiAgICAvKiBGT1JXQVJERUQgKi8KCiAgfSwgOAogIC8qIFBST1BTICovCiAgLCBbIm9uRW50ZXIiLCAib25MZWF2ZSIsICJvbkFmdGVyTGVhdmUiXSldLCA4CiAgLyogUFJPUFMgKi8KICAsIFsidG8iXSk7Cn0="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/overlaypanel/OverlayPanel.vue"],"names":[],"mappings":";;8BAQoB,YAAA,CAA2D,MAA3D,EAA2D;AAArD,EAAA,KAAK,EAAC;AAA+C,CAA3D,EAAmD,IAAnD,EAAmD,CAAA;AAAA;AAAnD,C;;;;;uBAPhB,YAAA,CAWW,SAXX,EAWW;AAXA,IAAA,EAAE,EAAE,MAAA,CAAA;AAWJ,GAXX,EAAuB,CACnB,YAAA,CASa,WATb,EASa;AATD,IAAA,IAAI,EAAC,gBASJ;AATsB,IAAA,OAAK,EAAE,QAAA,CAAA,OAS7B;AATuC,IAAA,OAAK,EAAE,QAAA,CAAA,OAS9C;AATwD,IAAA,YAAW,EAAE,QAAA,CAAA;AASrE,GATb,E;sBACI;AAAA,aAOM,CAP6B,KAAA,CAAA,O,kBAAnC,YAAA,CAOM,KAPN,EAAA,WAAA,CAOM;cAAA;AAPA,QAAA,KAAK,EAAE,QAAA,CAAA,cAOP;AAPuC,QAAA,GAAG,EAAE,QAAA,CAAA;AAO5C,OAPN,EAAwE,IAAA,CAAA,MAAxE,EAA8E;AAAG,QAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,iBAAE,QAAA,CAAA,cAAA,IAAA,QAAA,CAAA,cAAA,OAAA,QAAA,YAAF;AAAA,SAAA;AAAR,OAA9E,CAAA,E,CACI,YAAA,CAEM,KAFN,EAEM;AAFD,QAAA,KAAK,EAAC,wBAEL;AAF+B,QAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,iBAAE,QAAA,CAAA,cAAA,IAAA,QAAA,CAAA,cAAA,OAAA,QAAA,YAAF;AAAA,SAAA,CAEpC;AAFuD,QAAA,WAAS,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,iBAAE,QAAA,CAAA,cAAA,IAAA,QAAA,CAAA,cAAA,OAAA,QAAA,YAAF;AAAA,SAAA;AAEhE,OAFN,E,CACI,WAAA,CAAa,IAAA,CAAA,MAAb,EAAa,SAAb,C,CADJ,E;;AAAA,O,EAGgE,MAAA,CAAA,a,kCAAhE,YAAA,CAES,QAFT,EAES;cAAA;AAFD,QAAA,KAAK,EAAC,6BAEL;AAFoC,QAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,iBAAE,QAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAAA,OAAA,QAAA,YAAF;AAAA,SAAA,CAEzC;AAFuE,sBAAY,MAAA,CAAA,cAEnF;AAFmG,QAAA,IAAI,EAAC;AAExG,OAFT,E,CACI,U,CADJ,E;;AAAA,Q,cAAA,C,8DAJJ,E;;AAAA,O,qCAOM,CAPN;AAAA,K;;;;GADJ,E;;AAAA,I,sCAAA,CADmB,CAAvB,E;;AAAA,I,MAAA,C","sourcesContent":["<template>\n    <Teleport :to=\"appendTo\">\n        <transition name=\"p-overlaypanel\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\">\n            <div :class=\"containerClass\" v-if=\"visible\" :ref=\"containerRef\" v-bind=\"$attrs\" @click=\"onOverlayClick\">\n                <div class=\"p-overlaypanel-content\" @click=\"onContentClick\" @mousedown=\"onContentClick\">\n                    <slot></slot>\n                </div>\n                <button class=\"p-overlaypanel-close p-link\" @click=\"hide\" v-if=\"showCloseIcon\" :aria-label=\"ariaCloseLabel\" type=\"button\" v-ripple>\n                    <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\n                </button>\n            </div>\n        </transition>\n    </Teleport>\n</template>\n\n<script>\nimport {UniqueComponentId,DomHandler,ConnectedOverlayScrollHandler,ZIndexUtils} from 'primevue/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'OverlayPanel',\n    inheritAttrs: false,\n    props: {\n\t\tdismissable: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tshowCloseIcon: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t},\n        appendTo: {\n\t\t\ttype: String,\n\t\t\tdefault: 'body'\n\t\t},\n        baseZIndex: {\n            type: Number,\n            default: 0\n        },\n        autoZIndex: {\n            type: Boolean,\n            default: true\n        },\n        ariaCloseLabel: {\n            type: String,\n            default: 'close'\n        },\n        breakpoints: {\n            type: Object,\n            default: null\n        }\n    },\n    emits: ['show', 'hide'],\n    data() {\n        return {\n            visible: false\n        }\n    },\n    selfClick: false,\n    target: null,\n    eventTarget: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    styleElement: null,\n    overlayEventListener: null,\n    beforeUnmount() {\n        if (this.dismissable) {\n            this.unbindOutsideClickListener();\n        }\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        this.destroyStyle();\n        this.unbindResizeListener();\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n\n        if (this.overlayEventListener) {\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n        }\n\n        this.container = null;\n    },\n    mounted() {\n        if (this.breakpoints) {\n            this.createStyle();\n        }\n    },\n    methods: {\n        toggle(event, target) {\n            if (this.visible)\n                this.hide();\n            else\n                this.show(event, target);\n        },\n        show(event, target) {\n            this.visible = true;\n            this.eventTarget = event.currentTarget;\n            this.target = target || event.currentTarget;\n        },\n        hide() {\n            this.visible = false;\n        },\n        onContentClick() {\n            this.selfClick = true;\n        },\n        onEnter(el) {\n            this.container.setAttribute(this.attributeSelector, '');\n            this.alignOverlay();\n            if (this.dismissable) {\n                this.bindOutsideClickListener();\n            }\n\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            if (this.autoZIndex) {\n                ZIndexUtils.set('overlay', el, this.baseZIndex + this.$primevue.config.zIndex.overlay);\n            }\n\n            this.overlayEventListener = (e) => {\n                if (this.container.contains(e.target)) {\n                    this.selfClick = true;\n                }\n            };\n\n            OverlayEventBus.on('overlay-click', this.overlayEventListener);\n            this.$emit('show');\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            OverlayEventBus.off('overlay-click', this.overlayEventListener);\n            this.overlayEventListener = null;\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndexUtils.clear(el);\n            }\n        },\n        alignOverlay() {\n            DomHandler.absolutePosition(this.container, this.target);\n\n            const containerOffset = DomHandler.getOffset(this.container);\n            const targetOffset = DomHandler.getOffset(this.target);\n            let arrowLeft = 0;\n\n            if (containerOffset.left < targetOffset.left) {\n                arrowLeft = targetOffset.left - containerOffset.left;\n            }\n            this.container.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`);\n\n            if (containerOffset.top < targetOffset.top) {\n                DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.visible && !this.selfClick && !this.isTargetClicked(event)) {\n                        this.visible = false;\n                    }\n                    this.selfClick = false;\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n                this.selfClick = false;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.visible) {\n                        this.visible = false;\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.visible && !DomHandler.isAndroid()) {\n                        this.visible = false;\n                    }\n                };\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isTargetClicked(event) {\n            return (this.eventTarget && (this.eventTarget === event.target || this.eventTarget.contains(event.target)));\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        createStyle() {\n\t\t\tif (!this.styleElement) {\n\t\t\t\tthis.styleElement = document.createElement('style');\n\t\t\t\tthis.styleElement.type = 'text/css';\n\t\t\t\tdocument.head.appendChild(this.styleElement);\n\n                let innerHTML = '';\n                for (let breakpoint in this.breakpoints) {\n                    innerHTML += `\n                        @media screen and (max-width: ${breakpoint}) {\n                            .p-overlaypanel[${this.attributeSelector}] {\n                                width: ${this.breakpoints[breakpoint]} !important;\n                            }\n                        }\n                    `\n                }\n\n                this.styleElement.innerHTML = innerHTML;\n\t\t\t}\n\t\t},\n        destroyStyle() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-overlaypanel p-component', {\n                'p-input-filled': this.$primevue.config.inputStyle === 'filled',\n                'p-ripple-disabled': this.$primevue.config.ripple === false\n            }];\n        },\n        attributeSelector() {\n            return UniqueComponentId();\n        }\n    },\n    directives: {\n        'ripple': Ripple\n    }\n}\n</script>\n\n<style>\n.p-overlaypanel {\n    position: absolute;\n    margin-top: 10px;\n    top: 0;\n    left: 0;\n}\n\n.p-overlaypanel-flipped {\n    margin-top: 0;\n    margin-bottom: 10px;\n}\n\n.p-overlaypanel-close {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    overflow: hidden;\n    position: relative;\n}\n\n/* Animation */\n.p-overlaypanel-enter-from {\n    opacity: 0;\n    transform: scaleY(0.8);\n}\n\n.p-overlaypanel-leave-to {\n    opacity: 0;\n}\n\n.p-overlaypanel-enter-active {\n    transition: transform .12s cubic-bezier(0, 0, 0.2, 1), opacity .12s cubic-bezier(0, 0, 0.2, 1);\n}\n\n.p-overlaypanel-leave-active {\n    transition: opacity .1s linear;\n}\n\n.p-overlaypanel:after, .p-overlaypanel:before {\n\tbottom: 100%;\n\tleft: calc(var(--overlayArrowLeft, 0) + 1.25rem);\n\tcontent: \" \";\n\theight: 0;\n\twidth: 0;\n\tposition: absolute;\n\tpointer-events: none;\n}\n\n.p-overlaypanel:after {\n\tborder-width: 8px;\n\tmargin-left: -8px;\n}\n\n.p-overlaypanel:before {\n\tborder-width: 10px;\n\tmargin-left: -10px;\n}\n\n.p-overlaypanel-flipped:after, .p-overlaypanel-flipped:before {\n    bottom: auto;\n    top: 100%;\n}\n\n.p-overlaypanel.p-overlaypanel-flipped:after {\n    border-bottom-color: transparent;\n}\n\n.p-overlaypanel.p-overlaypanel-flipped:before {\n    border-bottom-color: transparent\n}\n</style>\n"],"sourceRoot":""}]}