{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/autocomplete/AutoCompleteDemo.vue?vue&type=template&id=16ae28c8","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/autocomplete/AutoCompleteDemo.vue","mtime":1634589566246},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIHdpdGhDdHggYXMgX3dpdGhDdHgsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tICJ2dWUiOwppbXBvcnQgX2ltcG9ydHNfMCBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL2ZsYWdfcGxhY2Vob2xkZXIucG5nJzsKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJjb250ZW50LXNlY3Rpb24gaW50cm9kdWN0aW9uIgp9OwoKdmFyIF9ob2lzdGVkXzIgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJkaXYiLCB7CiAgY2xhc3M6ICJmZWF0dXJlLWludHJvIgp9LCBbLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDEiLCBudWxsLCAiQXV0b0NvbXBsZXRlIiksIC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoInAiLCBudWxsLCAiQXV0b0NvbXBsZXRlIGlzIGFuIGlucHV0IGNvbXBvbmVudCB0aGF0IHByb3ZpZGVzIHJlYWwtdGltZSBzdWdnZXN0aW9ucyB3aGVuIGJlaW5nIHR5cGVkLiIpXSwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJjb250ZW50LXNlY3Rpb24gaW1wbGVtZW50YXRpb24iCn07CnZhciBfaG9pc3RlZF80ID0gewogIGNsYXNzOiAiY2FyZCIKfTsKCnZhciBfaG9pc3RlZF81ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiQmFzaWMiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImg1IiwgbnVsbCwgIkdyb3VwZWQiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfNyA9IHsKICBjbGFzczogInAtZC1mbGV4IHAtYWktY2VudGVyIGNvdW50cnktaXRlbSIKfTsKCnZhciBfaG9pc3RlZF84ID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiRHJvcGRvd24sIFRlbXBsYXRpbmcgYW5kIEZvcmNlIFNlbGVjdGlvbiIsIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF85ID0gewogIGNsYXNzOiAiY291bnRyeS1pdGVtIgp9OwoKdmFyIF9ob2lzdGVkXzEwID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiVmlydHVhbCBTY3JvbGwgKDEwMDAgSXRlbXMpIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzExID0gLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgiaDUiLCBudWxsLCAiTXVsdGlwbGUiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfMTIgPSB7CiAgY2xhc3M6ICJwLWZsdWlkIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0FwcERlbW9BY3Rpb25zID0gX3Jlc29sdmVDb21wb25lbnQoIkFwcERlbW9BY3Rpb25zIik7CgogIHZhciBfY29tcG9uZW50X0F1dG9Db21wbGV0ZSA9IF9yZXNvbHZlQ29tcG9uZW50KCJBdXRvQ29tcGxldGUiKTsKCiAgdmFyIF9jb21wb25lbnRfQXV0b0NvbXBsZXRlRG9jID0gX3Jlc29sdmVDb21wb25lbnQoIkF1dG9Db21wbGV0ZURvYyIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIG51bGwsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzEsIFtfaG9pc3RlZF8yLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9BcHBEZW1vQWN0aW9ucyldKSwgX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF80LCBbX2hvaXN0ZWRfNSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXV0b0NvbXBsZXRlLCB7CiAgICBtb2RlbFZhbHVlOiAkZGF0YS5zZWxlY3RlZENvdW50cnkxLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkQ291bnRyeTEgPSAkZXZlbnQ7CiAgICB9KSwKICAgIHN1Z2dlc3Rpb25zOiAkZGF0YS5maWx0ZXJlZENvdW50cmllcywKICAgIG9uQ29tcGxldGU6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc2VhcmNoQ291bnRyeSgkZXZlbnQpOwogICAgfSksCiAgICBmaWVsZDogIm5hbWUiCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbIm1vZGVsVmFsdWUiLCAic3VnZ2VzdGlvbnMiXSksIF9ob2lzdGVkXzYsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0F1dG9Db21wbGV0ZSwgewogICAgbW9kZWxWYWx1ZTogJGRhdGEuc2VsZWN0ZWRDaXR5LAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbM10gfHwgKF9jYWNoZVszXSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkQ2l0eSA9ICRldmVudDsKICAgIH0pLAogICAgc3VnZ2VzdGlvbnM6ICRkYXRhLmZpbHRlcmVkQ2l0aWVzLAogICAgb25Db21wbGV0ZTogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5zZWFyY2hDaXR5KCRldmVudCk7CiAgICB9KSwKICAgIGZpZWxkOiAibGFiZWwiLAogICAgb3B0aW9uR3JvdXBMYWJlbDogImxhYmVsIiwKICAgIG9wdGlvbkdyb3VwQ2hpbGRyZW46ICJpdGVtcyIKICB9LCB7CiAgICBvcHRpb25ncm91cDogX3dpdGhDdHgoZnVuY3Rpb24gKHNsb3RQcm9wcykgewogICAgICByZXR1cm4gW19jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfNywgW19jcmVhdGVWTm9kZSgiaW1nIiwgewogICAgICAgIHNyYzogX2ltcG9ydHNfMCwKICAgICAgICBjbGFzczogJ2ZsYWcgZmxhZy0nICsgc2xvdFByb3BzLml0ZW0uY29kZS50b0xvd2VyQ2FzZSgpLAogICAgICAgIHdpZHRoOiAiMTgiCiAgICAgIH0sIG51bGwsIDIKICAgICAgLyogQ0xBU1MgKi8KICAgICAgKSwgX2NyZWF0ZVZOb2RlKCJkaXYiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKHNsb3RQcm9wcy5pdGVtLmxhYmVsKSwgMQogICAgICAvKiBURVhUICovCiAgICAgICldKV07CiAgICB9KSwKICAgIF86IDEKICAgIC8qIFNUQUJMRSAqLwoKICB9LCA4CiAgLyogUFJPUFMgKi8KICAsIFsibW9kZWxWYWx1ZSIsICJzdWdnZXN0aW9ucyJdKSwgX2hvaXN0ZWRfOCwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXV0b0NvbXBsZXRlLCB7CiAgICBtb2RlbFZhbHVlOiAkZGF0YS5zZWxlY3RlZENvdW50cnkyLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbNV0gfHwgKF9jYWNoZVs1XSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkQ291bnRyeTIgPSAkZXZlbnQ7CiAgICB9KSwKICAgIHN1Z2dlc3Rpb25zOiAkZGF0YS5maWx0ZXJlZENvdW50cmllcywKICAgIG9uQ29tcGxldGU6IF9jYWNoZVs2XSB8fCAoX2NhY2hlWzZdID0gZnVuY3Rpb24gKCRldmVudCkgewogICAgICByZXR1cm4gJG9wdGlvbnMuc2VhcmNoQ291bnRyeSgkZXZlbnQpOwogICAgfSksCiAgICBkcm9wZG93bjogdHJ1ZSwKICAgIGZpZWxkOiAibmFtZSIsCiAgICBmb3JjZVNlbGVjdGlvbjogIiIKICB9LCB7CiAgICBpdGVtOiBfd2l0aEN0eChmdW5jdGlvbiAoc2xvdFByb3BzKSB7CiAgICAgIHJldHVybiBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF85LCBbX2NyZWF0ZVZOb2RlKCJpbWciLCB7CiAgICAgICAgc3JjOiBfaW1wb3J0c18wLAogICAgICAgIGNsYXNzOiAnZmxhZyBmbGFnLScgKyBzbG90UHJvcHMuaXRlbS5jb2RlLnRvTG93ZXJDYXNlKCkKICAgICAgfSwgbnVsbCwgMgogICAgICAvKiBDTEFTUyAqLwogICAgICApLCBfY3JlYXRlVk5vZGUoImRpdiIsIG51bGwsIF90b0Rpc3BsYXlTdHJpbmcoc2xvdFByb3BzLml0ZW0ubmFtZSksIDEKICAgICAgLyogVEVYVCAqLwogICAgICApXSldOwogICAgfSksCiAgICBfOiAxCiAgICAvKiBTVEFCTEUgKi8KCiAgfSwgOAogIC8qIFBST1BTICovCiAgLCBbIm1vZGVsVmFsdWUiLCAic3VnZ2VzdGlvbnMiXSksIF9ob2lzdGVkXzEwLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9BdXRvQ29tcGxldGUsIHsKICAgIG1vZGVsVmFsdWU6ICRkYXRhLnNlbGVjdGVkSXRlbSwKICAgICJvblVwZGF0ZTptb2RlbFZhbHVlIjogX2NhY2hlWzddIHx8IChfY2FjaGVbN10gPSBmdW5jdGlvbiAoJGV2ZW50KSB7CiAgICAgIHJldHVybiAkZGF0YS5zZWxlY3RlZEl0ZW0gPSAkZXZlbnQ7CiAgICB9KSwKICAgIHN1Z2dlc3Rpb25zOiAkZGF0YS5maWx0ZXJlZEl0ZW1zLAogICAgb25Db21wbGV0ZTogJG9wdGlvbnMuc2VhcmNoSXRlbXMsCiAgICB2aXJ0dWFsU2Nyb2xsZXJPcHRpb25zOiB7CiAgICAgIGl0ZW1TaXplOiAzMQogICAgfSwKICAgIGZpZWxkOiAibGFiZWwiLAogICAgZHJvcGRvd246ICIiCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbIm1vZGVsVmFsdWUiLCAic3VnZ2VzdGlvbnMiLCAib25Db21wbGV0ZSJdKSwgX2hvaXN0ZWRfMTEsIF9jcmVhdGVWTm9kZSgic3BhbiIsIF9ob2lzdGVkXzEyLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXV0b0NvbXBsZXRlLCB7CiAgICBtdWx0aXBsZTogdHJ1ZSwKICAgIG1vZGVsVmFsdWU6ICRkYXRhLnNlbGVjdGVkQ291bnRyaWVzLAogICAgIm9uVXBkYXRlOm1vZGVsVmFsdWUiOiBfY2FjaGVbOF0gfHwgKF9jYWNoZVs4XSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRkYXRhLnNlbGVjdGVkQ291bnRyaWVzID0gJGV2ZW50OwogICAgfSksCiAgICBzdWdnZXN0aW9uczogJGRhdGEuZmlsdGVyZWRDb3VudHJpZXMsCiAgICBvbkNvbXBsZXRlOiBfY2FjaGVbOV0gfHwgKF9jYWNoZVs5XSA9IGZ1bmN0aW9uICgkZXZlbnQpIHsKICAgICAgcmV0dXJuICRvcHRpb25zLnNlYXJjaENvdW50cnkoJGV2ZW50KTsKICAgIH0pLAogICAgZmllbGQ6ICJuYW1lIgogIH0sIG51bGwsIDgKICAvKiBQUk9QUyAqLwogICwgWyJtb2RlbFZhbHVlIiwgInN1Z2dlc3Rpb25zIl0pXSldKV0pLCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9BdXRvQ29tcGxldGVEb2MpXSk7Cn0="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/autocomplete/AutoCompleteDemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>AutoComplete</h1>\n                <p>AutoComplete is an input component that provides real-time suggestions when being typed.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Basic</h5>\n                <AutoComplete v-model=\"selectedCountry1\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" field=\"name\" />\n\n                <h5>Grouped</h5>\n                <AutoComplete v-model=\"selectedCity\" :suggestions=\"filteredCities\" @complete=\"searchCity($event)\" field=\"label\" optionGroupLabel=\"label\" optionGroupChildren=\"items\">\n                    <template #optiongroup=\"slotProps\">\n                        <div class=\"p-d-flex p-ai-center country-item\">\n                            <img src=\"../../assets/images/flag_placeholder.png\" :class=\"'flag flag-' + slotProps.item.code.toLowerCase()\" width=\"18\" />\n                            <div>{{slotProps.item.label}}</div>\n                        </div>\n                    </template>\n                </AutoComplete>\n\n                <h5>Dropdown, Templating and Force Selection</h5>\n                <AutoComplete v-model=\"selectedCountry2\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" :dropdown=\"true\" field=\"name\" forceSelection>\n                    <template #item=\"slotProps\">\n                        <div class=\"country-item\">\n                            <img src=\"../../assets/images/flag_placeholder.png\" :class=\"'flag flag-' + slotProps.item.code.toLowerCase()\" />\n                            <div>{{slotProps.item.name}}</div>\n                        </div>\n                    </template>\n                </AutoComplete>\n\n                <h5>Virtual Scroll (1000 Items)</h5>\n                <AutoComplete v-model=\"selectedItem\" :suggestions=\"filteredItems\" @complete=\"searchItems\" :virtualScrollerOptions=\"{ itemSize: 31 }\" field=\"label\" dropdown />\n\n                <h5>Multiple</h5>\n                <span class=\"p-fluid\">\n                    <AutoComplete :multiple=\"true\" v-model=\"selectedCountries\" :suggestions=\"filteredCountries\" @complete=\"searchCountry($event)\" field=\"name\" />\n                </span>\n            </div>\n        </div>\n\n        <AutoCompleteDoc />\n    </div>\n</template>\n\n<script>\nimport CountryService from '../../service/CountryService';\nimport AutoCompleteDoc from './AutoCompleteDoc';\nimport {FilterService,FilterMatchMode} from 'primevue/api';\n\nexport default {\n    data() {\n        return {\n            countries: null,\n            selectedCountry1: null,\n            selectedCountry2: null,\n            selectedCity: null,\n            filteredCities: null,\n            filteredCountries: null,\n            selectedCountries: [],\n            selectedItem: null,\n            filteredItems: null,\n            groupedCities: [{\n                label: 'Germany', code: 'DE',\n                items: [\n                    {label: 'Berlin', value: 'Berlin'},\n                    {label: 'Frankfurt', value: 'Frankfurt'},\n                    {label: 'Hamburg', value: 'Hamburg'},\n                    {label: 'Munich', value: 'Munich'}\n                ]\n            },\n            {\n                label: 'USA', code: 'US',\n                items: [\n                    {label: 'Chicago', value: 'Chicago'},\n                    {label: 'Los Angeles', value: 'Los Angeles'},\n                    {label: 'New York', value: 'New York'},\n                    {label: 'San Francisco', value: 'San Francisco'}\n                ]\n            },\n            {\n                label: 'Japan', code: 'JP',\n                items: [\n                    {label: 'Kyoto', value: 'Kyoto'},\n                    {label: 'Osaka', value: 'Osaka'},\n                    {label: 'Tokyo', value: 'Tokyo'},\n                    {label: 'Yokohama', value: 'Yokohama'}\n                ]\n            }],\n            items: Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }))\n        }\n    },\n    countryService: null,\n    created() {\n        this.countryService = new CountryService();\n    },\n    mounted() {\n        this.countryService.getCountries().then(data => this.countries = data);\n    },\n    methods: {\n        searchCountry(event) {\n            setTimeout(() => {\n                if (!event.query.trim().length) {\n                    this.filteredCountries = [...this.countries];\n                }\n                else {\n                    this.filteredCountries = this.countries.filter((country) => {\n                        return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n                    });\n                }\n            }, 250);\n        },\n        searchCity(event) {\n            let query = event.query;\n            let filteredCities = [];\n\n            for (let country of this.groupedCities) {\n                let filteredItems = FilterService.filter(country.items, ['label'], query, FilterMatchMode.CONTAINS);\n                if (filteredItems && filteredItems.length) {\n                    filteredCities.push({...country, ...{items: filteredItems}});\n                }\n            }\n\n            this.filteredCities = filteredCities;\n        },\n        searchItems(event) {\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    filteredItems.push(item);\n                }\n            }\n\n            this.filteredItems = filteredItems;\n        }\n    },\n    components: {\n\t\t'AutoCompleteDoc': AutoCompleteDoc\n    }\n}\n</script>\n"],"sourceRoot":""}]}