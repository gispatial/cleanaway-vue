{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue"],"names":[],"mappings":";;AAyBA,OAAO,WAAP,MAAwB,2BAAxB;AAEA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,KAAK,EAAE,IADJ;AAEH,MAAA,YAAY,EAAE,EAFX;AAGH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAuDL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SAvDd;AA0GL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,gDAFO;AAGd,UAAA,OAAO;AAHO;AA1Gb;AAHN,KAAP;AAsKH,GAxKU;AAyKX,EAAA,WAAW,EAAE,IAzKF;AA0KX,EAAA,OA1KW,qBA0KD;AACN,SAAK,WAAL,GAAmB,IAAI,WAAJ,EAAnB;AACH,GA5KU;AA6KX,EAAA,OA7KW,qBA6KD;AAAA;;AACN,SAAK,WAAL,CAAiB,YAAjB,GAAgC,IAAhC,CAAqC,UAAA,IAAG;AAAA,aAAK,KAAI,CAAC,KAAL,GAAa,IAAlB;AAAA,KAAxC;AACH,GA/KU;AAgLX,EAAA,OAAO,EAAE;AACL,IAAA,SADK,uBACO;AAAA,iDACS,KAAK,KADd;AAAA;;AAAA;AACR,4DAA6B;AAAA,cAApB,IAAoB;AACzB,eAAK,UAAL,CAAgB,IAAhB;AACJ;AAHQ;AAAA;AAAA;AAAA;AAAA;;AAKR,WAAK,YAAL,qBAAwB,KAAK,YAA7B;AACH,KAPI;AAQL,IAAA,WARK,yBAQS;AACV,WAAK,YAAL,GAAoB,EAApB;AACH,KAVI;AAWL,IAAA,UAXK,sBAWM,IAXN,EAWY;AACb,WAAK,YAAL,CAAkB,IAAI,CAAC,GAAvB,IAA8B,IAA9B;;AACA,UAAI,IAAI,CAAC,QAAL,IAAiB,IAAI,CAAC,QAAL,CAAc,MAAnC,EAA2C;AAAA,oDACrB,IAAI,CAAC,QADgB;AAAA;;AAAA;AACvC,iEAAiC;AAAA,gBAAxB,KAAwB;AAC7B,iBAAK,UAAL,CAAgB,KAAhB;AACJ;AAHuC;AAAA;AAAA;AAAA;AAAA;AAI3C;AACJ;AAlBK;AAhLE,CAAf","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Filter</span></h1>\n                <p>Filtering updates the node based on the constraints.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Lenient Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n                <h5>Strict Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeFilterDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeFilterDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {},\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const expandedKeys = ref({});\n        const expandAll = () => {\n            for (let node of nodes.value) {\n                expandNode(node);\n            }\n\n            expandedKeys.value = {...expandedKeys.value};\n        };\n        const collapseAll = () => {\n            expandedKeys.value = {};\n        };\n        const expandNode = (node) => {\n            expandedKeys.value[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    expandNode(child);\n                }\n            }\n        };\n\n        return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <h5>Lenient Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"lenient\"></p-tree>\n\n            <h5>Strict Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"strict\"></p-tree>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const expandedKeys = ref({});\n                const expandAll = () => {\n                    for (let node of nodes.value) {\n                        expandNode(node);\n                    }\n\n                    expandedKeys.value = {...expandedKeys.value};\n                };\n                const collapseAll = () => {\n                    expandedKeys.value = {};\n                };\n                const expandNode = (node) => {\n                    expandedKeys.value[node.key] = true;\n                    if (node.children && node.children.length) {\n                        for (let child of node.children) {\n                            expandNode(child);\n                        }\n                    }\n                };\n\n                return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n            },\n            components: {\n                \"p-tree\": primevue.tree\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"],"sourceRoot":""}]}