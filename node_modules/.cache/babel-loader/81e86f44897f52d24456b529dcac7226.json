{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue","mtime":1634589566291},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgTm9kZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZS9Ob2RlU2VydmljZSc7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2VsZWN0ZWRDb2x1bW5zOiBudWxsLAogICAgICBjb2x1bW5zOiBudWxsLAogICAgICBub2RlczogbnVsbCwKICAgICAgc291cmNlczogewogICAgICAgICdvcHRpb25zLWFwaSc6IHsKICAgICAgICAgIHRhYk5hbWU6ICdPcHRpb25zIEFQSSBTb3VyY2UnLAogICAgICAgICAgY29udGVudDogIlxuPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxUcmVlVGFibGUgOnZhbHVlPVwibm9kZXNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjaGVhZGVyPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpU2VsZWN0IDptb2RlbFZhbHVlPVwic2VsZWN0ZWRDb2x1bW5zXCIgQHVwZGF0ZTptb2RlbFZhbHVlPVwib25Ub2dnbGVcIiA6b3B0aW9ucz1cImNvbHVtbnNcIiBvcHRpb25MYWJlbD1cImhlYWRlclwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IENvbHVtbnNcIiBzdHlsZT1cIndpZHRoOiAyMGVtXCIvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDxDb2x1bW4gZmllbGQ9XCJuYW1lXCIgaGVhZGVyPVwiTmFtZVwiIDpleHBhbmRlcj1cInRydWVcIj48L0NvbHVtbj5cbiAgICAgICAgICAgIDxDb2x1bW4gdi1mb3I9XCJjb2wgb2Ygc2VsZWN0ZWRDb2x1bW5zXCIgOmZpZWxkPVwiY29sLmZpZWxkXCIgOmhlYWRlcj1cImNvbC5oZWFkZXJcIiA6a2V5PVwiY29sLmZpZWxkXCI+PC9Db2x1bW4+XG4gICAgICAgIDwvVHJlZVRhYmxlPlxuICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IE5vZGVTZXJ2aWNlIGZyb20gJy4vc2VydmljZS9Ob2RlU2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VsZWN0ZWRDb2x1bW5zOiBudWxsLFxuICAgICAgICAgICAgY29sdW1uczogbnVsbCxcbiAgICAgICAgICAgIG5vZGVzOiBudWxsLFxuICAgICAgICB9XG4gICAgfSxcbiAgICBub2RlU2VydmljZTogbnVsbCxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICB0aGlzLm5vZGVTZXJ2aWNlID0gbmV3IE5vZGVTZXJ2aWNlKCk7XG5cbiAgICAgICAgdGhpcy5jb2x1bW5zID0gW1xuICAgICAgICAgICAge2ZpZWxkOiAnc2l6ZScsIGhlYWRlcjogJ1NpemUnfSxcbiAgICAgICAgICAgIHtmaWVsZDogJ3R5cGUnLCBoZWFkZXI6ICdUeXBlJ31cbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLnNlbGVjdGVkQ29sdW1ucyA9IHRoaXMuY29sdW1ucztcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIHRoaXMubm9kZVNlcnZpY2UuZ2V0VHJlZVRhYmxlTm9kZXMoKS50aGVuKGRhdGEgPT4gdGhpcy5ub2RlcyA9IGRhdGEpO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBvblRvZ2dsZSh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZENvbHVtbnMgPSB0aGlzLmNvbHVtbnMuZmlsdGVyKGNvbCA9PiB2YWx1ZS5pbmNsdWRlcyhjb2wpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjxcXC9zY3JpcHQ+XG4iCiAgICAgICAgfSwKICAgICAgICAnY29tcG9zaXRpb24tYXBpJzogewogICAgICAgICAgdGFiTmFtZTogJ0NvbXBvc2l0aW9uIEFQSSBTb3VyY2UnLAogICAgICAgICAgY29udGVudDogIlxuPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxUcmVlVGFibGUgOnZhbHVlPVwibm9kZXNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjaGVhZGVyPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPE11bHRpU2VsZWN0IDptb2RlbFZhbHVlPVwic2VsZWN0ZWRDb2x1bW5zXCIgQHVwZGF0ZTptb2RlbFZhbHVlPVwib25Ub2dnbGVcIiA6b3B0aW9ucz1cImNvbHVtbnNcIiBvcHRpb25MYWJlbD1cImhlYWRlclwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IENvbHVtbnNcIiBzdHlsZT1cIndpZHRoOiAyMGVtXCIvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDxDb2x1bW4gZmllbGQ9XCJuYW1lXCIgaGVhZGVyPVwiTmFtZVwiIDpleHBhbmRlcj1cInRydWVcIj48L0NvbHVtbj5cbiAgICAgICAgICAgIDxDb2x1bW4gdi1mb3I9XCJjb2wgb2Ygc2VsZWN0ZWRDb2x1bW5zXCIgOmZpZWxkPVwiY29sLmZpZWxkXCIgOmhlYWRlcj1cImNvbC5oZWFkZXJcIiA6a2V5PVwiY29sLmZpZWxkXCI+PC9Db2x1bW4+XG4gICAgICAgIDwvVHJlZVRhYmxlPlxuICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IE5vZGVTZXJ2aWNlIGZyb20gJy4vc2VydmljZS9Ob2RlU2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBzZXR1cCgpIHtcbiAgICAgICAgb25Nb3VudGVkKCgpID0+IHtcbiAgICAgICAgICAgIG5vZGVTZXJ2aWNlLnZhbHVlLmdldFRyZWVUYWJsZU5vZGVzKCkudGhlbihkYXRhID0+IG5vZGVzLnZhbHVlID0gZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSByZWYoW1xuICAgICAgICAgICAge2ZpZWxkOiAnc2l6ZScsIGhlYWRlcjogJ1NpemUnfSxcbiAgICAgICAgICAgIHtmaWVsZDogJ3R5cGUnLCBoZWFkZXI6ICdUeXBlJ31cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gcmVmKCk7XG4gICAgICAgIGNvbnN0IG5vZGVTZXJ2aWNlID0gcmVmKG5ldyBOb2RlU2VydmljZSgpKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRDb2x1bW5zID0gcmVmKGNvbHVtbnMudmFsdWUpO1xuICAgICAgICBjb25zdCBvblRvZ2dsZSA9ICh2YWwpID0+IHtcbiAgICAgICAgICAgIHNlbGVjdGVkQ29sdW1ucy52YWx1ZSA9IGNvbHVtbnMudmFsdWUuZmlsdGVyKGNvbCA9PiB2YWwuaW5jbHVkZXMoY29sKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBjb2x1bW5zLCBub2Rlcywgbm9kZVNlcnZpY2UsIHNlbGVjdGVkQ29sdW1ucywgb25Ub2dnbGUgfVxuICAgIH1cbn1cbjxcXC9zY3JpcHQ+XG4iCiAgICAgICAgfSwKICAgICAgICAnYnJvd3Nlci1zb3VyY2UnOiB7CiAgICAgICAgICB0YWJOYW1lOiAnQnJvd3NlciBTb3VyY2UnLAogICAgICAgICAgaW1wb3J0czogIjxzY3JpcHQgc3JjPVwiaHR0cHM6Ly91bnBrZy5jb20vcHJpbWV2dWVAXjMvdHJlZXRhYmxlL3RyZWV0YWJsZS5taW4uanNcIj48XFwvc2NyaXB0PlxuICAgICAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vdW5wa2cuY29tL3ByaW1ldnVlQF4zL2NvbHVtbi9jb2x1bW4ubWluLmpzXCI+PFxcL3NjcmlwdD5cbiAgICAgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL3VucGtnLmNvbS9wcmltZXZ1ZUBeMy9tdWx0aXNlbGVjdC9tdWx0aXNlbGVjdC5taW4uanNcIj48XFwvc2NyaXB0PlxuICAgICAgICA8c2NyaXB0IHNyYz1cIi4vTm9kZVNlcnZpY2UuanNcIj48XFwvc2NyaXB0PiIsCiAgICAgICAgICBjb250ZW50OiAiPGRpdiBpZD1cImFwcFwiPlxuICAgICAgICAgICAgPHAtdHJlZXRhYmxlIDp2YWx1ZT1cIm5vZGVzXCI+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlICNoZWFkZXI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwLW11bHRpc2VsZWN0IDptb2RlbC12YWx1ZT1cInNlbGVjdGVkQ29sdW1uc1wiIEB1cGRhdGU6bW9kZWwtdmFsdWU9XCJvblRvZ2dsZVwiIDpvcHRpb25zPVwiY29sdW1uc1wiIG9wdGlvbi1sYWJlbD1cImhlYWRlclwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IENvbHVtbnNcIiBzdHlsZT1cIndpZHRoOiAyMGVtXCI+PC9wLW11bHRpc2VsZWN0PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDxwLWNvbHVtbiBmaWVsZD1cIm5hbWVcIiBoZWFkZXI9XCJOYW1lXCIgOmV4cGFuZGVyPVwidHJ1ZVwiPjwvcC1jb2x1bW4+XG4gICAgICAgICAgICAgICAgPHAtY29sdW1uIHYtZm9yPVwiY29sIG9mIHNlbGVjdGVkQ29sdW1uc1wiIDpmaWVsZD1cImNvbC5maWVsZFwiIDpoZWFkZXI9XCJjb2wuaGVhZGVyXCIgOmtleT1cImNvbC5maWVsZFwiPjwvcC1vbHVtbj5cbiAgICAgICAgICAgIDwvcC10cmVldGFibGU+XG4gICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCI+XG4gICAgICAgIGNvbnN0IHsgY3JlYXRlQXBwLCByZWYsIG9uTW91bnRlZCB9ID0gVnVlO1xuXG4gICAgICAgIGNvbnN0IEFwcCA9IHtcbiAgICAgICAgICAgIHNldHVwKCkge1xuICAgICAgICAgICAgICAgIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVTZXJ2aWNlLnZhbHVlLmdldFRyZWVUYWJsZU5vZGVzKCkudGhlbihkYXRhID0+IG5vZGVzLnZhbHVlID0gZGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5zID0gcmVmKFtcbiAgICAgICAgICAgICAgICAgICAge2ZpZWxkOiAnc2l6ZScsIGhlYWRlcjogJ1NpemUnfSxcbiAgICAgICAgICAgICAgICAgICAge2ZpZWxkOiAndHlwZScsIGhlYWRlcjogJ1R5cGUnfVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gcmVmKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZVNlcnZpY2UgPSByZWYobmV3IE5vZGVTZXJ2aWNlKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkQ29sdW1ucyA9IHJlZihjb2x1bW5zLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBvblRvZ2dsZSA9ICh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb2x1bW5zLnZhbHVlID0gY29sdW1ucy52YWx1ZS5maWx0ZXIoY29sID0+IHZhbC5pbmNsdWRlcyhjb2wpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBjb2x1bW5zLCBub2Rlcywgbm9kZVNlcnZpY2UsIHNlbGVjdGVkQ29sdW1ucywgb25Ub2dnbGUgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgICAgICAgICBcInAtdHJlZXRhYmxlXCI6IHByaW1ldnVlLnRyZWV0YWJsZSxcbiAgICAgICAgICAgICAgICBcInAtY29sdW1uXCI6IHByaW1ldnVlLmNvbHVtbixcbiAgICAgICAgICAgICAgICBcInAtbXVsdGlzZWxlY3RcIjogcHJpbWV2dWUubXVsdGlzZWxlY3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjcmVhdGVBcHAoQXBwKVxuICAgICAgICAgICAgLnVzZShwcmltZXZ1ZS5jb25maWcuZGVmYXVsdClcbiAgICAgICAgICAgIC5tb3VudChcIiNhcHBcIik7XG4gICAgICAgIDxcXC9zY3JpcHQ+XG4iCiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0sCiAgbm9kZVNlcnZpY2U6IG51bGwsCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMubm9kZVNlcnZpY2UgPSBuZXcgTm9kZVNlcnZpY2UoKTsKICAgIHRoaXMuY29sdW1ucyA9IFt7CiAgICAgIGZpZWxkOiAnc2l6ZScsCiAgICAgIGhlYWRlcjogJ1NpemUnCiAgICB9LCB7CiAgICAgIGZpZWxkOiAndHlwZScsCiAgICAgIGhlYWRlcjogJ1R5cGUnCiAgICB9XTsKICAgIHRoaXMuc2VsZWN0ZWRDb2x1bW5zID0gdGhpcy5jb2x1bW5zOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy5ub2RlU2VydmljZS5nZXRUcmVlVGFibGVOb2RlcygpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgcmV0dXJuIF90aGlzLm5vZGVzID0gZGF0YTsKICAgIH0pOwogIH0sCiAgbWV0aG9kczogewogICAgb25Ub2dnbGU6IGZ1bmN0aW9uIG9uVG9nZ2xlKHZhbHVlKSB7CiAgICAgIHRoaXMuc2VsZWN0ZWRDb2x1bW5zID0gdGhpcy5jb2x1bW5zLmZpbHRlcihmdW5jdGlvbiAoY29sKSB7CiAgICAgICAgcmV0dXJuIHZhbHVlLmluY2x1ZGVzKGNvbCk7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue"],"names":[],"mappings":";;;AA6BA,OAAO,WAAP,MAAwB,2BAAxB;AAEA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,eAAe,EAAE,IADd;AAEH,MAAA,OAAO,EAAE,IAFN;AAGH,MAAA,KAAK,EAAE,IAHJ;AAIH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAoDL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SApDd;AA+FL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,wUAFO;AAMd,UAAA,OAAO;AANO;AA/Fb;AAJN,KAAP;AAyJH,GA3JU;AA4JX,EAAA,WAAW,EAAE,IA5JF;AA6JX,EAAA,OA7JW,qBA6JD;AACN,SAAK,WAAL,GAAmB,IAAI,WAAJ,EAAnB;AAEA,SAAK,OAAL,GAAe,CACX;AAAC,MAAA,KAAK,EAAE,MAAR;AAAgB,MAAA,MAAM,EAAE;AAAxB,KADW,EAEX;AAAC,MAAA,KAAK,EAAE,MAAR;AAAgB,MAAA,MAAM,EAAE;AAAxB,KAFW,CAAf;AAKA,SAAK,eAAL,GAAuB,KAAK,OAA5B;AACH,GAtKU;AAuKX,EAAA,OAvKW,qBAuKD;AAAA;;AACN,SAAK,WAAL,CAAiB,iBAAjB,GAAqC,IAArC,CAA0C,UAAA,IAAG;AAAA,aAAK,KAAI,CAAC,KAAL,GAAa,IAAlB;AAAA,KAA7C;AACH,GAzKU;AA0KX,EAAA,OAAO,EAAE;AACL,IAAA,QADK,oBACI,KADJ,EACW;AACZ,WAAK,eAAL,GAAuB,KAAK,OAAL,CAAa,MAAb,CAAoB,UAAA,GAAE;AAAA,eAAK,KAAK,CAAC,QAAN,CAAe,GAAf,CAAL;AAAA,OAAtB,CAAvB;AACJ;AAHK;AA1KE,CAAf","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Column Toggle</span></h1>\n                <p>MultiSelect component can be used to implement column toggle functionality.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\">\n                    <template #header>\n                        <div style=\"text-align:left\">\n                            <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                        </div>\n                    </template>\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableColToggleDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableColToggleDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const columns = ref([\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ]);\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const selectedColumns = ref(columns.value);\n        const onToggle = (val) => {\n            selectedColumns.value = columns.value.filter(col => val.includes(col));\n        }\n\n        return { columns, nodes, nodeService, selectedColumns, onToggle }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/multiselect/multiselect.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\">\n                <template #header>\n                    <div style=\"text-align:left\">\n                        <p-multiselect :model-value=\"selectedColumns\" @update:model-value=\"onToggle\" :options=\"columns\" option-label=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"></p-multiselect>\n                    </div>\n                </template>\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></p-olumn>\n            </p-treetable>\n        </div>                    \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n                const columns = ref([\n                    {field: 'size', header: 'Size'},\n                    {field: 'type', header: 'Type'}\n                ]);\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n                const selectedColumns = ref(columns.value);\n                const onToggle = (val) => {\n                    selectedColumns.value = columns.value.filter(col => val.includes(col));\n                }\n\n                return { columns, nodes, nodeService, selectedColumns, onToggle }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column,\n                \"p-multiselect\": primevue.multiselect\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}