{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/TreeNode.vue?vue&type=template&id=0a795dd1","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/TreeNode.vue","mtime":1634589566241},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCByZXNvbHZlRGlyZWN0aXZlIGFzIF9yZXNvbHZlRGlyZWN0aXZlLCB3aXRoRGlyZWN0aXZlcyBhcyBfd2l0aERpcmVjdGl2ZXMsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2ssIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBfY3JlYXRlQ29tbWVudFZOb2RlLCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCBhcyBfcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHRvRGlzcGxheVN0cmluZyBhcyBfdG9EaXNwbGF5U3RyaW5nLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCByZW5kZXJMaXN0IGFzIF9yZW5kZXJMaXN0LCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50IH0gZnJvbSAidnVlIjsKdmFyIF9ob2lzdGVkXzEgPSB7CiAga2V5OiAwLAogIGNsYXNzOiAicC1jaGVja2JveCBwLWNvbXBvbmVudCIKfTsKdmFyIF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJwLXRyZWVub2RlLWxhYmVsIgp9Owp2YXIgX2hvaXN0ZWRfMyA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJwLXRyZWVub2RlLWNoaWxkcmVuIiwKICByb2xlOiAiZ3JvdXAiCn07CmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlLCAkcHJvcHMsICRzZXR1cCwgJGRhdGEsICRvcHRpb25zKSB7CiAgdmFyIF9jb21wb25lbnRfVHJlZU5vZGUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiVHJlZU5vZGUiLCB0cnVlKTsKCiAgdmFyIF9kaXJlY3RpdmVfcmlwcGxlID0gX3Jlc29sdmVEaXJlY3RpdmUoInJpcHBsZSIpOwoKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImxpIiwgewogICAgY2xhc3M6ICRvcHRpb25zLmNvbnRhaW5lckNsYXNzCiAgfSwgW19jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICRvcHRpb25zLmNvbnRlbnRDbGFzcywKICAgIHRhYmluZGV4OiAiMCIsCiAgICByb2xlOiAidHJlZWl0ZW0iLAogICAgImFyaWEtZXhwYW5kZWQiOiAkb3B0aW9ucy5leHBhbmRlZCwKICAgIG9uQ2xpY2s6IF9jYWNoZVsyXSB8fCAoX2NhY2hlWzJdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMub25DbGljayAmJiAkb3B0aW9ucy5vbkNsaWNrLmFwcGx5KCRvcHRpb25zLCBhcmd1bWVudHMpOwogICAgfSksCiAgICBvbktleWRvd246IF9jYWNoZVszXSB8fCAoX2NhY2hlWzNdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMub25LZXlEb3duICYmICRvcHRpb25zLm9uS2V5RG93bi5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pLAogICAgb25Ub3VjaGVuZDogX2NhY2hlWzRdIHx8IChfY2FjaGVbNF0gPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiAkb3B0aW9ucy5vblRvdWNoRW5kICYmICRvcHRpb25zLm9uVG91Y2hFbmQuYXBwbHkoJG9wdGlvbnMsIGFyZ3VtZW50cyk7CiAgICB9KSwKICAgIHN0eWxlOiAkcHJvcHMubm9kZS5zdHlsZQogIH0sIFtfd2l0aERpcmVjdGl2ZXMoX2NyZWF0ZVZOb2RlKCJidXR0b24iLCB7CiAgICB0eXBlOiAiYnV0dG9uIiwKICAgIGNsYXNzOiAicC10cmVlLXRvZ2dsZXIgcC1saW5rIiwKICAgIG9uQ2xpY2s6IF9jYWNoZVsxXSB8fCAoX2NhY2hlWzFdID0gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gJG9wdGlvbnMudG9nZ2xlICYmICRvcHRpb25zLnRvZ2dsZS5hcHBseSgkb3B0aW9ucywgYXJndW1lbnRzKTsKICAgIH0pLAogICAgdGFiaW5kZXg6ICItMSIKICB9LCBbX2NyZWF0ZVZOb2RlKCJzcGFuIiwgewogICAgY2xhc3M6ICRvcHRpb25zLnRvZ2dsZUljb24KICB9LCBudWxsLCAyCiAgLyogQ0xBU1MgKi8KICApXSwgNTEyCiAgLyogTkVFRF9QQVRDSCAqLwogICksIFtbX2RpcmVjdGl2ZV9yaXBwbGVdXSksICRvcHRpb25zLmNoZWNrYm94TW9kZSA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgX2hvaXN0ZWRfMSwgW19jcmVhdGVWTm9kZSgiZGl2IiwgewogICAgY2xhc3M6ICRvcHRpb25zLmNoZWNrYm94Q2xhc3MsCiAgICByb2xlOiAiY2hlY2tib3giLAogICAgImFyaWEtY2hlY2tlZCI6ICRvcHRpb25zLmNoZWNrZWQKICB9LCBbX2NyZWF0ZVZOb2RlKCJzcGFuIiwgewogICAgY2xhc3M6ICRvcHRpb25zLmNoZWNrYm94SWNvbgogIH0sIG51bGwsIDIKICAvKiBDTEFTUyAqLwogICldLCAxMAogIC8qIENMQVNTLCBQUk9QUyAqLwogICwgWyJhcmlhLWNoZWNrZWQiXSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSksIF9jcmVhdGVWTm9kZSgic3BhbiIsIHsKICAgIGNsYXNzOiAkb3B0aW9ucy5pY29uCiAgfSwgbnVsbCwgMgogIC8qIENMQVNTICovCiAgKSwgX2NyZWF0ZVZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfMiwgWyRwcm9wcy50ZW1wbGF0ZXNbJHByb3BzLm5vZGUudHlwZV0gfHwgJHByb3BzLnRlbXBsYXRlc1snZGVmYXVsdCddID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9yZXNvbHZlRHluYW1pY0NvbXBvbmVudCgkcHJvcHMudGVtcGxhdGVzWyRwcm9wcy5ub2RlLnR5cGVdIHx8ICRwcm9wcy50ZW1wbGF0ZXNbJ2RlZmF1bHQnXSksIHsKICAgIGtleTogMCwKICAgIG5vZGU6ICRwcm9wcy5ub2RlCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbIm5vZGUiXSkpIDogKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgewogICAga2V5OiAxCiAgfSwgW19jcmVhdGVUZXh0Vk5vZGUoX3RvRGlzcGxheVN0cmluZygkcHJvcHMubm9kZS5sYWJlbCksIDEKICAvKiBURVhUICovCiAgKV0sIDIxMTIKICAvKiBTVEFCTEVfRlJBR01FTlQsIERFVl9ST09UX0ZSQUdNRU5UICovCiAgKSldKV0sIDQ2CiAgLyogQ0xBU1MsIFNUWUxFLCBQUk9QUywgSFlEUkFURV9FVkVOVFMgKi8KICAsIFsiYXJpYS1leHBhbmRlZCJdKSwgJG9wdGlvbnMuaGFzQ2hpbGRyZW4gJiYgJG9wdGlvbnMuZXhwYW5kZWQgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInVsIiwgX2hvaXN0ZWRfMywgWyhfb3BlbkJsb2NrKHRydWUpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkcHJvcHMubm9kZS5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkTm9kZSkgewogICAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfVHJlZU5vZGUsIHsKICAgICAga2V5OiBjaGlsZE5vZGUua2V5LAogICAgICBub2RlOiBjaGlsZE5vZGUsCiAgICAgIHRlbXBsYXRlczogJHByb3BzLnRlbXBsYXRlcywKICAgICAgZXhwYW5kZWRLZXlzOiAkcHJvcHMuZXhwYW5kZWRLZXlzLAogICAgICBvbk5vZGVUb2dnbGU6ICRvcHRpb25zLm9uQ2hpbGROb2RlVG9nZ2xlLAogICAgICBvbk5vZGVDbGljazogJG9wdGlvbnMub25DaGlsZE5vZGVDbGljaywKICAgICAgc2VsZWN0aW9uTW9kZTogJHByb3BzLnNlbGVjdGlvbk1vZGUsCiAgICAgIHNlbGVjdGlvbktleXM6ICRwcm9wcy5zZWxlY3Rpb25LZXlzLAogICAgICBvbkNoZWNrYm94Q2hhbmdlOiAkb3B0aW9ucy5wcm9wYWdhdGVVcAogICAgfSwgbnVsbCwgOAogICAgLyogUFJPUFMgKi8KICAgICwgWyJub2RlIiwgInRlbXBsYXRlcyIsICJleHBhbmRlZEtleXMiLCAib25Ob2RlVG9nZ2xlIiwgIm9uTm9kZUNsaWNrIiwgInNlbGVjdGlvbk1vZGUiLCAic2VsZWN0aW9uS2V5cyIsICJvbkNoZWNrYm94Q2hhbmdlIl0pOwogIH0pLCAxMjgKICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICkpXSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgMgogIC8qIENMQVNTICovCiAgKTsKfQ=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/tree/TreeNode.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <li :class=\"containerClass\">\n        <div :class=\"contentClass\" tabindex=\"0\" role=\"treeitem\" :aria-expanded=\"expanded\"\n            @click=\"onClick\" @keydown=\"onKeyDown\" @touchend=\"onTouchEnd\" :style=\"node.style\">\n            <button type=\"button\" class=\"p-tree-toggler p-link\" @click=\"toggle\" tabindex=\"-1\" v-ripple>\n                <span :class=\"toggleIcon\"></span>\n            </button>\n            <div class=\"p-checkbox p-component\" v-if=\"checkboxMode\">\n                <div :class=\"checkboxClass\" role=\"checkbox\" :aria-checked=\"checked\">\n                    <span :class=\"checkboxIcon\"></span>\n                </div>\n            </div>\n            <span :class=\"icon\"></span>\n            <span class=\"p-treenode-label\">\n                <component :is=\"templates[node.type]||templates['default']\" :node=\"node\" v-if=\"templates[node.type]||templates['default']\"/>\n                <template v-else>{{node.label}}</template>\n            </span>\n        </div>\n        <ul class=\"p-treenode-children\" role=\"group\" v-if=\"hasChildren && expanded\">\n            <TreeNode v-for=\"childNode of node.children\" :key=\"childNode.key\" :node=\"childNode\" :templates=\"templates\"\n                :expandedKeys=\"expandedKeys\" @node-toggle=\"onChildNodeToggle\" @node-click=\"onChildNodeClick\"\n                :selectionMode=\"selectionMode\" :selectionKeys=\"selectionKeys\"\n                @checkbox-change=\"propagateUp\" />\n        </ul>\n    </li>\n</template>\n\n<script>\nimport {DomHandler} from 'primevue/utils';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeNode',\n    emits: ['node-toggle', 'node-click', 'checkbox-change'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        templates: {\n            type: null,\n            default: null\n        }\n    },\n    nodeTouched: false,\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        onChildNodeToggle(node) {\n            this.$emit('node-toggle', node);\n        },\n        onClick(event) {\n            if (DomHandler.hasClass(event.target, 'p-tree-toggler') || DomHandler.hasClass(event.target.parentElement, 'p-tree-toggler')) {\n                return;\n            }\n\n            if (this.isCheckboxSelectionMode()) {\n                this.toggleCheckbox();\n            }\n            else {\n                this.$emit('node-click', {\n                    originalEvent: event,\n                    nodeTouched: this.nodeTouched,\n                    node: this.node\n                });\n            }\n\n            this.nodeTouched = false;\n        },\n        onChildNodeClick(event) {\n            this.$emit('node-click', event);\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        onKeyDown(event) {\n            const nodeElement = event.target.parentElement;\n\n            switch (event.which) {\n                //down arrow\n                case 40:\n                    var listElement = nodeElement.children[1];\n                    if (listElement) {\n                        this.focusNode(listElement.children[0]);\n                    }\n                    else {\n                        const nextNodeElement = nodeElement.nextElementSibling;\n                        if (nextNodeElement) {\n                            this.focusNode(nextNodeElement);\n                        }\n                        else {\n                            let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n                            if (nextSiblingAncestor) {\n                                this.focusNode(nextSiblingAncestor);\n                            }\n                        }\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //up arrow\n                case 38:\n                    if (nodeElement.previousElementSibling) {\n                        this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n                    }\n                    else {\n                        let parentNodeElement = this.getParentNodeElement(nodeElement);\n                        if (parentNodeElement) {\n                            this.focusNode(parentNodeElement);\n                        }\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //right-left arrows\n                case 37:\n                case 39:\n                    this.$emit('node-toggle', this.node);\n\n                    event.preventDefault();\n                break;\n\n                //enter\n                case 13:\n                    this.onClick(event);\n                    event.preventDefault();\n                break;\n\n                default:\n                    //no op\n                break;\n            }\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? {...this.selectionKeys} : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check)\n                selectionKeys[node.key] = {checked: true, partialChecked: false};\n            else\n                delete selectionKeys[node.key];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = {...event.selectionKeys};\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if(_selectionKeys[child.key] && _selectionKeys[child.key].checked)\n                    checkedChildCount++;\n                else if(_selectionKeys[child.key] && _selectionKeys[child.key].partialChecked)\n                    childPartialSelected = true;\n            }\n\n            if(check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.node.key] = {checked: true, partialChecked: false};\n            }\n            else {\n                if (!check) {\n                    delete _selectionKeys[this.node.key];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length))\n                    _selectionKeys[this.node.key] = {checked: false, partialChecked: true};\n                else\n                    delete _selectionKeys[this.node.key];\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onChildCheckboxChange(event) {\n            this.$emit('checkbox-change', event);\n        },\n        findNextSiblingOfAncestor(nodeElement) {\n            let parentNodeElement = this.getParentNodeElement(nodeElement);\n            if (parentNodeElement) {\n                if (parentNodeElement.nextElementSibling)\n                    return parentNodeElement.nextElementSibling;\n                else\n                    return this.findNextSiblingOfAncestor(parentNodeElement);\n            }\n            else {\n                return null;\n            }\n        },\n        findLastVisibleDescendant(nodeElement) {\n            const childrenListElement = nodeElement.children[1];\n            if (childrenListElement) {\n                const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n                return this.findLastVisibleDescendant(lastChildElement);\n            }\n            else {\n                return nodeElement;\n            }\n        },\n        getParentNodeElement(nodeElement) {\n            const parentNodeElement = nodeElement.parentElement.parentElement;\n\n            return DomHandler.hasClass(parentNodeElement, 'p-treenode') ? parentNodeElement : null;\n        },\n        focusNode(element) {\n            element.children[0].focus();\n        },\n        isCheckboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        }\n    },\n    computed: {\n        hasChildren() {\n            return this.node.children && this.node.children.length > 0;\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.node.key] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selectable() {\n            return this.node.selectable === false ? false : this.selectionMode != null;\n        },\n        selected() {\n            return (this.selectionMode && this.selectionKeys) ? this.selectionKeys[this.node.key] === true : false;\n        },\n        containerClass() {\n            return ['p-treenode', {'p-treenode-leaf': this.leaf}];\n        },\n        contentClass() {\n            return ['p-treenode-content', this.node.styleClass, {\n                'p-treenode-selectable': this.selectable,\n                'p-highlight': this.checkboxMode ? this.checked : this.selected\n            }];\n        },\n        icon() {\n            return ['p-treenode-icon', this.node.icon];\n        },\n        toggleIcon() {\n            return ['p-tree-toggler-icon pi pi-fw', {\n                'pi-chevron-down': this.expanded,\n                'pi-chevron-right': !this.expanded\n            }];\n        },\n        checkboxClass() {\n            return ['p-checkbox-box', {'p-highlight': this.checked, 'p-indeterminate': this.partialChecked}];\n        },\n        checkboxIcon() {\n            return ['p-checkbox-icon', {'pi pi-check': this.checked, 'pi pi-minus': this.partialChecked}];\n        },\n        checkboxMode() {\n            return this.selectionMode === 'checkbox' && this.node.selectable !== false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].checked: false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.node.key] && this.selectionKeys[this.node.key].partialChecked: false;\n        }\n    },\n    directives: {\n        'ripple': Ripple\n    }\n}\n</script>\n"],"sourceRoot":""}]}