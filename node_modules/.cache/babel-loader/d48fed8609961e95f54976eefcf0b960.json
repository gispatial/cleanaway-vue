{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue?vue&type=template&id=e7a9e980&scoped=true","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUgYXMgX2NyZWF0ZVRleHRWTm9kZSwgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgd2l0aFNjb3BlSWQgYXMgX3dpdGhTY29wZUlkLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKdmFyIF93aXRoSWQgPSAvKiNfX1BVUkVfXyovX3dpdGhTY29wZUlkKCJkYXRhLXYtZTdhOWU5ODAiKTsKCl9wdXNoU2NvcGVJZCgiZGF0YS12LWU3YTllOTgwIik7Cgp2YXIgX2hvaXN0ZWRfMSA9IHsKICBjbGFzczogImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iCn07Cgp2YXIgX2hvaXN0ZWRfMiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImRpdiIsIHsKICBjbGFzczogImZlYXR1cmUtaW50cm8iCn0sIFsvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoMSIsIG51bGwsIFsvKiNfX1BVUkVfXyovX2NyZWF0ZVRleHRWTm9kZSgiVHJlZSAiKSwgLyojX19QVVJFX18qL19jcmVhdGVWTm9kZSgic3BhbiIsIG51bGwsICJGaWx0ZXIiKV0pLCAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJwIiwgbnVsbCwgIkZpbHRlcmluZyB1cGRhdGVzIHRoZSBub2RlIGJhc2VkIG9uIHRoZSBjb25zdHJhaW50cy4iKV0sIC0xCi8qIEhPSVNURUQgKi8KKTsKCnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAiY29udGVudC1zZWN0aW9uIGltcGxlbWVudGF0aW9uIgp9Owp2YXIgX2hvaXN0ZWRfNCA9IHsKICBjbGFzczogImNhcmQiCn07Cgp2YXIgX2hvaXN0ZWRfNSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImg1IiwgbnVsbCwgIkxlbmllbnQgRmlsdGVyIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKdmFyIF9ob2lzdGVkXzYgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJoNSIsIG51bGwsICJTdHJpY3QgRmlsdGVyIiwgLTEKLyogSE9JU1RFRCAqLwopOwoKX3BvcFNjb3BlSWQoKTsKCmV4cG9ydCB2YXIgcmVuZGVyID0gLyojX19QVVJFX18qL193aXRoSWQoZnVuY3Rpb24gKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0FwcERlbW9BY3Rpb25zID0gX3Jlc29sdmVDb21wb25lbnQoIkFwcERlbW9BY3Rpb25zIik7CgogIHZhciBfY29tcG9uZW50X1RyZWUgPSBfcmVzb2x2ZUNvbXBvbmVudCgiVHJlZSIpOwoKICB2YXIgX2NvbXBvbmVudF9BcHBEb2MgPSBfcmVzb2x2ZUNvbXBvbmVudCgiQXBwRG9jIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygiZGl2IiwgbnVsbCwgW19jcmVhdGVWTm9kZSgiZGl2IiwgX2hvaXN0ZWRfMSwgW19ob2lzdGVkXzIsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X0FwcERlbW9BY3Rpb25zKV0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzMsIFtfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzQsIFtfaG9pc3RlZF81LCBfY3JlYXRlVk5vZGUoX2NvbXBvbmVudF9UcmVlLCB7CiAgICB2YWx1ZTogJGRhdGEubm9kZXMsCiAgICBmaWx0ZXI6IHRydWUsCiAgICBmaWx0ZXJNb2RlOiAibGVuaWVudCIKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsidmFsdWUiXSksIF9ob2lzdGVkXzYsIF9jcmVhdGVWTm9kZShfY29tcG9uZW50X1RyZWUsIHsKICAgIHZhbHVlOiAkZGF0YS5ub2RlcywKICAgIGZpbHRlcjogdHJ1ZSwKICAgIGZpbHRlck1vZGU6ICJzdHJpY3QiCiAgfSwgbnVsbCwgOAogIC8qIFBST1BTICovCiAgLCBbInZhbHVlIl0pXSldKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQXBwRG9jLCB7CiAgICBuYW1lOiAiVHJlZUZpbHRlckRlbW8iLAogICAgc291cmNlczogJGRhdGEuc291cmNlcywKICAgIHNlcnZpY2U6IFsnTm9kZVNlcnZpY2UnXSwKICAgIGRhdGE6IFsndHJlZW5vZGVzJ10sCiAgICBnaXRodWI6ICJ0cmVlL1RyZWVGaWx0ZXJEZW1vLnZ1ZSIKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsic291cmNlcyJdKV0pOwp9KTs="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue"],"names":[],"mappings":";;;;;;;AAEa,EAAA,KAAK,EAAC;;;8BACP,YAAA,CAGM,KAHN,EAGM;AAHD,EAAA,KAAK,EAAC;AAGL,CAHN,EAA0B,C,aACtB,YAAA,CAAiC,IAAjC,EAAiC,IAAjC,EAAiC,C,8BAA7B,O,CAA6B,E,aAAxB,YAAA,CAAmB,MAAnB,EAAmB,IAAnB,EAAM,QAAN,CAAwB,CAAjC,CADsB,E,aAEtB,YAAA,CAA2D,GAA3D,EAA2D,IAA3D,EAAG,sDAAH,CAFsB,CAA1B,E;;AAAA,C;;;AAOC,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;8BACP,YAAA,CAAuB,IAAvB,EAAuB,IAAvB,EAAI,gBAAJ,EAAkB,CAAA;AAAA;AAAlB,C;;8BAGA,YAAA,CAAsB,IAAtB,EAAsB,IAAtB,EAAI,eAAJ,EAAiB,CAAA;AAAA;AAAjB,C;;;;;;;;;;;uBAdZ,YAAA,CAoBM,KApBN,EAoBM,IApBN,EAoBM,CAnBF,YAAA,CAMM,KANN,EAAA,UAAA,EAMM,CALF,UAKE,EADF,YAAA,CAAkB,yBAAlB,CACE,CANN,CAmBE,EAXF,YAAA,CAQM,KARN,EAAA,UAAA,EAQM,CAPF,YAAA,CAMM,KANN,EAAA,UAAA,EAMM,CALF,UAKE,EAJF,YAAA,CAAgE,eAAhE,EAAgE;AAAzD,IAAA,KAAK,EAAE,KAAA,CAAA,KAAkD;AAA1C,IAAA,MAAM,EAAE,IAAkC;AAA5B,IAAA,UAAU,EAAC;AAAiB,GAAhE,E,IAAA,E;;AAAA,I,SAAA,CAIE,EAFF,UAEE,EADF,YAAA,CAA+D,eAA/D,EAA+D;AAAxD,IAAA,KAAK,EAAE,KAAA,CAAA,KAAiD;AAAzC,IAAA,MAAM,EAAE,IAAiC;AAA3B,IAAA,UAAU,EAAC;AAAgB,GAA/D,E,IAAA,E;;AAAA,I,SAAA,CACE,CANN,CAOE,CARN,CAWE,EADF,YAAA,CAAqI,iBAArI,EAAqI;AAA7H,IAAA,IAAI,EAAC,gBAAwH;AAAtG,IAAA,OAAO,EAAE,KAAA,CAAA,OAA6F;AAAnF,IAAA,OAAO,EAAE,CAAA,aAAA,CAA0E;AAAxD,IAAA,IAAI,EAAE,CAAA,WAAA,CAAkD;AAAnC,IAAA,MAAM,EAAC;AAA4B,GAArI,E,IAAA,E;;AAAA,I,WAAA,CACE,CApBN,C","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Filter</span></h1>\n                <p>Filtering updates the node based on the constraints.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Lenient Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n                <h5>Strict Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeFilterDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeFilterDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {},\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const expandedKeys = ref({});\n        const expandAll = () => {\n            for (let node of nodes.value) {\n                expandNode(node);\n            }\n\n            expandedKeys.value = {...expandedKeys.value};\n        };\n        const collapseAll = () => {\n            expandedKeys.value = {};\n        };\n        const expandNode = (node) => {\n            expandedKeys.value[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    expandNode(child);\n                }\n            }\n        };\n\n        return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <h5>Lenient Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"lenient\"></p-tree>\n\n            <h5>Strict Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"strict\"></p-tree>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const expandedKeys = ref({});\n                const expandAll = () => {\n                    for (let node of nodes.value) {\n                        expandNode(node);\n                    }\n\n                    expandedKeys.value = {...expandedKeys.value};\n                };\n                const collapseAll = () => {\n                    expandedKeys.value = {};\n                };\n                const expandNode = (node) => {\n                    expandedKeys.value[node.key] = true;\n                    if (node.children && node.children.length) {\n                        for (let child of node.children) {\n                            expandNode(child);\n                        }\n                    }\n                };\n\n                return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n            },\n            components: {\n                \"p-tree\": primevue.tree\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"],"sourceRoot":""}]}