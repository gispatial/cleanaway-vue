{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treeselect/TreeSelectDoc.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treeselect/TreeSelectDoc.vue","mtime":1634589566291},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBzb3VyY2VzOiB7CiAgICAgICAgJ29wdGlvbnMtYXBpJzogewogICAgICAgICAgdGFiTmFtZTogJ09wdGlvbnMgQVBJIFNvdXJjZScsCiAgICAgICAgICBjb250ZW50OiAiXG48dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGg1PlNpbmdsZTwvaDU+XG4gICAgICAgIDxUcmVlU2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE5vZGVcIiA6b3B0aW9ucz1cIm5vZGVzXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3QgSXRlbVwiPjwvVHJlZVNlbGVjdD5cblxuICAgICAgICA8aDU+TXVsdGlwbGU8L2g1PlxuICAgICAgICA8VHJlZVNlbGVjdCB2LW1vZGVsPVwic2VsZWN0ZWROb2RlczFcIiA6b3B0aW9ucz1cIm5vZGVzXCIgc2VsZWN0aW9uTW9kZT1cIm11bHRpcGxlXCIgOm1ldGFLZXlTZWxlY3Rpb249XCJmYWxzZVwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IEl0ZW1zXCI+PC9UcmVlU2VsZWN0PlxuXG4gICAgICAgIDxoNT5DaGVja2JveDwvaDU+XG4gICAgICAgIDxUcmVlU2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE5vZGVzMlwiIDpvcHRpb25zPVwibm9kZXNcIiBkaXNwbGF5PVwiY2hpcFwiIHNlbGVjdGlvbk1vZGU9XCJjaGVja2JveFwiICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBJdGVtc1wiPjwvVHJlZVNlbGVjdD5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgTm9kZVNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlL05vZGVTZXJ2aWNlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlczogbnVsbCxcbiAgICAgICAgICAgIHNlbGVjdGVkTm9kZTogbnVsbCxcbiAgICAgICAgICAgIHNlbGVjdGVkTm9kZXMxOiBudWxsLFxuICAgICAgICAgICAgc2VsZWN0ZWROb2RlczI6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm9kZVNlcnZpY2U6IG51bGwsXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgICAgdGhpcy5ub2RlU2VydmljZSA9IG5ldyBOb2RlU2VydmljZSgpO1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgICAgdGhpcy5ub2RlU2VydmljZS5nZXRUcmVlTm9kZXMoKS50aGVuKGRhdGEgPT4gdGhpcy5ub2RlcyA9IGRhdGEpO1xuICAgIH1cbn1cbjxcXC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5wLXRyZWVzZWxlY3Qge1xuICAgIHdpZHRoOjIwcmVtO1xufVxuXG5AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2NDBweCkge1xuICAgIC5wLXRyZWVzZWxlY3Qge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG59XG48L3N0eWxlPiIKICAgICAgICB9LAogICAgICAgICdjb21wb3NpdGlvbi1hcGknOiB7CiAgICAgICAgICB0YWJOYW1lOiAnQ29tcG9zaXRpb24gQVBJIFNvdXJjZScsCiAgICAgICAgICBjb250ZW50OiAiXG48dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPGg1PlNpbmdsZTwvaDU+XG4gICAgICAgIDxUcmVlU2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE5vZGVcIiA6b3B0aW9ucz1cIm5vZGVzXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3QgSXRlbVwiPjwvVHJlZVNlbGVjdD5cblxuICAgICAgICA8aDU+TXVsdGlwbGU8L2g1PlxuICAgICAgICA8VHJlZVNlbGVjdCB2LW1vZGVsPVwic2VsZWN0ZWROb2RlczFcIiA6b3B0aW9ucz1cIm5vZGVzXCIgc2VsZWN0aW9uTW9kZT1cIm11bHRpcGxlXCIgOm1ldGFLZXlTZWxlY3Rpb249XCJmYWxzZVwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IEl0ZW1zXCI+PC9UcmVlU2VsZWN0PlxuXG4gICAgICAgIDxoNT5DaGVja2JveDwvaDU+XG4gICAgICAgIDxUcmVlU2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE5vZGVzMlwiIDpvcHRpb25zPVwibm9kZXNcIiBkaXNwbGF5PVwiY2hpcFwiIHNlbGVjdGlvbk1vZGU9XCJjaGVja2JveFwiICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBJdGVtc1wiPjwvVHJlZVNlbGVjdD5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBOb2RlU2VydmljZSBmcm9tICcuL3NlcnZpY2UvTm9kZVNlcnZpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgICAgICAgbm9kZVNlcnZpY2UudmFsdWUuZ2V0VHJlZU5vZGVzKCkudGhlbihkYXRhID0+IG5vZGVzLnZhbHVlID0gZGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG5vZGVzID0gcmVmKCk7XG4gICAgICAgIGNvbnN0IG5vZGVTZXJ2aWNlID0gcmVmKG5ldyBOb2RlU2VydmljZSgpKTtcblxuICAgICAgICBjb25zdCBzZWxlY3RlZE5vZGUgPSByZWYoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWROb2RlczEgPSByZWYoKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWROb2RlczIgPSByZWYoKTtcblxuICAgICAgICByZXR1cm4geyBub2Rlcywgc2VsZWN0ZWROb2RlLCBzZWxlY3RlZE5vZGVzMSwgc2VsZWN0ZWROb2RlczIgfTtcbiAgICB9XG59XG48XFwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4ucC10cmVlc2VsZWN0IHtcbiAgICB3aWR0aDoyMHJlbTtcbn1cblxuQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgICAucC10cmVlc2VsZWN0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxufVxuPC9zdHlsZT4iCiAgICAgICAgfSwKICAgICAgICAnYnJvd3Nlci1zb3VyY2UnOiB7CiAgICAgICAgICB0YWJOYW1lOiAnQnJvd3NlciBTb3VyY2UnLAogICAgICAgICAgaW1wb3J0czogIjxzY3JpcHQgc3JjPVwiaHR0cHM6Ly91bnBrZy5jb20vcHJpbWV2dWVAXjMvdHJlZXNlbGVjdC90cmVlc2VsZWN0Lm1pbi5qc1wiPjxcXC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHQgc3JjPVwiLi9Ob2RlU2VydmljZS5qc1wiPjxcXC9zY3JpcHQ+IiwKICAgICAgICAgIGNvbnRlbnQ6ICI8ZGl2IGlkPVwiYXBwXCI+XG4gICAgICAgICAgICA8aDU+U2luZ2xlPC9oNT5cbiAgICAgICAgICAgIDxwLXRyZWVzZWxlY3Qgdi1tb2RlbD1cInNlbGVjdGVkTm9kZVwiIDpvcHRpb25zPVwibm9kZXNcIiBwbGFjZWhvbGRlcj1cIlNlbGVjdCBJdGVtXCI+PC9wLXRyZWVzZWxlY3Q+XG5cbiAgICAgICAgICAgIDxoNT5NdWx0aXBsZTwvaDU+XG4gICAgICAgICAgICA8cC10cmVlc2VsZWN0IHYtbW9kZWw9XCJzZWxlY3RlZE5vZGVzMVwiIDpvcHRpb25zPVwibm9kZXNcIiBzZWxlY3Rpb24tbW9kZT1cIm11bHRpcGxlXCIgOm1ldGEta2V5LXNlbGVjdGlvbj1cImZhbHNlXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3QgSXRlbXNcIj48L3AtdHJlZXNlbGVjdD5cblxuICAgICAgICAgICAgPGg1PkNoZWNrYm94PC9oNT5cbiAgICAgICAgICAgIDxwLXRyZWVzZWxlY3Qgdi1tb2RlbD1cInNlbGVjdGVkTm9kZXMyXCIgOm9wdGlvbnM9XCJub2Rlc1wiIGRpc3BsYXk9XCJjaGlwXCIgc2VsZWN0aW9uLW1vZGU9XCJjaGVja2JveFwiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IEl0ZW1zXCI+PC9wLXRyZWVzZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiPlxuICAgICAgICBjb25zdCB7IGNyZWF0ZUFwcCwgcmVmLCBvbk1vdW50ZWQgfSA9IFZ1ZTtcblxuICAgICAgICBjb25zdCBBcHAgPSB7XG4gICAgICAgICAgICBzZXR1cCgpIHtcbiAgICAgICAgICAgICAgICBvbk1vdW50ZWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBub2RlU2VydmljZS52YWx1ZS5nZXRUcmVlTm9kZXMoKS50aGVuKGRhdGEgPT4gbm9kZXMudmFsdWUgPSBkYXRhKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gcmVmKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZVNlcnZpY2UgPSByZWYobmV3IE5vZGVTZXJ2aWNlKCkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWROb2RlID0gcmVmKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWROb2RlczEgPSByZWYoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZE5vZGVzMiA9IHJlZigpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbm9kZXMsIHNlbGVjdGVkTm9kZSwgc2VsZWN0ZWROb2RlczEsIHNlbGVjdGVkTm9kZXMyIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgICAgIFwicC10cmVlc2VsZWN0XCI6IHByaW1ldnVlLnRyZWVzZWxlY3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjcmVhdGVBcHAoQXBwKVxuICAgICAgICAgICAgLnVzZShwcmltZXZ1ZS5jb25maWcuZGVmYXVsdClcbiAgICAgICAgICAgIC5tb3VudChcIiNhcHBcIik7XG4gICAgICAgIDxcXC9zY3JpcHQ+XG5cbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAucC10cmVlc2VsZWN0IHtcbiAgICAgICAgICAgIHdpZHRoOjIwcmVtO1xuICAgICAgICB9XG5cbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjQwcHgpIHtcbiAgICAgICAgICAgIC5wLXRyZWVzZWxlY3Qge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+IgogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9Cn07"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treeselect/TreeSelectDoc.vue"],"names":[],"mappings":"AA6fA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAmDL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SAnDd;AAqGL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,gJAFO;AAId,UAAA,OAAO;AAJO;AArGb;AADN,KAAP;AA+JJ;AAjKW,CAAf","sourcesContent":["<template>\n\t<AppDoc name=\"TreeSelectDemo\" :sources=\"sources\" github=\"treeselect/TreeSelectDemo.vue\" :service=\"['NodeService']\" :data=\"['treenodes']\">\n        <h5>Import</h5>\n<pre v-code.script><code>\nimport TreeSelect from 'primevue/treeselect';\n\n</code></pre>\n\n        <h5>Import via CDN</h5>\n<pre v-code><code>\n&lt;script src=\"https://unpkg.com/primevue@^3/core/core.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/primevue@^3/treeselect/treeselect.min.js\"&gt;&lt;/script&gt;\n\n</code></pre>\n\n        <h5>Getting Started</h5>\n\t\t<p>TreeSelect component requires an array of TreeNode objects as its <i>options</i> and keys of the nodes as its value.</p>\n\n<pre v-code><code>\n&lt;TreeSelect v-model=\"selectedNodeKey\" :options=\"nodes\" placeholder=\"Select Item\" /&gt;\n\n</code></pre>\n\n        <p>In example below, nodes are retrieved from a remote data source.</p>\n\n<pre v-code.script><code>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedNodeKey: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    }\n}\n\n</code></pre>\n\n<pre v-code.script><code>\nexport default class NodeService {\n\n    getTreeNodes() {\n        return fetch('demo/data/treenodes.json').then(res => res.json())\n                .then(d => d.root);\n    }\n\n}\n\n</code></pre>\n\n        <p>The json response sample would be as following.</p>\n<pre v-code.script><code>\n{\n    \"root\": [\n        {\n            \"key\": \"0\",\n            \"label\": \"Documents\",\n            \"data\": \"Documents Folder\",\n            \"icon\": \"pi pi-fw pi-inbox\",\n            \"children\": [{\n                \"key\": \"0-0\",\n                \"label\": \"Work\",\n                \"data\": \"Work Folder\",\n                \"icon\": \"pi pi-fw pi-cog\",\n                \"children\": [{ \"key\": \"0-0-0\", \"label\": \"Expenses.doc\", \"icon\": \"pi pi-fw pi-file\", \"data\": \"Expenses Document\" }, { \"key\": \"0-0-1\", \"label\": \"Resume.doc\", \"icon\": \"pi pi-fw pi-file\", \"data\": \"Resume Document\" }]\n            },\n            {\n                \"key\": \"0-1\",\n                \"label\": \"Home\",\n                \"data\": \"Home Folder\",\n                \"icon\": \"pi pi-fw pi-home\",\n                \"children\": [{ \"key\": \"0-1-0\", \"label\": \"Invoices.txt\", \"icon\": \"pi pi-fw pi-file\", \"data\": \"Invoices for this month\" }]\n            }]\n        },\n        {\n            \"key\": \"1\",\n            \"label\": \"Events\",\n            \"data\": \"Events Folder\",\n            \"icon\": \"pi pi-fw pi-calendar\",\n            \"children\": [\n                { \"key\": \"1-0\", \"label\": \"Meeting\", \"icon\": \"pi pi-fw pi-calendar-plus\", \"data\": \"Meeting\" },\n                { \"key\": \"1-1\", \"label\": \"Product Launch\", \"icon\": \"pi pi-fw pi-calendar-plus\", \"data\": \"Product Launch\" },\n                { \"key\": \"1-2\", \"label\": \"Report Review\", \"icon\": \"pi pi-fw pi-calendar-plus\", \"data\": \"Report Review\" }]\n        },\n        {\n            \"key\": \"2\",\n            \"label\": \"Movies\",\n            \"data\": \"Movies Folder\",\n            \"icon\": \"pi pi-fw pi-star\",\n            \"children\": [{\n                \"key\": \"2-0\",\n                \"icon\": \"pi pi-fw pi-star\",\n                \"label\": \"Al Pacino\",\n                \"data\": \"Pacino Movies\",\n                \"children\": [{ \"key\": \"2-0-0\", \"label\": \"Scarface\", \"icon\": \"pi pi-fw pi-video\", \"data\": \"Scarface Movie\" }, { \"key\": \"2-0-1\", \"label\": \"Serpico\", \"icon\": \"pi pi-fw pi-video\", \"data\": \"Serpico Movie\" }]\n            },\n            {\n                \"key\": \"2-1\",\n                \"label\": \"Robert De Niro\",\n                \"icon\": \"pi pi-fw pi-star\",\n                \"data\": \"De Niro Movies\",\n                \"children\": [{ \"key\": \"2-1-0\", \"label\": \"Goodfellas\", \"icon\": \"pi pi-fw pi-video\", \"data\": \"Goodfellas Movie\" }, { \"key\": \"2-1-1\", \"label\": \"Untouchables\", \"icon\": \"pi pi-fw pi-video\", \"data\": \"Untouchables Movie\" }]\n            }]\n        }\n    ]\n}\n\n</code></pre>\n\n        <h5>TreeNode API utilized by the TreeSelect</h5>\n        <div class=\"doc-tablewrapper\">\n            <table class=\"doc-table\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Default</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>key</td>\n                        <td>any</td>\n                        <td>null</td>\n                        <td>Mandatory unique key of the node.</td>\n                    </tr>\n                    <tr>\n                        <td>label</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Label of the node.</td>\n                    </tr>\n                    <tr>\n                        <td>data</td>\n                        <td>any</td>\n                        <td>null</td>\n                        <td>Data represented by the node.</td>\n                    </tr>\n                    <tr>\n                        <td>type</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Type of the node to match a template.</td>\n                    </tr>\n                    <tr>\n                        <td>icon</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Icon of the node to display next to content.</td>\n                    </tr>\n                    <tr>\n                        <td>children</td>\n                        <td>TreeNode[]</td>\n                        <td>null</td>\n                        <td>An array of treenodes as children.</td>\n                    </tr>\n                    <tr>\n                        <td>style</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Inline style of the node.</td>\n                    </tr>\n                    <tr>\n                        <td>styleClass</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Style class of the node.</td>\n                    </tr>\n                    <tr>\n                        <td>selectable</td>\n                        <td>boolean</td>\n                        <td>null</td>\n                        <td>Whether the node is selectable when selection mode is enabled.</td>\n                    </tr>\n                    <tr>\n                        <td>leaf</td>\n                        <td>boolean</td>\n                        <td>null</td>\n                        <td>Specifies if the node has children. Used in lazy loading.</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <h5>Selection Mode</h5>\n        <p>TreeSelects offers \"single\", \"multiple\" and \"checkbox\" alternatives for the selection behavior that is defined by the <i>selectionMode</i> option.</p>\n<pre v-code><code>\n&lt;TreeSelect v-model=\"selectedValue1\" :options=\"nodes\" selectionMode=\"single\" placeholder=\"Select Item\" /&gt;\n\n&lt;TreeSelect v-model=\"selectedValue2\" :options=\"nodes\" selectionMode=\"multiple\" placeholder=\"Select Items\" /&gt;\n\n&lt;TreeSelect v-model=\"selectedValue3\" :options=\"nodes\" selectionMode=\"checkbox\" placeholder=\"Select Items\" /&gt;\n\n</code></pre>\n\n        <h5>Value Format</h5>\n        <p>Value passed to and from the TreeSelect via the v-model directive should be a an object with key-value pairs where key is the node key and\n            value is a boolean to indicate selection. On the other hand\n        in \"checkbox\" mode, instead of a boolean, value should be an object that has \"checked\" and \"partialChecked\" properties to represent the checked state of a node. Best way to clarify it is prepopulating a TreeSelect with an existing value.</p>\n\n<pre v-code.script><code>\ndata() {\n    return {\n        selectedValue1: {'2-1': true},\n        selectedValue2: {'1-1': true, '0-0-0': true},\n        selectedValue2: {'1': {checked: true, partialChecked: true}, '1-0': {checked: true}}\n        nodes: null\n    }\n},\n</code></pre>\n\n        <h5>Chips Display</h5>\n        <p>A comma separated list is used by default to display selected items whereas alternative chip mode is provided using the <i>display</i> property to visualize the items as tokens.</p>\n<pre v-code><code>\n&lt;TreeSelect v-model=\"selectedValue\" display=\"chip\" :options=\"nodes\" selectionMode=\"multiple\" placeholder=\"Select Items\" /&gt;\n\n</code></pre>\n\n\t\t<h5>Templating</h5>\n\t\t<p>Label of an option is used as the display text of an item by default, for custom content support define a <i>value</i> template that gets the selected nodes as a parameter.\n        In addition <i>header</i>, <i>footer</i> and <i>empty</i> slots are provided for further customization.</p>\n<pre v-code><code><template v-pre>\n&lt;TreeSelect v-model=\"selectedNodes\" :options=\"nodes\" placeholder=\"Select Items\"&gt;\n\t&lt;template #value=\"{value}\"&gt;\n\t\tCustom Content\n\t&lt;/template&gt;\n&lt;/TreeSelect&gt;\n</template>\n</code></pre>\n\n\t\t<h5>Properties</h5>\n        <p>Any property as style and class are passed to the main container element. Following are the additional properties to configure the component.</p>\n\t\t<div class=\"doc-tablewrapper\">\n\t\t\t<table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Default</th>\n                        <th>Description</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    <tr>\n                        <td>modelValue</td>\n                        <td>any</td>\n                        <td>null</td>\n                        <td>Value of the component.</td>\n                    </tr>\n                    <tr>\n                        <td>options</td>\n                        <td>array</td>\n                        <td>null</td>\n                        <td>An array of treenodes.</td>\n                    </tr>\n                    <tr>\n                        <td>scrollHeight</td>\n                        <td>string</td>\n                        <td>200px</td>\n                        <td>Height of the viewport, a scrollbar is defined if height of list exceeds this value.</td>\n                    </tr>\n                    <tr>\n                        <td>placeholder</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Label to display when there are no selections.</td>\n                    </tr>\n                    <tr>\n                        <td>disabled</td>\n                        <td>boolean</td>\n                        <td>false</td>\n                        <td>When present, it specifies that the component should be disabled.</td>\n                    </tr>\n                    <tr>\n                        <td>tabindex</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Index of the element in tabbing order.</td>\n                    </tr>\n                    <tr>\n                        <td>inputId</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Identifier of the underlying input element.</td>\n                    </tr>\n                    <tr>\n                        <td>ariaLabelledBy</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\n                    </tr>\n                    <tr>\n                        <td>selectionMode</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\".</td>\n                    </tr>\n                    <tr>\n                        <td>panelClass</td>\n                        <td>string</td>\n                        <td>null</td>\n                        <td>Style class of the overlay panel.</td>\n                    </tr>\n                    <tr>\n                        <td>appendTo</td>\n                        <td>string</td>\n                        <td>body</td>\n                        <td>A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are \"body\" for document body\n                        and \"self\" for the element itself.</td>\n                    </tr>\n                    <tr>\n                        <td>emptyMessage</td>\n                        <td>string</td>\n                        <td>No results found</td>\n                        <td>Text to display when there are no options available. Defaults to value from PrimeVue locale configuration.</td>\n                    </tr>\n                    <tr>\n                        <td>display</td>\n                        <td>string</td>\n                        <td>comma</td>\n                        <td>Defines how the selected items are displayed, valid values are \"comma\" and \"chip\".</td>\n                    </tr>\n                     <tr>\n                        <td>metaKeySelection</td>\n                        <td>boolean</td>\n                        <td>true</td>\n                        <td>Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item\n                            can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.</td>\n                    </tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<h5>Events</h5>\n        <div class=\"doc-tablewrapper\">\n            <table class=\"doc-table\">\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Parameters</th>\n                        <th>Description</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>change</td>\n                        <td>event: Selected node keys</td>\n                        <td>Callback to invoke on value change.</td>\n                    </tr>\n                    <tr>\n                        <td>before-show</td>\n                        <td>-</td>\n                        <td>Callback to invoke before the overlay is shown.</td>\n                    </tr>\n                    <tr>\n                        <td>before-hide</td>\n                        <td>-</td>\n                        <td>Callback to invoke before the overlay is hidden.</td>\n                    </tr>\n                    <tr>\n                        <td>show</td>\n                        <td>-</td>\n                        <td>Callback to invoke when the overlay is shown.</td>\n                    </tr>\n                    <tr>\n                        <td>hide</td>\n                        <td>-</td>\n                        <td>Callback to invoke when the overlay is hidden.</td>\n                    </tr>\n                    <tr>\n                        <td>node-select</td>\n                        <td>node: Node instance</td>\n                        <td>Callback to invoke when a node is selected.</td>\n                    </tr>\n                    <tr>\n                        <td>node-unselect</td>\n                        <td>node: Node instance</td>\n                        <td>Callback to invoke when a node is unselected.</td>\n                    </tr>\n                    <tr>\n                        <td>node-expand</td>\n                        <td>node: Node instance</td>\n                        <td>Callback to invoke when a node is expanded.</td>\n                    </tr>\n                    <tr>\n                        <td>node-collapse</td>\n                        <td>node: Node instance</td>\n                        <td>Callback to invoke when a node is collapsed.</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n\n        <h5>Methods</h5>\n\t\t<div class=\"doc-tablewrapper\">\n\t\t\t<table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Parameters</th>\n                        <th>Description</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    <tr>\n                        <td>show</td>\n                        <td>-</td>\n                        <td>Shows the overlay.</td>\n                    </tr>\n                    <tr>\n                        <td>hide</td>\n                        <td>-</td>\n                        <td>Hides the overlay.</td>\n                    </tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n        <h5>Slots</h5>\n\t\t<div class=\"doc-tablewrapper\">\n            <table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Parameters</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    <tr>\n                        <td>value</td>\n                        <td>value: Selected nodes <br />\n                            placeholder: Placeholder value</td>\n                    </tr>\n                    <tr>\n                        <td>header</td>\n                        <td>value: Value of the component <br />\n                            options: TreeNode options</td>\n                    </tr>\n                    <tr>\n                        <td>footer</td>\n                        <td>value: Value of the component <br />\n                           options: TreeNode options</td>\n                    </tr>\n                    <tr>\n                        <td>empty</td>\n                        <td>-</td>\n                    </tr>\n                    <tr>\n                        <td>indicator</td>\n                        <td>-</td>\n                    </tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n        </div>\n\n\t\t<h5>Styling</h5>\n\t\t<p>Following is the list of structural style classes, for theming classes visit <router-link to=\"/theming\">theming</router-link> page.</p>\n\t\t<div class=\"doc-tablewrapper\">\n\t\t\t<table class=\"doc-table\">\n\t\t\t\t<thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Element</th>\n                    </tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n                    <tr>\n                        <td>p-treeselect</td>\n                        <td>Container element.</td>\n                    </tr>\n                    <tr>\n                        <td>p-treeselect-label-container</td>\n                        <td>Container of the label to display selected items.</td>\n                    </tr>\n                    <tr>\n                        <td>p-treeselect-label</td>\n                        <td>Label to display selected items.</td>\n                    </tr>\n                    <tr>\n                        <td>p-treeselect-trigger</td>\n                        <td>Dropdown button.</td>\n                    </tr>\n                    <tr>\n                        <td>p-treeselect-panel</td>\n                        <td>Overlay panel for items.</td>\n                    </tr>\n                    <tr>\n                        <td>p-treeselect-items-wrapper</td>\n                        <td>List container of items.</td>\n                    </tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t</div>\n\n\t\t<h5>Dependencies</h5>\n\t\t<p>None.</p>\n    </AppDoc>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Single</h5>\n        <TreeSelect v-model=\"selectedNode\" :options=\"nodes\" placeholder=\"Select Item\"></TreeSelect>\n\n        <h5>Multiple</h5>\n        <TreeSelect v-model=\"selectedNodes1\" :options=\"nodes\" selectionMode=\"multiple\" :metaKeySelection=\"false\" placeholder=\"Select Items\"></TreeSelect>\n\n        <h5>Checkbox</h5>\n        <TreeSelect v-model=\"selectedNodes2\" :options=\"nodes\" display=\"chip\" selectionMode=\"checkbox\"  placeholder=\"Select Items\"></TreeSelect>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            selectedNode: null,\n            selectedNodes1: null,\n            selectedNodes2: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\n.p-treeselect {\n    width:20rem;\n}\n\n@media screen and (max-width: 640px) {\n    .p-treeselect {\n        width: 100%;\n    }\n}\n</style>`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Single</h5>\n        <TreeSelect v-model=\"selectedNode\" :options=\"nodes\" placeholder=\"Select Item\"></TreeSelect>\n\n        <h5>Multiple</h5>\n        <TreeSelect v-model=\"selectedNodes1\" :options=\"nodes\" selectionMode=\"multiple\" :metaKeySelection=\"false\" placeholder=\"Select Items\"></TreeSelect>\n\n        <h5>Checkbox</h5>\n        <TreeSelect v-model=\"selectedNodes2\" :options=\"nodes\" display=\"chip\" selectionMode=\"checkbox\"  placeholder=\"Select Items\"></TreeSelect>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from \"vue\";\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n         onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        });\n\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n\n        const selectedNode = ref();\n        const selectedNodes1 = ref();\n        const selectedNodes2 = ref();\n\n        return { nodes, selectedNode, selectedNodes1, selectedNodes2 };\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\n.p-treeselect {\n    width:20rem;\n}\n\n@media screen and (max-width: 640px) {\n    .p-treeselect {\n        width: 100%;\n    }\n}\n</style>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treeselect/treeselect.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <h5>Single</h5>\n            <p-treeselect v-model=\"selectedNode\" :options=\"nodes\" placeholder=\"Select Item\"></p-treeselect>\n\n            <h5>Multiple</h5>\n            <p-treeselect v-model=\"selectedNodes1\" :options=\"nodes\" selection-mode=\"multiple\" :meta-key-selection=\"false\" placeholder=\"Select Items\"></p-treeselect>\n\n            <h5>Checkbox</h5>\n            <p-treeselect v-model=\"selectedNodes2\" :options=\"nodes\" display=\"chip\" selection-mode=\"checkbox\" placeholder=\"Select Items\"></p-treeselect>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                });\n\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n\n                const selectedNode = ref();\n                const selectedNodes1 = ref();\n                const selectedNodes2 = ref();\n\n                return { nodes, selectedNode, selectedNodes1, selectedNodes2 };\n            },\n            components: {\n                \"p-treeselect\": primevue.treeselect\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n\n        <style>\n        .p-treeselect {\n            width:20rem;\n        }\n\n        @media screen and (max-width: 640px) {\n            .p-treeselect {\n                width: 100%;\n            }\n        }\n        </style>`\n                }\n            }\n        }\n    }\n}\n</script>\n"],"sourceRoot":""}]}