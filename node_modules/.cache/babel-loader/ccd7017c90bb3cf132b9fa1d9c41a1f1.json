{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTablePaginatorDemo.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTablePaginatorDemo.vue","mtime":1634589566292},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:ZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBub2RlczogbnVsbCwKICAgICAgc291cmNlczogewogICAgICAgICdvcHRpb25zLWFwaSc6IHsKICAgICAgICAgIHRhYk5hbWU6ICdPcHRpb25zIEFQSSBTb3VyY2UnLAogICAgICAgICAgY29udGVudDogIlxuPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxUcmVlVGFibGUgOnZhbHVlPVwibm9kZXNcIiA6cGFnaW5hdG9yPVwidHJ1ZVwiIDpyb3dzPVwiMTBcIj5cbiAgICAgICAgICAgIDxDb2x1bW4gZmllbGQ9XCJuYW1lXCIgaGVhZGVyPVwiTmFtZVwiIDpleHBhbmRlcj1cInRydWVcIj48L0NvbHVtbj5cbiAgICAgICAgICAgIDxDb2x1bW4gZmllbGQ9XCJzaXplXCIgaGVhZGVyPVwiU2l6ZVwiPjwvQ29sdW1uPlxuICAgICAgICAgICAgPENvbHVtbiBmaWVsZD1cInR5cGVcIiBoZWFkZXI9XCJUeXBlXCI+PC9Db2x1bW4+XG4gICAgICAgIDwvVHJlZVRhYmxlPlxuICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlczogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICBsZXQgZmlsZXMgPSBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0ge1xuICAgICAgICAgICAgICAgIGtleTogaSxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdJdGVtICcgKyBpLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwKSArIDEgKyAna2InLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVHlwZSAnICsgaVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpICsgJyAtIDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdJdGVtICcgKyBpICsgJyAtIDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApICsgMSArICdrYicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1R5cGUgJyArIGlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZpbGVzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm5vZGVzID0gZmlsZXM7XG4gICAgfVxufVxuPFxcL3NjcmlwdD5cbiIKICAgICAgICB9LAogICAgICAgICdjb21wb3NpdGlvbi1hcGknOiB7CiAgICAgICAgICB0YWJOYW1lOiAnQ29tcG9zaXRpb24gQVBJIFNvdXJjZScsCiAgICAgICAgICBjb250ZW50OiAiXG48dGVtcGxhdGU+XG4gICAgPGRpdj5cbiAgICAgICAgPFRyZWVUYWJsZSA6dmFsdWU9XCJub2Rlc1wiIDpwYWdpbmF0b3I9XCJ0cnVlXCIgOnJvd3M9XCIxMFwiPlxuICAgICAgICAgICAgPENvbHVtbiBmaWVsZD1cIm5hbWVcIiBoZWFkZXI9XCJOYW1lXCIgOmV4cGFuZGVyPVwidHJ1ZVwiPjwvQ29sdW1uPlxuICAgICAgICAgICAgPENvbHVtbiBmaWVsZD1cInNpemVcIiBoZWFkZXI9XCJTaXplXCI+PC9Db2x1bW4+XG4gICAgICAgICAgICA8Q29sdW1uIGZpZWxkPVwidHlwZVwiIGhlYWRlcj1cIlR5cGVcIj48L0NvbHVtbj5cbiAgICAgICAgPC9UcmVlVGFibGU+XG4gICAgPC9kaXY+ICAgICAgICAgICAgICAgICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyByZWYgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgIGxldCBmaWxlcyA9IFtdO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgNTA7IGkrKykge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSB7XG4gICAgICAgICAgICAgICAga2V5OiBpLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0l0ZW0gJyArIGksXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApICsgMSArICdrYicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUeXBlICcgKyBpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGkgKyAnIC0gMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0l0ZW0gJyArIGkgKyAnIC0gMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxICsgJ2tiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVHlwZSAnICsgaVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZmlsZXMucHVzaChub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vZGVzID0gcmVmKGZpbGVzKTtcblxuICAgICAgICByZXR1cm4geyBub2RlcyB9XG4gICAgfVxufVxuPFxcL3NjcmlwdD5cbiIKICAgICAgICB9LAogICAgICAgICdicm93c2VyLXNvdXJjZSc6IHsKICAgICAgICAgIHRhYk5hbWU6ICdCcm93c2VyIFNvdXJjZScsCiAgICAgICAgICBpbXBvcnRzOiAiPHNjcmlwdCBzcmM9XCJodHRwczovL3VucGtnLmNvbS9wcmltZXZ1ZUBeMy90cmVldGFibGUvdHJlZXRhYmxlLm1pbi5qc1wiPjxcXC9zY3JpcHQ+XG4gICAgICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly91bnBrZy5jb20vcHJpbWV2dWVAXjMvY29sdW1uL2NvbHVtbi5taW4uanNcIj48XFwvc2NyaXB0PlxuICAgICAgICA8c2NyaXB0IHNyYz1cIi4vTm9kZVNlcnZpY2UuanNcIj48XFwvc2NyaXB0PiIsCiAgICAgICAgICBjb250ZW50OiAiPGRpdiBpZD1cImFwcFwiPlxuICAgICAgICAgICAgPHAtdHJlZXRhYmxlIDp2YWx1ZT1cIm5vZGVzXCIgOnBhZ2luYXRvcj1cInRydWVcIiA6cm93cz1cIjEwXCI+XG4gICAgICAgICAgICAgICAgPHAtY29sdW1uIGZpZWxkPVwibmFtZVwiIGhlYWRlcj1cIk5hbWVcIiA6ZXhwYW5kZXI9XCJ0cnVlXCI+PC9wLWNvbHVtbj5cbiAgICAgICAgICAgICAgICA8cC1jb2x1bW4gZmllbGQ9XCJzaXplXCIgaGVhZGVyPVwiU2l6ZVwiPjwvcC1jb2x1bW4+XG4gICAgICAgICAgICAgICAgPHAtY29sdW1uIGZpZWxkPVwidHlwZVwiIGhlYWRlcj1cIlR5cGVcIj48L3AtY29sdW1uPlxuICAgICAgICAgICAgPC9wLXRyZWV0YWJsZT5cbiAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICBcblxuICAgICAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIj5cbiAgICAgICAgY29uc3QgeyBjcmVhdGVBcHAsIHJlZiwgb25Nb3VudGVkIH0gPSBWdWU7XG5cbiAgICAgICAgY29uc3QgQXBwID0ge1xuICAgICAgICAgICAgc2V0dXAoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0l0ZW0gJyArIGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxICsgJ2tiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnVHlwZSAnICsgaVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGkgKyAnIC0gMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdJdGVtICcgKyBpICsgJyAtIDAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxICsgJ2tiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdUeXBlICcgKyBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgZmlsZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IHJlZihmaWxlcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyBub2RlcyB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgICAgIFwicC10cmVldGFibGVcIjogcHJpbWV2dWUudHJlZXRhYmxlLFxuICAgICAgICAgICAgICAgIFwicC1jb2x1bW5cIjogcHJpbWV2dWUuY29sdW1uXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY3JlYXRlQXBwKEFwcClcbiAgICAgICAgICAgIC51c2UocHJpbWV2dWUuY29uZmlnLmRlZmF1bHQpXG4gICAgICAgICAgICAubW91bnQoXCIjYXBwXCIpO1xuICAgICAgICA8XFwvc2NyaXB0PlxuIgogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB2YXIgZmlsZXMgPSBbXTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDUwOyBpKyspIHsKICAgICAgdmFyIG5vZGUgPSB7CiAgICAgICAga2V5OiBpLAogICAgICAgIGRhdGE6IHsKICAgICAgICAgIG5hbWU6ICdJdGVtICcgKyBpLAogICAgICAgICAgc2l6ZTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxICsgJ2tiJywKICAgICAgICAgIHR5cGU6ICdUeXBlICcgKyBpCiAgICAgICAgfSwKICAgICAgICBjaGlsZHJlbjogW3sKICAgICAgICAgIGtleTogaSArICcgLSAwJywKICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgbmFtZTogJ0l0ZW0gJyArIGkgKyAnIC0gMCcsCiAgICAgICAgICAgIHNpemU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDApICsgMSArICdrYicsCiAgICAgICAgICAgIHR5cGU6ICdUeXBlICcgKyBpCiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgZmlsZXMucHVzaChub2RlKTsKICAgIH0KCiAgICB0aGlzLm5vZGVzID0gZmlsZXM7CiAgfQp9Ow=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTablePaginatorDemo.vue"],"names":[],"mappings":"AAyBA,eAAe;AACX,EAAA,IADW,kBACJ;AACH,WAAO;AACH,MAAA,KAAK,EAAE,IADJ;AAEH,MAAA,OAAO,EAAE;AACL,uBAAe;AACX,UAAA,OAAO,EAAE,oBADE;AAEX,UAAA,OAAO;AAFI,SADV;AAoDL,2BAAmB;AACf,UAAA,OAAO,EAAE,wBADM;AAEf,UAAA,OAAO;AAFQ,SApDd;AAsGL,0BAAkB;AACd,UAAA,OAAO,EAAE,gBADK;AAEd,UAAA,OAAO,sOAFO;AAKd,UAAA,OAAO;AALO;AAtGb;AAFN,KAAP;AAoKH,GAtKU;AAuKX,EAAA,OAvKW,qBAuKD;AACN,QAAI,KAAI,GAAI,EAAZ;;AACA,SAAI,IAAI,CAAA,GAAI,CAAZ,EAAe,CAAA,GAAI,EAAnB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,UAAI,IAAG,GAAI;AACP,QAAA,GAAG,EAAE,CADE;AAEP,QAAA,IAAI,EAAE;AACF,UAAA,IAAI,EAAE,UAAU,CADd;AAEF,UAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAA3B,IAAmC,CAAnC,GAAuC,IAF3C;AAGF,UAAA,IAAI,EAAE,UAAU;AAHd,SAFC;AAOP,QAAA,QAAQ,EAAE,CACN;AACI,UAAA,GAAG,EAAE,CAAA,GAAI,MADb;AAEI,UAAA,IAAI,EAAE;AACF,YAAA,IAAI,EAAE,UAAU,CAAV,GAAc,MADlB;AAEF,YAAA,IAAI,EAAE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAA3B,IAAmC,CAAnC,GAAuC,IAF3C;AAGF,YAAA,IAAI,EAAE,UAAU;AAHd;AAFV,SADM;AAPH,OAAX;AAmBA,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACJ;;AAEA,SAAK,KAAL,GAAa,KAAb;AACJ;AAjMW,CAAf","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Paginator</span></h1>\n               <p>Pagination is enabled by setting paginator property to true and defining the rows attribute as the number of root level nodes per page.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\" :paginator=\"true\" :rows=\"10\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column field=\"size\" header=\"Size\"></Column>\n                    <Column field=\"type\" header=\"Type\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTablePaginatorDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTablePaginatorDemo.vue\" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :paginator=\"true\" :rows=\"10\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    created() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: 'Item ' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                    type: 'Type ' + i\n                },\n                children: [\n                    {\n                        key: i + ' - 0',\n                        data: {\n                            name: 'Item ' + i + ' - 0',\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                            type: 'Type ' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        this.nodes = files;\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :paginator=\"true\" :rows=\"10\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                 \n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n    setup() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: 'Item ' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                    type: 'Type ' + i\n                },\n                children: [\n                    {\n                        key: i + ' - 0',\n                        data: {\n                            name: 'Item ' + i + ' - 0',\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                            type: 'Type ' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        const nodes = ref(files);\n\n        return { nodes }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\" :paginator=\"true\" :rows=\"10\">\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column field=\"size\" header=\"Size\"></p-column>\n                <p-column field=\"type\" header=\"Type\"></p-column>\n            </p-treetable>\n        </div>                 \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                let files = [];\n                for(let i = 0; i < 50; i++) {\n                    let node = {\n                        key: i,\n                        data: {\n                            name: 'Item ' + i,\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                            type: 'Type ' + i\n                        },\n                        children: [\n                            {\n                                key: i + ' - 0',\n                                data: {\n                                    name: 'Item ' + i + ' - 0',\n                                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                    type: 'Type ' + i\n                                }\n                            }\n                        ]\n                    };\n\n                    files.push(node);\n                }\n\n                const nodes = ref(files);\n\n                return { nodes }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    created() {\n        let files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                key: i,\n                data: {\n                    name: 'Item ' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                    type: 'Type ' + i\n                },\n                children: [\n                    {\n                        key: i + ' - 0',\n                        data: {\n                            name: 'Item ' + i + ' - 0',\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                            type: 'Type ' + i\n                        }\n                    }\n                ]\n            };\n\n            files.push(node);\n        }\n\n        this.nodes = files;\n    }\n}\n</script>"],"sourceRoot":""}]}