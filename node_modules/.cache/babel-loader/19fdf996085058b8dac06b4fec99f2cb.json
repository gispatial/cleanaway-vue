{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue?vue&type=template&id=4c8252b4","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue","mtime":1634589566260},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div>\n\t\t<div class=\"content-section introduction\">\n\t\t\t<div class=\"feature-intro\">\n\t\t\t\t<h1>DataTable <span>Lazy</span></h1>\n\t\t\t\t<p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging, sorting and filtering happens.\n                    Sample belows imitates lazy paging by using an in memory list. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration\n                    so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist.\n                </p>\n\t\t\t</div>\n            <AppDemoActions />\n\t\t</div>\n\n\t\t<div class=\"content-section implementation\">\n            <div class=\"card\">\n                <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n                    :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n                    :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\" >\n                    <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                        </template>                    \n                    </Column>\n                    <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                        </template>\n                    </Column>\n                    <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                        </template>\n                    </Column>\n                    <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                        </template>\n                    </Column>\n                </DataTable>\n            </div>\n\t\t</div>\n \n        <AppDoc name=\"DataTableLazyDemo\" :sources=\"sources\" :service=\"['CustomerService']\" github=\"datatable/DataTableLazyDemo.vue\" />\n\t</div>\n</template>\n\n<script>\nimport CustomerService from '../../service/CustomerService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            filters: {\n                'name': {value: '', matchMode: 'contains'},\n                'country.name': {value: '', matchMode: 'contains'},\n                'company': {value: '', matchMode: 'contains'},\n                'representative.name': {value: '', matchMode: 'contains'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: 'name', header: 'Name'},\n                {field: 'country.name', header: 'Country'},\n                {field: 'company', header: 'Company'},\n                {field: 'representative.name', header: 'Representative'}\n            ],\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n\t<div>\n        <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n            :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n            :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\">\n            <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                </template>                    \n            </Column>\n            <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                </template>\n            </Column>\n            <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                </template>\n            </Column>\n            <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport CustomerService from './service/CustomerService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            filters: {\n                'name': {value: '', matchMode: 'contains'},\n                'country.name': {value: '', matchMode: 'contains'},\n                'company': {value: '', matchMode: 'contains'},\n                'representative.name': {value: '', matchMode: 'contains'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: 'name', header: 'Name'},\n                {field: 'country.name', header: 'Country'},\n                {field: 'company', header: 'Company'},\n                {field: 'representative.name', header: 'Representative'}\n            ]\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n        \n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers(\n                    {lazyEvent: JSON.stringify( this.lazyParams )})\n                        .then(data => {\n                            this.customers = data.customers;\n                            this.totalRecords = data.totalRecords;\n                            this.loading = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        }\n    }\n}\n<\\\\/script>                  \n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n\t<div>\n        <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n            :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n            :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\">\n            <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                </template>                    \n            </Column>\n            <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                </template>\n            </Column>\n            <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                </template>\n            </Column>\n            <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport CustomerService from './service/CustomerService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n        \n            lazyParams.value = {\n                first: 0,\n                rows: dt.value.rows,\n                sortField: null,\n                sortOrder: null,\n                filters: filters.value\n            };\n\n            loadLazyData();\n        })\n\n        const dt = ref();\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const customers = ref();\n        const customerService = ref(new CustomerService());\n        const filters = ref({\n            'name': {value: '', matchMode: 'contains'},\n            'country.name': {value: '', matchMode: 'contains'},\n            'company': {value: '', matchMode: 'contains'},\n            'representative.name': {value: '', matchMode: 'contains'},\n        });\n        const lazyParams = ref({});\n        const columns = ref([\n            {field: 'name', header: 'Name'},\n            {field: 'country.name', header: 'Country'},\n            {field: 'company', header: 'Company'},\n            {field: 'representative.name', header: 'Representative'}\n        ]);\n\n        const loadLazyData = () => {\n            loading.value = true;\n\n            setTimeout(() => {\n                customerService.value.getCustomers(\n                    {lazyEvent: JSON.stringify( lazyParams.value )})\n                        .then(data => {\n                            customers.value = data.customers;\n                            totalRecords.value  = data.totalRecords;\n                            loading.value = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        };\n        const onPage = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onSort = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onFilter = () => {\n            lazyParams.value.filters = filters.value ;\n            loadLazyData();\n        }\n\n        return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter }\n    }\n}\n<\\\\/script>                  \n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/datatable/datatable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"./CustomerService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-datatable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n                :total-records=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filter-display=\"row\"\n                :global-filter-fields=\"['name','country.name', 'company', 'representative.name']\" responsive-layout=\"scroll\">\n                <p-column field=\"name\" header=\"Name\" filter-match-mode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"></p-inputtext>\n                    </template>                    \n                </p-column>\n                <p-column field=\"country.name\" header=\"Country\" filter-field=\"country.name\" filter-match-mode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field=\"company\" header=\"Company\" filter-match-mode=\"contains\" ref=\"company\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field=\"representative.name\" header=\"Representative\" filter-field=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"></p-inputtext>\n                    </template>\n                </p-column>\n            </p-datatable>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n                \n                    lazyParams.value = {\n                        first: 0,\n                        rows: dt.value.rows,\n                        sortField: null,\n                        sortOrder: null,\n                        filters: filters.value\n                    };\n\n                    loadLazyData();\n                })\n\n                const dt = ref();\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const customers = ref();\n                const customerService = ref(new CustomerService());\n                const filters = ref({\n                    'name': {value: '', matchMode: 'contains'},\n                    'country.name': {value: '', matchMode: 'contains'},\n                    'company': {value: '', matchMode: 'contains'},\n                    'representative.name': {value: '', matchMode: 'contains'},\n                });\n                const lazyParams = ref({});\n                const columns = ref([\n                    {field: 'name', header: 'Name'},\n                    {field: 'country.name', header: 'Country'},\n                    {field: 'company', header: 'Company'},\n                    {field: 'representative.name', header: 'Representative'}\n                ]);\n\n                const loadLazyData = () => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        customerService.value.getCustomers(\n                            {lazyEvent: JSON.stringify( lazyParams.value )})\n                                .then(data => {\n                                    customers.value = data.customers;\n                                    totalRecords.value  = data.totalRecords;\n                                    loading.value = false;\n                            }\n                        );\n                    }, Math.random() * 1000 + 250);\n                };\n                const onPage = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onSort = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onFilter = () => {\n                    lazyParams.value.filters = filters.value ;\n                    loadLazyData();\n                }\n\n                return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter }\n            },\n            components: {\n                \"p-datatable\": primevue.datatable,\n                \"p-column\": primevue.column,\n                \"p-inputtext\": primevue.inputtext\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>                  \n`\n                }\n            }\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n        \n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers({lazyEvent: JSON.stringify( this.lazyParams )}).then(data => {\n                    this.customers = data.customers;\n                    this.totalRecords = data.totalRecords;\n                    this.loading = false;\n                });\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        }\n    }\n}\n</script>"],"sourceRoot":""}]}