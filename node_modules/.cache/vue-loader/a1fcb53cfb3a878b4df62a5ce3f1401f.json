{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeLazyDemo.vue?vue&type=style&index=0&id=739f4308&scoped=true&lang=css","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeLazyDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJ1dHRvbiB7CiAgICBtYXJnaW4tcmlnaHQ6IC41cmVtOwp9Cg=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeLazyDemo.vue"],"names":[],"mappings":";AAiUA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeLazyDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Lazy</span></h1>\n                <p>Lazy loading is handy when dealing with huge datasets. This example imitates a lazy loading case with timeouts.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <Tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeLazyDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeLazyDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <Tree :value=\"nodes\" @nodeExpand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n    </div>                   \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <Tree :value=\"nodes\" @nodeExpand=\"onNodeExpand\" :loading=\"loading\"></Tree>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                nodes.value = initateNodes();\n                loading.value = false;\n            }, 2000);\n        })\n\n        const loading = ref(false);\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const onNodeExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...nodes.value}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    nodes.value = _nodes;\n                    loading.value = false;\n                }, 500);\n            }\n        };\n\n        const initateNodes = () => {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n\n        return { loading, nodes, nodeService, onNodeExpand, initateNodes }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-tree :value=\"nodes\" @node-expand=\"onNodeExpand\" :loading=\"loading\"></p-tree>\n        </div>                   \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        nodes.value = initateNodes();\n                        loading.value = false;\n                    }, 2000);\n                })\n\n                const loading = ref(false);\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const onNodeExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let _node = {...node};\n                            _node.children = [];\n\n                            for (let i = 0; i < 3; i++) {\n                                _node.children.push({\n                                    key: node.key + '-' + i,\n                                    label: 'Lazy ' + node.label + '-' + i\n                                });\n                            }\n\n                            let _nodes = {...nodes.value}\n                            _nodes[parseInt(node.key, 10)] = _node;\n\n                            nodes.value = _nodes;\n                            loading.value = false;\n                        }, 500);\n                    }\n                };\n\n                const initateNodes = () => {\n                    return [{\n                        key: '0',\n                        label: 'Node 0',\n                        leaf: false\n                    },\n                    {\n                        key: '1',\n                        label: 'Node 1',\n                        leaf: false\n                    },\n                    {\n                        key: '2',\n                        label: 'Node 2',\n                        leaf: false\n                    }];\n                }\n\n                return { loading, nodes, nodeService, onNodeExpand, initateNodes }\n            },\n            components: {\n                \"p-tree\": primevue.tree\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.nodes = this.initateNodes();\n            this.loading = false;\n        }, 2000);\n    },\n    methods: {\n        onNodeExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let _node = {...node};\n                    _node.children = [];\n\n                    for (let i = 0; i < 3; i++) {\n                        _node.children.push({\n                            key: node.key + '-' + i,\n                            label: 'Lazy ' + node.label + '-' + i\n                        });\n                    }\n\n                    let _nodes = {...this.nodes}\n                    _nodes[parseInt(node.key, 10)] = _node;\n\n                    this.nodes = _nodes;\n                    this.loading = false;\n                }, 500);\n            }\n        },\n        initateNodes() {\n            return [{\n                key: '0',\n                label: 'Node 0',\n                leaf: false\n            },\n            {\n                key: '1',\n                label: 'Node 1',\n                leaf: false\n            },\n            {\n                key: '2',\n                label: 'Node 2',\n                leaf: false\n            }];\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"]}]}