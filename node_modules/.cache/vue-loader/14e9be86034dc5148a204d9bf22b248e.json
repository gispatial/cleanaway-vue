{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableResponsiveDemo.vue?vue&type=style&index=0&id=3706e084&scoped=true&lang=scss","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableResponsiveDemo.vue","mtime":1634589566292},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/sass-loader/dist/cjs.js","mtime":1634589727478},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zbS12aXNpYmxlIHsKICAgIGRpc3BsYXk6IG5vbmU7Cn0KCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQwZW0pIHsKICAgIDo6di1kZWVwKC5zbS1pbnZpc2libGUpIHsKICAgICAgICBkaXNwbGF5OiBub25lOwogICAgfQoKICAgIDo6di1kZWVwKC5zbS12aXNpYmxlKSB7CiAgICAgICAgZGlzcGxheTogaW5saW5lOwogICAgICAgIG1hcmdpbi1yaWdodDogLjVyZW07CiAgICB9Cn0K"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableResponsiveDemo.vue"],"names":[],"mappings":";AAoRA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;IAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB;AACJ","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableResponsiveDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable - Responsive</h1>\n                <p>TreeTable display can be optimized according for different screen sizes.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Scroll</h5>\n                <p>Built-in responsiveness using the <b>responsiveLayout</b> property set to scroll.</p>\n                <TreeTable :value=\"nodes\" responsiveLayout=\"scroll\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\" style=\"min-width:200px\"></Column>\n                    <Column field=\"size\" header=\"Size\" style=\"min-width:200px\"></Column>\n                    <Column field=\"type\" header=\"Type\" style=\"min-width:200px\"></Column>\n                </TreeTable>\n            </div>\n\n            <div class=\"card\">\n                <h5>Custom</h5>\n                <p>Custom implementation using media queries.</p>\n                <TreeTable :value=\"nodes\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\">\n                        <template #body=\"slotProps\">\n                            {{slotProps.node.data.name}}\n                            <span class=\"sm-visible\">{{slotProps.node.data.size}}</span>\n                            <span class=\"sm-visible\">{{slotProps.node.data.type}}</span>\n                        </template>\n                    </Column>\n                    <Column field=\"size\" header=\"Size\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n                    <Column field=\"type\" header=\"Type\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableResponsiveDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableResponsiveDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <div class=\"card\">\n            <h5>Scroll</h5>\n            <p>Built-in responsiveness using the <b>responsiveLayout</b> property set to scroll.</p>\n            <TreeTable :value=\"nodes\" responsiveLayout=\"scroll\">\n                <Column field=\"name\" header=\"Name\" :expander=\"true\" style=\"min-width:200px\"></Column>\n                <Column field=\"size\" header=\"Size\" style=\"min-width:200px\"></Column>\n                <Column field=\"type\" header=\"Type\" style=\"min-width:200px\"></Column>\n            </TreeTable>\n        </div>\n\n        <div class=\"card\">\n            <h5>Custom</h5>\n            <p>Custom implementation using media queries.</p>\n            <TreeTable :value=\"nodes\">\n                <Column field=\"name\" header=\"Name\" :expander=\"true\">\n                    <template #body=\"slotProps\">\n                        {{slotProps.node.data.name}}\n                        <span class=\"sm-visible\">{{slotProps.node.data.size}}</span>\n                        <span class=\"sm-visible\">{{slotProps.node.data.type}}</span>\n                    </template>\n                </Column>\n                <Column field=\"size\" header=\"Size\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n                <Column field=\"type\" header=\"Type\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n<\\\\/script>\n\n<style scoped lang=\"scss\">\n.sm-visible {\n    display: none;\n}\n\n@media screen and (max-width: 40em) {\n    ::v-deep(.sm-invisible) {\n        display: none;\n    }\n\n    ::v-deep(.sm-visible) {\n        display: inline;\n        margin-right: .5rem;\n    }\n}\n</style>`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <div class=\"card\">\n            <h5>Scroll</h5>\n            <p>Built-in responsiveness using the <b>responsiveLayout</b> property set to scroll.</p>\n            <TreeTable :value=\"nodes\" responsiveLayout=\"scroll\">\n                <Column field=\"name\" header=\"Name\" :expander=\"true\" style=\"min-width:200px\"></Column>\n                <Column field=\"size\" header=\"Size\" style=\"min-width:200px\"></Column>\n                <Column field=\"type\" header=\"Type\" style=\"min-width:200px\"></Column>\n            </TreeTable>\n        </div>\n\n        <div class=\"card\">\n            <h5>Custom</h5>\n            <p>Custom implementation using media queries.</p>\n            <TreeTable :value=\"nodes\">\n                <Column field=\"name\" header=\"Name\" :expander=\"true\">\n                    <template #body=\"slotProps\">\n                        {{slotProps.node.data.name}}\n                        <span class=\"sm-visible\">{{slotProps.node.data.size}}</span>\n                        <span class=\"sm-visible\">{{slotProps.node.data.type}}</span>\n                    </template>\n                </Column>\n                <Column field=\"size\" header=\"Size\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n                <Column field=\"type\" header=\"Type\" headerClass=\"sm-invisible\" bodyClass=\"sm-invisible\"></Column>\n            </TreeTable>\n        </div>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n\n        return { nodes, nodeService }\n    }\n}\n<\\\\/script>\n\n<style scoped lang=\"scss\">\n.sm-visible {\n    display: none;\n}\n\n@media screen and (max-width: 40em) {\n    ::v-deep(.sm-invisible) {\n        display: none;\n    }\n\n    ::v-deep(.sm-visible) {\n        display: inline;\n        margin-right: .5rem;\n    }\n}\n</style>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <div class=\"card\">\n                <h5>Scroll</h5>\n                <p>Built-in responsiveness using the <b>responsiveLayout</b> property set to scroll.</p>\n                <p-treetable :value=\"nodes\" responsive-layout=\"scroll\">\n                    <p-column field=\"name\" header=\"Name\" :expander=\"true\" style=\"min-width:200px\"></p-column>\n                    <p-column field=\"size\" header=\"Size\" style=\"min-width:200px\"></p-column>\n                    <p-column field=\"type\" header=\"Type\" style=\"min-width:200px\"></p-column>\n                </p-treetable>\n            </div>\n\n            <div class=\"card\">\n                <h5>Custom</h5>\n                <p>Custom implementation using media queries.</p>\n                <p-treetable :value=\"nodes\">\n                    <p-column field=\"name\" header=\"Name\" :expander=\"true\">\n                        <template #body=\"slotProps\">\n                            {{slotProps.node.data.name}}\n                            <span class=\"sm-visible\">{{slotProps.node.data.size}}</span>\n                            <span class=\"sm-visible\">{{slotProps.node.data.type}}</span>\n                        </template>\n                    </p-column>\n                    <p-column field=\"size\" header=\"Size\" header-class=\"sm-invisible\" body-class=\"sm-invisible\"></p-column>\n                    <p-column field=\"type\" header=\"Type\" header-class=\"sm-invisible\" body-class=\"sm-invisible\"></p-column>\n                </p-treetable>\n            </div>\n        </div>                    \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n\n                return { nodes, nodeService }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n\n        <style>\n        .sm-visible {\n            display: none;\n        }\n\n        @media screen and (max-width: 40em) {\n            .sm-invisible {\n                display: none;\n            }\n\n            .sm-visible {\n                display: inline;\n                margin-right: .5rem;\n            }\n        }\n        </style>`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.sm-visible {\n    display: none;\n}\n\n@media screen and (max-width: 40em) {\n    ::v-deep(.sm-invisible) {\n        display: none;\n    }\n\n    ::v-deep(.sm-visible) {\n        display: inline;\n        margin-right: .5rem;\n    }\n}\n</style>"]}]}