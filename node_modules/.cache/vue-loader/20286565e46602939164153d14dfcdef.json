{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue?vue&type=template&id=e7a9e980&scoped=true","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWludHJvIj4KICAgICAgICAgICAgICAgIDxoMT5UcmVlIDxzcGFuPkZpbHRlcjwvc3Bhbj48L2gxPgogICAgICAgICAgICAgICAgPHA+RmlsdGVyaW5nIHVwZGF0ZXMgdGhlIG5vZGUgYmFzZWQgb24gdGhlIGNvbnN0cmFpbnRzLjwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxBcHBEZW1vQWN0aW9ucyAvPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50LXNlY3Rpb24gaW1wbGVtZW50YXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgIDxoNT5MZW5pZW50IEZpbHRlcjwvaDU+CiAgICAgICAgICAgICAgICA8VHJlZSA6dmFsdWU9Im5vZGVzIiA6ZmlsdGVyPSJ0cnVlIiBmaWx0ZXJNb2RlPSJsZW5pZW50Ij48L1RyZWU+CgogICAgICAgICAgICAgICAgPGg1PlN0cmljdCBGaWx0ZXI8L2g1PgogICAgICAgICAgICAgICAgPFRyZWUgOnZhbHVlPSJub2RlcyIgOmZpbHRlcj0idHJ1ZSIgZmlsdGVyTW9kZT0ic3RyaWN0Ij48L1RyZWU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8QXBwRG9jIG5hbWU9IlRyZWVGaWx0ZXJEZW1vIiA6c291cmNlcz0ic291cmNlcyIgOnNlcnZpY2U9IlsnTm9kZVNlcnZpY2UnXSIgOmRhdGE9IlsndHJlZW5vZGVzJ10iIGdpdGh1Yj0idHJlZS9UcmVlRmlsdGVyRGVtby52dWUiIC8+CiAgICA8L2Rpdj4K"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC;QACA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;gBAE/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClxI,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeFilterDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Filter</span></h1>\n                <p>Filtering updates the node based on the constraints.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Lenient Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n                <h5>Strict Filter</h5>\n                <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeFilterDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeFilterDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {},\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            nodes: null,\n            expandedKeys: {}\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <h5>Lenient Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\"></Tree>\n\n        <h5>Strict Filter</h5>\n        <Tree :value=\"nodes\" :filter=\"true\" filterMode=\"strict\"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const expandedKeys = ref({});\n        const expandAll = () => {\n            for (let node of nodes.value) {\n                expandNode(node);\n            }\n\n            expandedKeys.value = {...expandedKeys.value};\n        };\n        const collapseAll = () => {\n            expandedKeys.value = {};\n        };\n        const expandNode = (node) => {\n            expandedKeys.value[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    expandNode(child);\n                }\n            }\n        };\n\n        return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <h5>Lenient Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"lenient\"></p-tree>\n\n            <h5>Strict Filter</h5>\n            <p-tree :value=\"nodes\" :filter=\"true\" filter-mode=\"strict\"></p-tree>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const expandedKeys = ref({});\n                const expandAll = () => {\n                    for (let node of nodes.value) {\n                        expandNode(node);\n                    }\n\n                    expandedKeys.value = {...expandedKeys.value};\n                };\n                const collapseAll = () => {\n                    expandedKeys.value = {};\n                };\n                const expandNode = (node) => {\n                    expandedKeys.value[node.key] = true;\n                    if (node.children && node.children.length) {\n                        for (let child of node.children) {\n                            expandNode(child);\n                        }\n                    }\n                };\n\n                return { nodes, nodeService, expandedKeys, expandAll, collapseAll, expandNode }\n            },\n            components: {\n                \"p-tree\": primevue.tree\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        expandAll() {\n            for (let node of this.nodes) {\n                this.expandNode(node);\n            }\n\n            this.expandedKeys = {...this.expandedKeys};\n        },\n        collapseAll() {\n            this.expandedKeys = {};\n        },\n        expandNode(node) {\n            this.expandedKeys[node.key] = true;\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.expandNode(child);\n                }\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"]}]}