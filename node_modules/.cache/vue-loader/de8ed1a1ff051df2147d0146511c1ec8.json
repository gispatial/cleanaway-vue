{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue?vue&type=style&index=0&id=e6522e4c&scoped=true&lang=css","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue","mtime":1634589566290},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJ1dHRvbiB7CiAgICBtYXJnaW4tcmlnaHQ6IC41cmVtOwp9Cg=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue"],"names":[],"mappings":";AAuPA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/tree/TreeSelectionDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Tree <span>Selection</span></h1>\n                <p>Tree supports <b>single</b>, <b>multiple</b> and <b>checkbox</b> as selection modes.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <h5>Single Selection</h5>\n                <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n                <h5>Multiple Selection with MetaKey</h5>\n                <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n                <h5>Multiple Selection without MetaKey</h5>\n                <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n                <h5>Checkbox Selection</h5>\n                <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n                <h5>Events</h5>\n                <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n                    @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></Tree>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeSelectionDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treenodes']\" github=\"tree/TreeSelectionDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n            @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\"></Tree>\n    </div>\n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedKey1: null,\n            selectedKey2: null,\n            selectedKeys1: null,\n            selectedKeys2: null,\n            selectedKeys3: null,\n            nodes: null\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <Toast />\n\n        <h5>Single Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey1\"></Tree>\n\n        <h5>Multiple Selection with MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys1\"></Tree>\n\n        <h5>Multiple Selection without MetaKey</h5>\n        <Tree :value=\"nodes\" selectionMode=\"multiple\" v-model:selectionKeys=\"selectedKeys2\" :metaKeySelection=\"false\"></Tree>\n\n        <h5>Checkbox Selection</h5>\n        <Tree :value=\"nodes\" selectionMode=\"checkbox\" v-model:selectionKeys=\"selectedKeys3\"></Tree>\n\n        <h5>Events</h5>\n        <Tree :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedKey2\" :metaKeySelection=\"false\"\n            @nodeSelect=\"onNodeSelect\" @nodeUnselect=\"onNodeUnselect\"></Tree>\n    </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport { useToast } from 'primevue/usetoast';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeNodes().then(data => nodes.value = data);\n        })\n\n        const toast = useToast();\n        const selectedKey1 = ref(null);\n        const selectedKey2 = ref(null);\n        const selectedKeys1 = ref(null);\n        const selectedKeys2 = ref(null);\n        const selectedKeys3 = ref(null);\n        const nodes = ref(null);\n        const nodeService = ref(new NodeService());\n        const onNodeSelect = (node) => {\n            toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        };\n        const onNodeUnselect = (node) => {\n            toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        };\n\n        return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n    }\n}\n<\\\\/script>`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/toast/toast.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/toastservice/toastservice.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-toast></p-toast>\n\n            <h5>Single Selection</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"single\" v-model:selection-keys=\"selectedKey1\"></p-tree>\n\n            <h5>Multiple Selection with MetaKey</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"multiple\" v-model:selection-keys=\"selectedKeys1\"></p-tree>\n\n            <h5>Multiple Selection without MetaKey</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"multiple\" v-model:selection-keys=\"selectedKeys2\" :meta-key-selection=\"false\"></p-tree>\n\n            <h5>Checkbox Selection</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"checkbox\" v-model:selection-keys=\"selectedKeys3\"></p-tree>\n\n            <h5>Events</h5>\n            <p-tree :value=\"nodes\" selection-mode=\"single\" v-model:selection-keys=\"selectedKey2\" :meta-key-delection=\"false\"\n                @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\"></p-tree>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n        const { useToast } = primevue.usetoast;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeNodes().then(data => nodes.value = data);\n                })\n\n                const toast = useToast();\n                const selectedKey1 = ref(null);\n                const selectedKey2 = ref(null);\n                const selectedKeys1 = ref(null);\n                const selectedKeys2 = ref(null);\n                const selectedKeys3 = ref(null);\n                const nodes = ref(null);\n                const nodeService = ref(new NodeService());\n                const onNodeSelect = (node) => {\n                    toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n                };\n                const onNodeUnselect = (node) => {\n                    toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n                };\n\n                return { selectedKey1, selectedKey2, selectedKeys1, selectedKeys2, selectedKeys3, nodes, nodeService, onNodeSelect, onNodeUnselect }\n            },\n            components: {\n                \"p-tree\": primevue.tree,\n                \"p-toast\": primevue.toast\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .use(primevue.toastservice)\n            .mount(\"#app\");\n        <\\\\/script>`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n    },\n    mounted() {\n        this.nodeService.getTreeNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onNodeSelect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Selected', detail: node.label, life: 3000});\n        },\n        onNodeUnselect(node) {\n            this.$toast.add({severity:'success', summary: 'Node Unselected', detail: node.label, life: 3000});\n        }\n    }\n}\n</script>\n\n<style scoped>\nbutton {\n    margin-right: .5rem;\n}\n</style>"]}]}