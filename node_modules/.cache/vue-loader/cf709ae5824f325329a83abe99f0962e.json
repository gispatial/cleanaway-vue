{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/validation/VuelidateFormDemo.vue?vue&type=style&index=0&id=d8126908&lang=scss&scoped=true","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/validation/VuelidateFormDemo.vue","mtime":1634589566293},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/sass-loader/dist/cjs.js","mtime":1634589727478},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5mb3JtLWRlbW8gewogICAgLmNhcmQgewogICAgICAgIG1pbi13aWR0aDogNDUwcHg7CgogICAgICAgIGZvcm0gewogICAgICAgICAgICBtYXJnaW4tdG9wOiAycmVtOwogICAgICAgIH0KCiAgICAgICAgLnAtZmllbGQgewogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxLjVyZW07CiAgICAgICAgfQogICAgfQoKICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDk2MHB4KSB7CiAgICAgICAgLmNhcmQgewogICAgICAgICAgICB3aWR0aDogODAlOwogICAgICAgIH0KICAgIH0KfQoK"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/validation/VuelidateFormDemo.vue"],"names":[],"mappings":";AA+hBA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACP,CAAC,CAAC,CAAC,CAAC,EAAE;QACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEhB,CAAC,CAAC,CAAC,EAAE;YACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpB;;QAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB;IACJ;;IAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACjC,CAAC,CAAC,CAAC,CAAC,EAAE;YACF,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACd;IACJ;AACJ","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/validation/VuelidateFormDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>Vuelidate</h1>\n                <p>PrimeVue components can be easily used/integrated with <a href=\"https://vuelidate.js.org/\">Vuelidate</a>. In this example, a register panel is simulated using Vuelidate.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation form-demo\">\n            <Dialog v-model:visible=\"showMessage\" :breakpoints=\"{ '960px': '80vw' }\" :style=\"{ width: '30vw' }\" position=\"top\">\n                <div class=\"p-d-flex p-ai-center p-dir-col p-pt-6 p-px-3\">\n                    <i class=\"pi pi-check-circle\" :style=\"{fontSize: '5rem', color: 'var(--green-500)' }\"></i>\n                    <h5>Registration Successful!</h5>\n                    <p :style=\"{lineHeight: 1.5, textIndent: '1rem'}\">\n                        Your account is registered under name <b>{{name}}</b> ; it'll be valid next 30 days without activation. Please check <b>{{email}}</b> for activation instructions.\n                    </p>\n                </div>\n                <template #footer>\n                    <div class=\"p-d-flex p-jc-center\">\n                        <Button label=\"OK\" @click=\"toggleDialog\" class=\"p-button-text\" />\n                    </div>\n                </template>\n            </Dialog>\n\n            <div class=\"p-d-flex p-jc-center\">\n                <div class=\"card\">\n                    <h5 class=\"p-text-center\">Register</h5>\n                    <form @submit.prevent=\"handleSubmit(!v$.$invalid)\" class=\"p-fluid\">\n                        <div class=\"p-field\">\n                            <div class=\"p-float-label\">\n                                <InputText id=\"name\" v-model=\"v$.name.$model\" :class=\"{'p-invalid':v$.name.$invalid && submitted}\" />\n                                <label for=\"name\" :class=\"{'p-error':v$.name.$invalid && submitted}\">Name*</label>\n                            </div>\n                            <small v-if=\"(v$.name.$invalid && submitted) || v$.name.$pending.$response\" class=\"p-error\">{{v$.name.required.$message.replace('Value', 'Name')}}</small>\n                        </div>\n                        <div class=\"p-field\">\n                            <div class=\"p-float-label p-input-icon-right\">\n                                <i class=\"pi pi-envelope\" />\n                                <InputText id=\"email\" v-model=\"v$.email.$model\" :class=\"{'p-invalid':v$.email.$invalid && submitted}\" aria-describedby=\"email-error\"/>\n                                <label for=\"email\" :class=\"{'p-error':v$.email.$invalid && submitted}\">Email*</label>\n                            </div>\n                            <span v-if=\"v$.email.$error && submitted\">\n                                <span id=\"email-error\" v-for=\"(error, index) of v$.email.$errors\" :key=\"index\">\n                                <small class=\"p-error\">{{error.$message}}</small>\n                                </span>\n                            </span>\n                            <small v-else-if=\"(v$.email.$invalid && submitted) || v$.email.$pending.$response\" class=\"p-error\">{{v$.email.required.$message.replace('Value', 'Email')}}</small>\n                        </div>\n                        <div class=\"p-field\">\n                            <div class=\"p-float-label\">\n                                <Password id=\"password\" v-model=\"v$.password.$model\" :class=\"{'p-invalid':v$.password.$invalid && submitted}\" toggleMask>\n                                    <template #header>\n                                        <h6>Pick a password</h6>\n                                    </template>\n                                    <template #footer=\"sp\">\n                                        {{sp.level}}\n                                        <Divider />\n                                        <p class=\"p-mt-2\">Suggestions</p>\n                                        <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                                            <li>At least one lowercase</li>\n                                            <li>At least one uppercase</li>\n                                            <li>At least one numeric</li>\n                                            <li>Minimum 8 characters</li>\n                                        </ul>\n                                    </template>\n                                </Password>\n                                <label for=\"password\" :class=\"{'p-error':v$.password.$invalid && submitted}\">Password*</label>\n                            </div>\n                            <small v-if=\"(v$.password.$invalid && submitted) || v$.password.$pending.$response\" class=\"p-error\">{{v$.password.required.$message.replace('Value', 'Password')}}</small>\n                        </div>\n                        <div class=\"p-field\">\n                            <div class=\"p-float-label\">\n                                <Calendar id=\"date\" v-model=\"date\" :showIcon=\"true\" />\n                                <label for=\"date\">Birthday</label>\n                            </div>\n                        </div>\n                        <div class=\"p-field\">\n                            <div class=\"p-float-label\">\n                                <Dropdown id=\"country\" v-model=\"country\" :options=\"countries\" optionLabel=\"name\" />\n                                <label for=\"country\">Country</label>\n                            </div>\n                        </div>\n                        <div class=\"p-field-checkbox\">\n                            <Checkbox id=\"accept\" name=\"accept\" value=\"Accept\" v-model=\"v$.accept.$model\" :class=\"{'p-invalid':v$.accept.$invalid && submitted}\" />\n                            <label for=\"accept\" :class=\"{'p-error': v$.accept.$invalid && submitted}\">I agree to the terms and conditions*</label>\n                        </div>\n                        <Button type=\"submit\" label=\"Submit\" class=\"p-mt-2\" />\n                    </form>\n                </div>\n            </div>\n        </div>\n\n        <AppDoc name=\"VuelidateFormDemo\" :sources=\"sources\" :service=\"['CountryService']\" :data=\"['countries']\" github=\"validation/VuelidateFormDemo.vue\"\n            :dependencies=\"{'@vuelidate/core': '^2.0.0-alpha.14', '@vuelidate/validators': '^2.0.0-alpha.12'}\"/>\n\n    </div>\n</template>\n\n<script>\nimport { email, required } from \"@vuelidate/validators\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport CountryService from '../../service/CountryService';\n\nexport default {\n    setup: () => ({ v$: useVuelidate() }),\n    data() {\n        return {\n            name: '',\n            email: '',\n            password: '',\n            date: null,\n            country: null,\n            accept: null,\n            submitted: false,\n            countries: null,\n            showMessage: false,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div class=\"form-demo\">\n        <Dialog v-model:visible=\"showMessage\" :breakpoints=\"{ '960px': '80vw' }\" :style=\"{ width: '30vw' }\" position=\"top\">\n            <div class=\"p-d-flex p-ai-center p-dir-col p-pt-6 p-px-3\">\n                <i class=\"pi pi-check-circle\" :style=\"{fontSize: '5rem', color: 'var(--green-500)' }\"></i>\n                <h5>Registration Successful!</h5>\n                <p :style=\"{lineHeight: 1.5, textIndent: '1rem'}\">\n                    Your account is registered under name <b>{{name}}</b> ; it'll be valid next 30 days without activation. Please check <b>{{email}}</b> for activation instructions.\n                </p>\n            </div>\n            <template #footer>\n                <div class=\"p-d-flex p-jc-center\">\n                    <Button label=\"OK\" @click=\"toggleDialog\" class=\"p-button-text\" />\n                </div>\n            </template>\n        </Dialog>\n\n        <div class=\"p-d-flex p-jc-center\">\n            <div class=\"card\">\n                <h5 class=\"p-text-center\">Register</h5>\n                <form @submit.prevent=\"handleSubmit(!v$.$invalid)\" class=\"p-fluid\">\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <InputText id=\"name\" v-model=\"v$.name.$model\" :class=\"{'p-invalid':v$.name.$invalid && submitted}\" />\n                            <label for=\"name\" :class=\"{'p-error':v$.name.$invalid && submitted}\">Name*</label>\n                        </div>\n                        <small v-if=\"(v$.name.$invalid && submitted) || v$.name.$pending.$response\" class=\"p-error\">{{v$.name.required.$message.replace('Value', 'Name')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label p-input-icon-right\">\n                            <i class=\"pi pi-envelope\" />\n                            <InputText id=\"email\" v-model=\"v$.email.$model\" :class=\"{'p-invalid':v$.email.$invalid && submitted}\" aria-describedby=\"email-error\"/>\n                            <label for=\"email\" :class=\"{'p-error':v$.email.$invalid && submitted}\">Email*</label>\n                        </div>\n                        <span v-if=\"v$.email.$error && submitted\">\n                            <span id=\"email-error\" v-for=\"(error, index) of v$.email.$errors\" :key=\"index\">\n                            <small class=\"p-error\">{{error.$message}}</small>\n                            </span>\n                        </span>\n                        <small v-else-if=\"(v$.email.$invalid && submitted) || v$.email.$pending.$response\" class=\"p-error\">{{v$.email.required.$message.replace('Value', 'Email')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Password id=\"password\" v-model=\"v$.password.$model\" :class=\"{'p-invalid':v$.password.$invalid && submitted}\" toggleMask>\n                                <template #header>\n                                    <h6>Pick a password</h6>\n                                </template>\n                                <template #footer=\"sp\">\n                                    {{sp.level}}\n                                    <Divider />\n                                    <p class=\"p-mt-2\">Suggestions</p>\n                                    <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                                        <li>At least one lowercase</li>\n                                        <li>At least one uppercase</li>\n                                        <li>At least one numeric</li>\n                                        <li>Minimum 8 characters</li>\n                                    </ul>\n                                </template>\n                            </Password>\n                            <label for=\"password\" :class=\"{'p-error':v$.password.$invalid && submitted}\">Password*</label>\n                        </div>\n                        <small v-if=\"(v$.password.$invalid && submitted) || v$.password.$pending.$response\" class=\"p-error\">{{v$.password.required.$message.replace('Value', 'Password')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Calendar id=\"date\" v-model=\"date\" :showIcon=\"true\" />\n                            <label for=\"date\">Birthday</label>\n                        </div>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Dropdown id=\"country\" v-model=\"country\" :options=\"countries\" optionLabel=\"name\" />\n                            <label for=\"country\">Country</label>\n                        </div>\n                    </div>\n                    <div class=\"p-field-checkbox\">\n                        <Checkbox id=\"accept\" name=\"accept\" value=\"Accept\" v-model=\"v$.accept.$model\" :class=\"{'p-invalid':v$.accept.$invalid && submitted}\" />\n                        <label for=\"accept\" :class=\"{'p-error': v$.accept.$invalid && submitted}\">I agree to the terms and conditions*</label>\n                    </div>\n                    <Button type=\"submit\" label=\"Submit\" class=\"p-mt-2\" />\n                </form>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { email, required } from \"@vuelidate/validators\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport CountryService from './service/CountryService';\n\nexport default {\n    setup: () => ({ v$: useVuelidate() }),\n    data() {\n        return {\n            name: '',\n            email: '',\n            password: '',\n            date: null,\n            country: null,\n            accept: null,\n            submitted: false,\n            countries: null,\n            showMessage: false\n        }\n    },\n    countryService: null,\n    validations() {\n        return {\n            name: {\n                required\n            },\n            email: {\n                required,\n                email\n            },\n            password: {\n                required\n            },\n            accept: {\n                required\n            }\n        }\n    },\n    created() {\n        this.countryService = new CountryService();\n    },\n    mounted() {\n        this.countryService.getCountries().then(data => this.countries = data);\n    },\n    methods: {\n        handleSubmit(isFormValid) {\n            this.submitted = true;\n\n            if (!isFormValid) {\n                return;\n            }\n\n            this.toggleDialog();\n        },\n        toggleDialog() {\n            this.showMessage = !this.showMessage;\n        \n            if(!this.showMessage) {\n                this.resetForm();\n            }\n        },\n        resetForm() {\n            this.name = '';\n            this.email = '';\n            this.password = '';\n            this.date = null;\n            this.country = null;\n            this.accept = null;\n            this.submitted = false;\n        }\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\n.form-demo {\n    .card {\n        min-width: 450px;\n\n        form {\n            margin-top: 2rem;\n        }\n\n        .p-field {\n            margin-bottom: 1.5rem;\n        }\n    }\n\n    @media screen and (max-width: 960px) {\n        .card {\n            width: 80%;\n        }\n    }\n}\n\n</style>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div class=\"form-demo\">\n        <Dialog v-model:visible=\"showMessage\" :breakpoints=\"{ '960px': '80vw' }\" :style=\"{ width: '30vw' }\" position=\"top\">\n            <div class=\"p-d-flex p-ai-center p-dir-col p-pt-6 p-px-3\">\n                <i class=\"pi pi-check-circle\" :style=\"{fontSize: '5rem', color: 'var(--green-500)' }\"></i>\n                <h5>Registration Successful!</h5>\n                <p :style=\"{lineHeight: 1.5, textIndent: '1rem'}\">\n                    Your account is registered under name <b>{{state.name}}</b> ; it'll be valid next 30 days without activation. Please check <b>{{state.email}}</b> for activation instructions.\n                </p>\n            </div>\n            <template #footer>\n                <div class=\"p-d-flex p-jc-center\">\n                    <Button label=\"OK\" @click=\"toggleDialog\" class=\"p-button-text\" />\n                </div>\n            </template>\n        </Dialog>\n\n        <div class=\"p-d-flex p-jc-center\">\n            <div class=\"card\">\n                <h5 class=\"p-text-center\">Register</h5>\n                <form @submit.prevent=\"handleSubmit(!v$.$invalid)\" class=\"p-fluid\">\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <InputText id=\"name\" v-model=\"v$.name.$model\" :class=\"{'p-invalid':v$.name.$invalid && submitted}\" />\n                            <label for=\"name\" :class=\"{'p-error':v$.name.$invalid && submitted}\">Name*</label>\n                        </div>\n                        <small v-if=\"(v$.name.$invalid && submitted) || v$.name.$pending.$response\" class=\"p-error\">{{v$.name.required.$message.replace('Value', 'Name')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label p-input-icon-right\">\n                            <i class=\"pi pi-envelope\" />\n                            <InputText id=\"email\" v-model=\"v$.email.$model\" :class=\"{'p-invalid':v$.email.$invalid && submitted}\" aria-describedby=\"email-error\"/>\n                            <label for=\"email\" :class=\"{'p-error':v$.email.$invalid && submitted}\">Email*</label>\n                        </div>\n                        <span v-if=\"v$.email.$error && submitted\">\n                            <span id=\"email-error\" v-for=\"(error, index) of v$.email.$errors\" :key=\"index\">\n                            <small class=\"p-error\">{{error.$message}}</small>\n                            </span>\n                        </span>\n                        <small v-else-if=\"(v$.email.$invalid && submitted) || v$.email.$pending.$response\" class=\"p-error\">{{v$.email.required.$message.replace('Value', 'Email')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Password id=\"password\" v-model=\"v$.password.$model\" :class=\"{'p-invalid':v$.password.$invalid && submitted}\" toggleMask>\n                                <template #header>\n                                    <h6>Pick a password</h6>\n                                </template>\n                                <template #footer=\"sp\">\n                                    {{sp.level}}\n                                    <Divider />\n                                    <p class=\"p-mt-2\">Suggestions</p>\n                                    <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                                        <li>At least one lowercase</li>\n                                        <li>At least one uppercase</li>\n                                        <li>At least one numeric</li>\n                                        <li>Minimum 8 characters</li>\n                                    </ul>\n                                </template>\n                            </Password>\n                            <label for=\"password\" :class=\"{'p-error':v$.password.$invalid && submitted}\">Password*</label>\n                        </div>\n                        <small v-if=\"(v$.password.$invalid && submitted) || v$.password.$pending.$response\" class=\"p-error\">{{v$.password.required.$message.replace('Value', 'Password')}}</small>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Calendar id=\"date\" v-model=\"date\" :showIcon=\"true\" />\n                            <label for=\"date\">Birthday</label>\n                        </div>\n                    </div>\n                    <div class=\"p-field\">\n                        <div class=\"p-float-label\">\n                            <Dropdown id=\"country\" v-model=\"country\" :options=\"countries\" optionLabel=\"name\" />\n                            <label for=\"country\">Country</label>\n                        </div>\n                    </div>\n                    <div class=\"p-field-checkbox\">\n                        <Checkbox id=\"accept\" name=\"accept\" value=\"Accept\" v-model=\"v$.accept.$model\" :class=\"{'p-invalid':v$.accept.$invalid && submitted}\" />\n                        <label for=\"accept\" :class=\"{'p-error': v$.accept.$invalid && submitted}\">I agree to the terms and conditions*</label>\n                    </div>\n                    <Button type=\"submit\" label=\"Submit\" class=\"p-mt-2\" />\n                </form>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { reactive, ref, onMounted } from 'vue';\nimport { email, required } from \"@vuelidate/validators\";\nimport { useVuelidate } from \"@vuelidate/core\";\nimport CountryService from './service/CountryService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            countryService.value.getCountries().then(data => countries.value = data);\n        })\n\n        const state = reactive({\n            name: '',\n            email: '',\n            password: '',\n            accept: null\n        });\n\n        const rules = {\n            name: { required },\n            email: { required, email },\n            password: { required },\n            accept: { required }\n        };\n\n        const countryService = ref(new CountryService());\n        const submitted = ref(false);\n        const countries = ref();\n        const showMessage = ref(false);\n        const date = ref();\n        const country = ref();\n\n        const v$ = useVuelidate(rules, state);\n\n        const handleSubmit = (isFormValid) => {\n            submitted.value = true;\n\n            if (!isFormValid) {\n                return;\n            }\n\n            toggleDialog();\n        }\n        const toggleDialog = () => {\n            showMessage.value = !showMessage.value;\n        \n            if(!showMessage.value) {\n                resetForm();\n            }\n        }\n        const resetForm = () => {\n            state.name = '';\n            state.email = '';\n            state.password = '';\n            state.date = null;\n            state.country = null;\n            state.accept = null;\n            submitted.value = false;\n        }\n\n        return { state, v$, handleSubmit, toggleDialog, submitted, countries, showMessage, date, country }\n    }\n}\n<\\\\/script>\n\n<style lang=\"scss\" scoped>\n.form-demo {\n    .card {\n        min-width: 450px;\n\n        form {\n            margin-top: 2rem;\n        }\n\n        .p-field {\n            margin-bottom: 1.5rem;\n        }\n    }\n\n    @media screen and (max-width: 960px) {\n        .card {\n            width: 80%;\n        }\n    }\n}\n\n</style>\n`\n                }\n            }\n        }\n    },\n    countryService: null,\n    validations() {\n        return {\n            name: {\n                required\n            },\n            email: {\n                required,\n                email\n            },\n            password: {\n                required\n            },\n            accept: {\n                required\n            }\n        }\n    },\n    created() {\n        this.countryService = new CountryService();\n    },\n    mounted() {\n        this.countryService.getCountries().then(data => this.countries = data);\n    },\n    methods: {\n        handleSubmit(isFormValid) {\n            this.submitted = true;\n\n            if (!isFormValid) {\n                return;\n            }\n\n            this.toggleDialog();\n        },\n        toggleDialog() {\n            this.showMessage = !this.showMessage;\n\n            if(!this.showMessage) {\n                this.resetForm();\n            }\n        },\n        resetForm() {\n            this.name = '';\n            this.email = '';\n            this.password = '';\n            this.date = null;\n            this.country = null;\n            this.accept = null;\n            this.submitted = false;\n        }\n    }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.form-demo {\n    .card {\n        min-width: 450px;\n\n        form {\n            margin-top: 2rem;\n        }\n\n        .p-field {\n            margin-bottom: 1.5rem;\n        }\n    }\n\n    @media screen and (max-width: 960px) {\n        .card {\n            width: 80%;\n        }\n    }\n}\n\n</style>"]}]}