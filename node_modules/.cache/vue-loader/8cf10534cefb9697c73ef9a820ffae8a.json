{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treeselect/TreeSelect.vue?vue&type=style&index=0&id=67c7920f&lang=css","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treeselect/TreeSelect.vue","mtime":1634589566242},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wLXRyZWVzZWxlY3QgewogICAgZGlzcGxheTogaW5saW5lLWZsZXg7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICB1c2VyLXNlbGVjdDogbm9uZTsKfQoKLnAtdHJlZXNlbGVjdC10cmlnZ2VyIHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICBmbGV4LXNocmluazogMDsKfQoKLnAtdHJlZXNlbGVjdC1sYWJlbC1jb250YWluZXIgewogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgY3Vyc29yOiBwb2ludGVyOwp9CgoucC10cmVlc2VsZWN0LWxhYmVsICB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7Cn0KCi5wLXRyZWVzZWxlY3QtbGFiZWwtZW1wdHkgewogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIHZpc2liaWxpdHk6IGhpZGRlbjsKfQoKLnAtdHJlZXNlbGVjdC10b2tlbiB7CiAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBmbGV4OiAwIDAgYXV0bzsKfQoKLnAtdHJlZXNlbGVjdCAucC10cmVlc2VsZWN0LXBhbmVsIHsKICAgIG1pbi13aWR0aDogMTAwJTsKfQoKLnAtdHJlZXNlbGVjdC1wYW5lbCB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDA7CiAgICBsZWZ0OiAwOwp9CgoucC10cmVlc2VsZWN0LWl0ZW1zLXdyYXBwZXIgewogICAgb3ZlcmZsb3c6IGF1dG87Cn0KCi5wLWZsdWlkIC5wLXRyZWVzZWxlY3QgewogICAgZGlzcGxheTogZmxleDsKfQo="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treeselect/TreeSelect.vue"],"names":[],"mappings":"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","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/treeselect/TreeSelect.vue","sourceRoot":"","sourcesContent":["<template>\n    <div ref=\"container\" :class=\"containerClass\" @click=\"onClick\">\n        <div class=\"p-hidden-accessible\">\n            <input ref=\"focusInput\" type=\"text\" role=\"listbox\" :id=\"inputId\" readonly :disabled=\"disabled\" @focus=\"onFocus\" @blur=\"onBlur\" @keydown=\"onKeyDown\" :tabindex=\"tabindex\"\n                aria-haspopup=\"true\" :aria-expanded=\"overlayVisible\" :aria-labelledby=\"ariaLabelledBy\"/>\n        </div>\n        <div class=\"p-treeselect-label-container\">\n            <div :class=\"labelClass\">\n                <slot name=\"value\" :value=\"selectedNodes\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{label || 'empty'}}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <div v-for=\"node of selectedNodes\" class=\"p-treeselect-token\" :key=\"node.key\">\n                            <span class=\"p-treeselect-token-label\">{{node.label}}</span>\n                        </div>\n                        <template v-if=\"emptyValue\">{{placeholder || 'empty'}}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div class=\"p-treeselect-trigger\">\n            <slot name=\"indicator\">\n                <span class=\"p-treeselect-trigger-icon pi pi-chevron-down\"></span>\n            </slot>\n        </div>\n        <Teleport :to=\"appendTarget\" :disabled=\"appendDisabled\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\">\n                <div :ref=\"overlayRef\" v-if=\"overlayVisible\" @click=\"onOverlayClick\" :class=\"panelStyleClass\">\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"options\"></slot>\n                    <div class=\"p-treeselect-items-wrapper\" :style=\"{'max-height': scrollHeight}\">\n                        <TSTree :value=\"options\" :selectionMode=\"selectionMode\" @update:selectionKeys=\"onSelectionChange\" :selectionKeys=\"modelValue\"\n                            :expandedKeys=\"expandedKeys\" @update:expandedKeys=\"onNodeToggle\" :metaKeySelection=\"metaKeySelection\"\n                            @node-expand=\"$emit('node-expand', $event)\" @node-collapse=\"$emit('node-collapse', $event)\"\n                            @node-select=\"onNodeSelect\" @node-unselect=\"onNodeUnselect\" />\n                        <div v-if=\"emptyOptions\" class=\"p-treeselect-empty-message\">\n                            <slot name=\"empty\">{{emptyMessageText}}</slot>\n                        </div>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"options\"></slot>\n                </div>\n            </transition>\n        </Teleport>\n    </div>\n</template>\n\n<script>\nimport {ConnectedOverlayScrollHandler,DomHandler,ZIndexUtils} from 'primevue/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Tree from 'primevue/tree';\nimport Ripple from 'primevue/ripple';\n\nexport default {\n    name: 'TreeSelect',\n    emits: ['update:modelValue', 'before-show', 'before-hide', 'change', 'show', 'hide', 'node-select', 'node-unselect', 'node-expand', 'node-collapse'],\n    props: {\n        modelValue: null,\n        options: Array,\n\t\tscrollHeight: {\n\t\t\ttype: String,\n\t\t\tdefault: '400px'\n\t\t},\n\t\tplaceholder: String,\n\t\tdisabled: Boolean,\n        tabindex: String,\n        inputId: String,\n        ariaLabelledBy: null,\n        selectionMode: {\n            type: String,\n            default: 'single'\n        },\n        panelClass: {\n            type: String,\n            default: null\n        },\n        appendTo: {\n            type: String,\n            default: 'body'\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: true\n        }\n    },\n    watch: {\n        modelValue: {\n            handler: function() {\n                if (!this.selfChange) {\n                    this.updateTreeState();\n                }\n                this.selfChange = false;\n            },\n            immediate: true\n        },\n        options() {\n            this.updateTreeState();\n        }\n    },\n    data() {\n        return {\n            focused: false,\n            overlayVisible: false,\n            expandedKeys: {}\n        };\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    selfChange: false,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndexUtils.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    mounted() {\n        this.updateTreeState();\n    },\n    methods: {\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n        },\n        onFocus() {\n            this.focused = true;\n        },\n        onBlur() {\n            this.focused = false;\n        },\n        onClick(event) {\n            if (!this.disabled && (!this.overlay || !this.overlay.contains(event.target)) && !DomHandler.hasClass(event.target, 'p-treeselect-close')) {\n                if (this.overlayVisible)\n                    this.hide();\n                else\n                    this.show();\n\n                this.$refs.focusInput.focus();\n            }\n        },\n        onSelectionChange(keys) {\n            this.selfChange = true;\n            this.$emit('update:modelValue', keys);\n            this.$emit('change', keys);\n        },\n        onNodeSelect(node) {\n            this.$emit('node-select', node);\n\n            if (this.selectionMode === 'single') {\n                this.hide();\n            }\n        },\n        onNodeUnselect(node) {\n            this.$emit('node-unselect', node);\n        },\n        onNodeToggle(keys) {\n            this.expandedKeys = keys;\n        },\n        onKeyDown(event) {\n            switch(event.which) {\n                //down\n                case 40:\n                    if (!this.overlayVisible && event.altKey) {\n                        this.show();\n                        event.preventDefault();\n                    }\n                break;\n\n                //space\n                case 32:\n                    if (!this.overlayVisible) {\n                        this.show();\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    if (this.overlayVisible) {\n                        this.hide();\n                        event.preventDefault();\n                    }\n                break;\n\n                //tab\n                case 9:\n                    this.hide();\n                break;\n\n                default:\n                break;\n            }\n        },\n        onOverlayEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendDisabled) {\n                DomHandler.relativePosition(this.overlay, this.$el);\n            }\n            else {\n                this.overlay.style.minWidth = DomHandler.getOuterWidth(this.$el) + 'px';\n                DomHandler.absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                };\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        findSelectedNodes(node, keys, selectedNodes) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    selectedNodes.push(node);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        this.findSelectedNodes(childNode, keys, selectedNodes);\n                    }\n                }\n            }\n            else {\n                for (let childNode of this.options) {\n                    this.findSelectedNodes(childNode, keys, selectedNodes);\n                }\n            }\n        },\n        isSelected(node, keys) {\n            return this.selectionMode === 'checkbox' ? keys[node.key] && keys[node.key].checked : keys[node.key];\n        },\n        updateTreeState() {\n            let keys = {...this.modelValue};\n            this.expandedKeys = {};\n            if (keys && this.options) {\n                this.updateTreeBranchState(null, null, keys);\n            }\n        },\n        updateTreeBranchState(node, path, keys) {\n            if (node) {\n                if (this.isSelected(node, keys)) {\n                    this.expandPath(path);\n                    delete keys[node.key];\n                }\n\n                if (Object.keys(keys).length && node.children) {\n                    for (let childNode of node.children) {\n                        path.push(node.key);\n                        this.updateTreeBranchState(childNode, path, keys);\n                    }\n                }\n            }\n            else {\n                for (let childNode of this.options) {\n                    this.updateTreeBranchState(childNode, [], keys);\n                }\n            }\n        },\n        expandPath(path) {\n            if (path.length > 0) {\n                for (let key of path) {\n                    this.expandedKeys[key] = true;\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [\n                'p-treeselect p-component p-inputwrapper',\n                {\n                    'p-treeselect-chip': this.display === 'chip',\n                    'p-disabled': this.disabled,\n                    'p-focus': this.focused,\n                    'p-inputwrapper-filled': !this.emptyValue,\n                    'p-inputwrapper-focus': this.focused || this.overlayVisible\n                }\n            ];\n        },\n        labelClass() {\n            return [\n                'p-treeselect-label',\n                {\n                    'p-placeholder': this.label === this.placeholder,\n                    'p-treeselect-label-empty': !this.placeholder && this.emptyValue\n                }\n            ];\n        },\n        panelStyleClass() {\n            return ['p-treeselect-panel p-component', this.panelClass, {\n                'p-input-filled': this.$primevue.config.inputStyle === 'filled',\n                'p-ripple-disabled': this.$primevue.config.ripple === false\n            }];\n        },\n        selectedNodes() {\n            let selectedNodes = [];\n            if (this.modelValue && this.options) {\n                let keys = {...this.modelValue};\n                this.findSelectedNodes(null, keys, selectedNodes);\n            }\n\n            return selectedNodes;\n        },\n        label() {\n            let value = this.selectedNodes;\n            return value.length ? value.map(node => node.label).join(', '): this.placeholder;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        emptyValue() {\n            return !this.modelValue || Object.keys(this.modelValue).length === 0;\n        },\n        emptyOptions() {\n            return !this.options || this.options.length === 0;\n        },\n        appendDisabled() {\n            return this.appendTo === 'self';\n        },\n        appendTarget() {\n            return this.appendDisabled ? null : this.appendTo;\n        }\n    },\n    components: {\n        'TSTree': Tree\n    },\n    directives: {\n        'ripple': Ripple\n    }\n}\n</script>\n\n<style>\n.p-treeselect {\n    display: inline-flex;\n    cursor: pointer;\n    position: relative;\n    user-select: none;\n}\n\n.p-treeselect-trigger {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n}\n\n.p-treeselect-label-container {\n    overflow: hidden;\n    flex: 1 1 auto;\n    cursor: pointer;\n}\n\n.p-treeselect-label  {\n    display: block;\n    white-space: nowrap;\n    cursor: pointer;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.p-treeselect-label-empty {\n    overflow: hidden;\n    visibility: hidden;\n}\n\n.p-treeselect-token {\n    cursor: default;\n    display: inline-flex;\n    align-items: center;\n    flex: 0 0 auto;\n}\n\n.p-treeselect .p-treeselect-panel {\n    min-width: 100%;\n}\n\n.p-treeselect-panel {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.p-treeselect-items-wrapper {\n    overflow: auto;\n}\n\n.p-fluid .p-treeselect {\n    display: flex;\n}\n</style>\n"]}]}