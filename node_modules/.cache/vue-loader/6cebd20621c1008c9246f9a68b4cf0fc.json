{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue?vue&type=template&id=b4029980","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue","mtime":1634589566291},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWludHJvIj4KICAgICAgICAgICAgICAgIDxoMT5UcmVlVGFibGUgPHNwYW4+Q29sdW1uIFRvZ2dsZTwvc3Bhbj48L2gxPgogICAgICAgICAgICAgICAgPHA+TXVsdGlTZWxlY3QgY29tcG9uZW50IGNhbiBiZSB1c2VkIHRvIGltcGxlbWVudCBjb2x1bW4gdG9nZ2xlIGZ1bmN0aW9uYWxpdHkuPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPEFwcERlbW9BY3Rpb25zIC8+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtc2VjdGlvbiBpbXBsZW1lbnRhdGlvbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgPFRyZWVUYWJsZSA6dmFsdWU9Im5vZGVzIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2hlYWRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjpsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNdWx0aVNlbGVjdCA6bW9kZWxWYWx1ZT0ic2VsZWN0ZWRDb2x1bW5zIiBAdXBkYXRlOm1vZGVsVmFsdWU9Im9uVG9nZ2xlIiA6b3B0aW9ucz0iY29sdW1ucyIgb3B0aW9uTGFiZWw9ImhlYWRlciIgcGxhY2Vob2xkZXI9IlNlbGVjdCBDb2x1bW5zIiBzdHlsZT0id2lkdGg6IDIwZW0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8Q29sdW1uIGZpZWxkPSJuYW1lIiBoZWFkZXI9Ik5hbWUiIDpleHBhbmRlcj0idHJ1ZSI+PC9Db2x1bW4+CiAgICAgICAgICAgICAgICAgICAgPENvbHVtbiB2LWZvcj0iY29sIG9mIHNlbGVjdGVkQ29sdW1ucyIgOmZpZWxkPSJjb2wuZmllbGQiIDpoZWFkZXI9ImNvbC5oZWFkZXIiIDprZXk9ImNvbC5maWVsZCI+PC9Db2x1bW4+CiAgICAgICAgICAgICAgICA8L1RyZWVUYWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxBcHBEb2MgbmFtZT0iVHJlZVRhYmxlQ29sVG9nZ2xlRGVtbyIgOnNvdXJjZXM9InNvdXJjZXMiIDpzZXJ2aWNlPSJbJ05vZGVTZXJ2aWNlJ10iIDpkYXRhPSJbJ3RyZWV0YWJsZW5vZGVzJ10iIGdpdGh1Yj0idHJlZXRhYmxlL1RyZWVUYWJsZUNvbFRvZ2dsZURlbW8udnVlIiAvPgogICAgPC9kaXY+Cg=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC;QACA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrF,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACb,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACxwBACtK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAClK,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableColToggleDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Column Toggle</span></h1>\n                <p>MultiSelect component can be used to implement column toggle functionality.</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\">\n                    <template #header>\n                        <div style=\"text-align:left\">\n                            <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                        </div>\n                    </template>\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableColToggleDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableColToggleDemo.vue\" />\n    </div>\n</template>\n\n<script>\nimport NodeService from '../../service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport NodeService from './service/NodeService';\n\nexport default {\n    data() {\n        return {\n            selectedColumns: null,\n            columns: null,\n            nodes: null,\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\">\n            <template #header>\n                <div style=\"text-align:left\">\n                    <MultiSelect :modelValue=\"selectedColumns\" @update:modelValue=\"onToggle\" :options=\"columns\" optionLabel=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"/>\n                </div>\n            </template>\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></Column>\n        </TreeTable>\n    </div>                    \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport NodeService from './service/NodeService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n        })\n        const columns = ref([\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ]);\n        const nodes = ref();\n        const nodeService = ref(new NodeService());\n        const selectedColumns = ref(columns.value);\n        const onToggle = (val) => {\n            selectedColumns.value = columns.value.filter(col => val.includes(col));\n        }\n\n        return { columns, nodes, nodeService, selectedColumns, onToggle }\n    }\n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/multiselect/multiselect.min.js\"><\\\\/script>\n        <script src=\"./NodeService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\">\n                <template #header>\n                    <div style=\"text-align:left\">\n                        <p-multiselect :model-value=\"selectedColumns\" @update:model-value=\"onToggle\" :options=\"columns\" option-label=\"header\" placeholder=\"Select Columns\" style=\"width: 20em\"></p-multiselect>\n                    </div>\n                </template>\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column v-for=\"col of selectedColumns\" :field=\"col.field\" :header=\"col.header\" :key=\"col.field\"></p-olumn>\n            </p-treetable>\n        </div>                    \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    nodeService.value.getTreeTableNodes().then(data => nodes.value = data);\n                })\n                const columns = ref([\n                    {field: 'size', header: 'Size'},\n                    {field: 'type', header: 'Type'}\n                ]);\n                const nodes = ref();\n                const nodeService = ref(new NodeService());\n                const selectedColumns = ref(columns.value);\n                const onToggle = (val) => {\n                    selectedColumns.value = columns.value.filter(col => val.includes(col));\n                }\n\n                return { columns, nodes, nodeService, selectedColumns, onToggle }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column,\n                \"p-multiselect\": primevue.multiselect\n            }\n        };\n\n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    nodeService: null,\n    created() {\n        this.nodeService = new NodeService();\n\n        this.columns = [\n            {field: 'size', header: 'Size'},\n            {field: 'type', header: 'Type'}\n        ];\n\n        this.selectedColumns = this.columns;\n    },\n    mounted() {\n        this.nodeService.getTreeTableNodes().then(data => this.nodes = data);\n    },\n    methods: {\n        onToggle(value) {\n            this.selectedColumns = this.columns.filter(col => value.includes(col));\n        }\n    }\n}\n</script>"]}]}