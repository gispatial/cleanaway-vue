{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/menu/Menu.vue?vue&type=style&index=0&id=18813e62&lang=css","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/menu/Menu.vue","mtime":1634589566225},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wLW1lbnUtb3ZlcmxheSB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDA7CiAgICBsZWZ0OiAwOwp9CgoucC1tZW51IHVsIHsKICAgIG1hcmdpbjogMDsKICAgIHBhZGRpbmc6IDA7CiAgICBsaXN0LXN0eWxlOiBub25lOwp9CgoucC1tZW51IC5wLW1lbnVpdGVtLWxpbmsgewogICAgY3Vyc29yOiBwb2ludGVyOwogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwp9CgoucC1tZW51IC5wLW1lbnVpdGVtLXRleHQgewogICAgbGluZS1oZWlnaHQ6IDE7Cn0K"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/menu/Menu.vue"],"names":[],"mappings":";AA8NA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,EAAE,CAAC;IACN,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACX;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;IACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAClB","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/menu/Menu.vue","sourceRoot":"","sourcesContent":["<template>\n    <Teleport :to=\"appendTo\" :disabled=\"!popup\">\n        <transition name=\"p-connected-overlay\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\">\n            <div :ref=\"containerRef\" :class=\"containerClass\" v-if=\"popup ? overlayVisible : true\" v-bind=\"$attrs\" @click=\"onOverlayClick\">\n                <ul class=\"p-menu-list p-reset\" role=\"menu\">\n                    <template v-for=\"(item, i) of model\" :key=\"item.label + i.toString()\">\n                        <template v-if=\"item.items && visible(item) && !item.separator\">\n                            <li class=\"p-submenu-header\" v-if=\"item.items\">\n                                <slot name=\"item\" :item=\"item\">{{item.label}}</slot>\n                            </li>\n                            <template v-for=\"(child, j) of item.items\" :key=\"child.label + i + j\">\n                                <Menuitem v-if=\"visible(child) && !child.separator\" :item=\"child\" @click=\"itemClick\" :template=\"$slots.item\" :exact=\"exact\" />\n                                <li v-else-if=\"visible(child) && child.separator\" :class=\"['p-menu-separator', child.class]\" :style=\"child.style\" :key=\"'separator' + i + j\" role=\"separator\"></li>\n                            </template>\n                        </template>\n                        <li v-else-if=\"visible(item) && item.separator\" :class=\"['p-menu-separator', item.class]\" :style=\"item.style\" :key=\"'separator' + i.toString()\" role=\"separator\"></li>\n                        <Menuitem v-else :key=\"item.label + i.toString()\" :item=\"item\" @click=\"itemClick\" :template=\"$slots.item\" :exact=\"exact\" />\n                    </template>\n                </ul>\n            </div>\n        </transition>\n    </Teleport>\n</template>\n\n<script>\nimport {ConnectedOverlayScrollHandler,DomHandler,ZIndexUtils} from 'primevue/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Menuitem from './Menuitem.vue';\n\nexport default {\n    name: 'Menu',\n    emits: ['show', 'hide'],\n    inheritAttrs: false,\n    props: {\n        popup: {\n            type: Boolean,\n            default: false\n        },\n\t\tmodel: {\n            type: Array,\n            default: null\n        },\n        appendTo: {\n            type: String,\n            default: 'body'\n        },\n        autoZIndex: {\n            type: Boolean,\n            default: true\n        },\n        baseZIndex: {\n            type: Number,\n            default: 0\n        },\n        exact: {\n            type: Boolean,\n            default: true\n        }\n    },\n    data() {\n        return {\n            overlayVisible: false\n        };\n    },\n    target: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    beforeUnmount() {\n        this.unbindResizeListener();\n        this.unbindOutsideClickListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n        this.container = null;\n    },\n    methods: {\n        itemClick(event) {\n            const item = event.item;\n            if (item.disabled) {\n                return;\n            }\n\n            if (item.command) {\n                item.command(event);\n            }\n\n            if (item.to && event.navigate) {\n                event.navigate(event.originalEvent);\n            }\n\n            this.hide();\n        },\n        toggle(event) {\n            if (this.overlayVisible)\n                this.hide();\n            else\n                this.show(event);\n        },\n        show(event) {\n            this.overlayVisible = true;\n            this.target = event.currentTarget;\n        },\n        hide() {\n            this.overlayVisible = false;\n            this.target = null;\n        },\n        onEnter(el) {\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n            this.bindResizeListener();\n            this.bindScrollListener();\n\n            if (this.autoZIndex) {\n                ZIndexUtils.set('menu', el, this.baseZIndex + this.$primevue.config.zIndex.menu);\n            }\n\n            this.$emit('show');\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindResizeListener();\n            this.unbindScrollListener();\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndexUtils.clear(el);\n            }\n        },\n        alignOverlay() {\n            DomHandler.absolutePosition(this.container, this.target);\n            this.container.style.minWidth = DomHandler.getOuterWidth(this.target) + 'px';\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.container && !this.container.contains(event.target) && !this.isTargetClicked(event)) {\n                        this.hide();\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                };\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isTargetClicked() {\n            return this.target && (this.target === event.target || this.target.contains(event.target));\n        },\n        visible(item) {\n            return (typeof item.visible === 'function' ? item.visible() : item.visible !== false);\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-menu p-component', {\n                'p-menu-overlay': this.popup,\n                'p-input-filled': this.$primevue.config.inputStyle === 'filled',\n                'p-ripple-disabled': this.$primevue.config.ripple === false\n            }]\n        }\n    },\n    components: {\n        'Menuitem': Menuitem\n    }\n}\n</script>\n\n<style>\n.p-menu-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.p-menu ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n}\n\n.p-menu .p-menuitem-link {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    overflow: hidden;\n    position: relative;\n}\n\n.p-menu .p-menuitem-text {\n    line-height: 1;\n}\n</style>\n"]}]}