{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue?vue&type=template&id=881a4684","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue","mtime":1634589566292},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmZWF0dXJlLWludHJvIj4KICAgICAgICAgICAgICAgIDxoMT5UcmVlVGFibGUgPHNwYW4+TGF6eTwvc3Bhbj48L2gxPgogICAgICAgICAgICAgICAgPHA+TGF6eSBtb2RlIGlzIGhhbmR5IHRvIGRlYWwgd2l0aCBsYXJnZSBkYXRhc2V0cywgaW5zdGVhZCBvZiBsb2FkaW5nIHRoZSBlbnRpcmUgZGF0YSwgc21hbGwgY2h1bmtzIG9mIGRhdGEgaXMgbG9hZGVkIGJ5IGludm9raW5nIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tzIGV2ZXJ5dGltZSBwYWdpbmcgb3Igc29ydGluZy4gSW4gYWRkaXRpb24sCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gb2YgYSBub2RlIGNhbiBiZSBsb2FkZWQgb24gZGVtYW5kIGF0IG9uTm9kZUV4cGFuZCBldmVudCBhcyB3ZWxsLiBTYW1wbGUgYmVsb3dzIGltaXRhdGVzIGxhenkgcGFnaW5nIGJ5IHVzaW5nIGFuIGluIG1lbW9yeSBsaXN0Li48L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8QXBwRGVtb0FjdGlvbnMgLz4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudC1zZWN0aW9uIGltcGxlbWVudGF0aW9uIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICA8VHJlZVRhYmxlIDp2YWx1ZT0ibm9kZXMiIDpsYXp5PSJ0cnVlIiA6cGFnaW5hdG9yPSJ0cnVlIiA6cm93cz0icm93cyIgOmxvYWRpbmc9ImxvYWRpbmciCiAgICAgICAgICAgICAgICAgICAgQG5vZGUtZXhwYW5kPSJvbkV4cGFuZCIgQHBhZ2U9Im9uUGFnZSIgOnRvdGFsUmVjb3Jkcz0idG90YWxSZWNvcmRzIj4KICAgICAgICAgICAgICAgICAgICA8Q29sdW1uIGZpZWxkPSJuYW1lIiBoZWFkZXI9Ik5hbWUiIDpleHBhbmRlcj0idHJ1ZSI+PC9Db2x1bW4+CiAgICAgICAgICAgICAgICAgICAgPENvbHVtbiBmaWVsZD0ic2l6ZSIgaGVhZGVyPSJTaXplIj48L0NvbHVtbj4KICAgICAgICAgICAgICAgICAgICA8Q29sdW1uIGZpZWxkPSJ0eXBlIiBoZWFkZXI9IlR5cGUiPjwvQ29sdW1uPgogICAgICAgICAgICAgICAgPC9UcmVlVGFibGU+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8QXBwRG9jIG5hbWU9IlRyZWVUYWJsZUxhenlEZW1vIiA6c291cmNlcz0ic291cmNlcyIgOnNlcnZpY2U9IlsnTm9kZVNlcnZpY2UnXSIgOmRhdGE9IlsndHJlZXRhYmxlbm9kZXMnXSIgZ2l0aHViPSJ0cmVldGFibGUvVHJlZVRhYmxlTGF6eURlbW8udnVlIiAvPgogICAgPC9kaXY+Cg=="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC;QACA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnopJ,CAAC,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,CAAC,CAAC,CAAC,CAAC,CAAC;QACT,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACxJ,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/treetable/TreeTableLazyDemo.vue","sourceRoot":"","sourcesContent":["<template>\n    <div>\n        <div class=\"content-section introduction\">\n            <div class=\"feature-intro\">\n                <h1>TreeTable <span>Lazy</span></h1>\n                <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging or sorting. In addition,\n                    children of a node can be loaded on demand at onNodeExpand event as well. Sample belows imitates lazy paging by using an in memory list..</p>\n            </div>\n            <AppDemoActions />\n        </div>\n\n        <div class=\"content-section implementation\">\n            <div class=\"card\">\n                <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                    @node-expand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n                    <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n                    <Column field=\"size\" header=\"Size\"></Column>\n                    <Column field=\"type\" header=\"Type\"></Column>\n                </TreeTable>\n            </div>\n        </div>\n\n        <AppDoc name=\"TreeTableLazyDemo\" :sources=\"sources\" :service=\"['NodeService']\" :data=\"['treetablenodes']\" github=\"treetable/TreeTableLazyDemo.vue\" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0,\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            nodes: null,\n            rows: 10,\n            loading: false,\n            totalRecords: 0\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n<\\\\/script>\n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n    <div>\n        <TreeTable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n            @nodeExpand=\"onExpand\" @page=\"onPage\" :totalRecords=\"totalRecords\">\n            <Column field=\"name\" header=\"Name\" :expander=\"true\"></Column>\n            <Column field=\"size\" header=\"Size\"></Column>\n            <Column field=\"type\" header=\"Type\"></Column>\n        </TreeTable>\n    </div>                   \n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(0, rows.value);\n                totalRecords.value = 1000;\n            }, 1000);\n        })\n        const nodes = ref();\n        const rows = ref(10);\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const onExpand = (node) => {\n            if (!node.children) {\n                loading.value = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let newNodes = nodes.value.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    loading.value = false;\n                    nodes.value = newNodes;\n                }, 250);\n            }\n        };\n        const onPage = (event) => {\n            loading.value = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                loading.value = false;\n                nodes.value = loadNodes(event.first, rows.value);\n            }, 1000);\n        };\n        const loadNodes = (first, rows) => {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n\n        return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n    }\n    \n}\n<\\\\/script>\n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/treetable/treetable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-treetable :value=\"nodes\" :lazy=\"true\" :paginator=\"true\" :rows=\"rows\" :loading=\"loading\"\n                @node-expand=\"onExpand\" @page=\"onPage\" :total-records=\"totalRecords\">\n                <p-column field=\"name\" header=\"Name\" :expander=\"true\"></p-column>\n                <p-column field=\"size\" header=\"Size\"></p-column>\n                <p-column field=\"type\" header=\"Type\"></p-column>\n            </p-treetable>\n        </div>                   \n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(0, rows.value);\n                        totalRecords.value = 1000;\n                    }, 1000);\n                })\n                const nodes = ref();\n                const rows = ref(10);\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const onExpand = (node) => {\n                    if (!node.children) {\n                        loading.value = true;\n\n                        setTimeout(() => {\n                            let lazyNode = {...node};\n\n                            lazyNode.children = [\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 0',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    },\n                                },\n                                {\n                                    data: {\n                                        name: lazyNode.data.name + ' - 1',\n                                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                        type: 'File'\n                                    }\n                                }\n                            ];\n\n                            let newNodes = nodes.value.map(n => {\n                                if (n.key === node.key) {\n                                    n = lazyNode;\n                                }\n\n                                return n;\n                            });\n\n                            loading.value = false;\n                            nodes.value = newNodes;\n                        }, 250);\n                    }\n                };\n                const onPage = (event) => {\n                    loading.value = true;\n\n                    //imitate delay of a backend call\n                    setTimeout(() => {\n                        loading.value = false;\n                        nodes.value = loadNodes(event.first, rows.value);\n                    }, 1000);\n                };\n                const loadNodes = (first, rows) => {\n                    let nodes = [];\n\n                    for(let i = 0; i < rows; i++) {\n                        let node = {\n                            key: (first + i),\n                            data: {\n                                name: 'Item ' + (first + i),\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'Type ' + (first + i)\n                            },\n                            leaf: false\n                        };\n\n                        nodes.push(node);\n                    }\n\n                    return nodes;\n                }\n\n                return { nodes, rows, loading, totalRecords, onExpand, onPage, loadNodes }\n            },\n            components: {\n                \"p-treetable\": primevue.treetable,\n                \"p-column\": primevue.column\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>\n`\n                }\n            }\n        }\n    },\n    mounted() {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            this.nodes = this.loadNodes(0, this.rows);\n            this.totalRecords = 1000;\n        }, 1000);\n    },\n    methods: {\n        onExpand(node) {\n            if (!node.children) {\n                this.loading = true;\n\n                setTimeout(() => {\n                    let lazyNode = {...node};\n\n                    lazyNode.children = [\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 0',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            },\n                        },\n                        {\n                            data: {\n                                name: lazyNode.data.name + ' - 1',\n                                size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                                type: 'File'\n                            }\n                        }\n                    ];\n\n                    let nodes = this.nodes.map(n => {\n                        if (n.key === node.key) {\n                            n = lazyNode;\n                        }\n\n                        return n;\n                    });\n\n                    this.loading = false;\n                    this.nodes = nodes;\n                }, 250);\n            }\n        },\n        onPage(event) {\n            this.loading = true;\n\n            //imitate delay of a backend call\n            setTimeout(() => {\n                this.loading = false;\n                this.nodes = this.loadNodes(event.first, this.rows);\n            }, 1000);\n        },\n        loadNodes(first, rows) {\n            let nodes = [];\n\n            for(let i = 0; i < rows; i++) {\n                let node = {\n                    key: (first + i),\n                    data: {\n                        name: 'Item ' + (first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (first + i)\n                    },\n                    leaf: false\n                };\n\n                nodes.push(node);\n            }\n\n            return nodes;\n        }\n    }\n}\n</script>"]}]}