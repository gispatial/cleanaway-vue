{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/multiselect/MultiSelect.vue?vue&type=style&index=0&id=daeb170a&lang=css","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/multiselect/MultiSelect.vue","mtime":1634589566226},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/css-loader/dist/cjs.js","mtime":1634585948787},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/postcss-loader/src/index.js","mtime":1634585949822},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wLW11bHRpc2VsZWN0IHsKICAgIGRpc3BsYXk6IGlubGluZS1mbGV4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgdXNlci1zZWxlY3Q6IG5vbmU7Cn0KCi5wLW11bHRpc2VsZWN0LXRyaWdnZXIgewogICAgZGlzcGxheTogZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgIGZsZXgtc2hyaW5rOiAwOwp9CgoucC1tdWx0aXNlbGVjdC1sYWJlbC1jb250YWluZXIgewogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIGZsZXg6IDEgMSBhdXRvOwogICAgY3Vyc29yOiBwb2ludGVyOwp9CgoucC1tdWx0aXNlbGVjdC1sYWJlbCAgewogICAgZGlzcGxheTogYmxvY2s7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwp9CgoucC1tdWx0aXNlbGVjdC1sYWJlbC1lbXB0eSB7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgdmlzaWJpbGl0eTogaGlkZGVuOwp9CgoucC1tdWx0aXNlbGVjdC10b2tlbiB7CiAgICBjdXJzb3I6IGRlZmF1bHQ7CiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICBmbGV4OiAwIDAgYXV0bzsKfQoKLnAtbXVsdGlzZWxlY3QtdG9rZW4taWNvbiB7CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5wLW11bHRpc2VsZWN0IC5wLW11bHRpc2VsZWN0LXBhbmVsIHsKICAgIG1pbi13aWR0aDogMTAwJTsKfQoKLnAtbXVsdGlzZWxlY3QtcGFuZWwgewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiAwOwogICAgbGVmdDogMDsKfQoKLnAtbXVsdGlzZWxlY3QtaXRlbXMtd3JhcHBlciB7CiAgICBvdmVyZmxvdzogYXV0bzsKfQoKLnAtbXVsdGlzZWxlY3QtaXRlbXMgewogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKfQoKLnAtbXVsdGlzZWxlY3QtaXRlbSB7CiAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKLnAtbXVsdGlzZWxlY3QtaXRlbS1ncm91cCB7CiAgICBjdXJzb3I6IGF1dG87Cn0KCi5wLW11bHRpc2VsZWN0LWhlYWRlciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKfQoKLnAtbXVsdGlzZWxlY3QtZmlsdGVyLWNvbnRhaW5lciB7CiAgICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgICBmbGV4OiAxIDEgYXV0bzsKfQoKLnAtbXVsdGlzZWxlY3QtZmlsdGVyLWljb24gewogICAgcG9zaXRpb246IGFic29sdXRlOwogICAgdG9wOiA1MCU7CiAgICBtYXJnaW4tdG9wOiAtLjVyZW07Cn0KCi5wLW11bHRpc2VsZWN0LWZpbHRlci1jb250YWluZXIgLnAtaW5wdXR0ZXh0IHsKICAgIHdpZHRoOiAxMDAlOwp9CgoucC1tdWx0aXNlbGVjdC1jbG9zZSB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgZmxleC1zaHJpbms6IDA7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgbWFyZ2luLWxlZnQ6IGF1dG87Cn0KCi5wLWZsdWlkIC5wLW11bHRpc2VsZWN0IHsKICAgIGRpc3BsYXk6IGZsZXg7Cn0K"},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/multiselect/MultiSelect.vue"],"names":[],"mappings":";AAuuBA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACnB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,EAAE,CAAC;IACN,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AACX;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACzB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAChB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACzC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACf;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACjB","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/multiselect/MultiSelect.vue","sourceRoot":"","sourcesContent":["<template>\n    <div ref=\"container\" :class=\"containerClass\" @click=\"onClick\">\n        <div class=\"p-hidden-accessible\">\n            <input ref=\"focusInput\" type=\"text\" role=\"listbox\" :id=\"inputId\" readonly :disabled=\"disabled\" @focus=\"onFocus\" @blur=\"onBlur\" @keydown=\"onKeyDown\" :tabindex=\"tabindex\"\n                aria-haspopup=\"true\" :aria-expanded=\"overlayVisible\" :aria-labelledby=\"ariaLabelledBy\"/>\n        </div>\n        <div class=\"p-multiselect-label-container\">\n            <div :class=\"labelClass\">\n                <slot name=\"value\" :value=\"modelValue\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{label || 'empty'}}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <div v-for=\"item of modelValue\" class=\"p-multiselect-token\" :key=\"getLabelByValue(item)\">\n                             <slot name=\"chip\" :value=\"item\">\n                                <span class=\"p-multiselect-token-label\">{{getLabelByValue(item)}}</span>\n                             </slot>\n                            <span v-if=\"!disabled\" class=\"p-multiselect-token-icon pi pi-times-circle\" @click=\"removeChip(item)\"></span>\n                        </div>\n                        <template v-if=\"!modelValue || modelValue.length === 0\">{{placeholder || 'empty'}}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div class=\"p-multiselect-trigger\">\n            <slot name=\"indicator\">\n                <span :class=\"dropdownIconClass\"></span>\n            </slot>\n        </div>\n        <Teleport :to=\"appendTarget\" :disabled=\"appendDisabled\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\">\n                <div :ref=\"overlayRef\" :class=\"panelStyleClass\" v-if=\"overlayVisible\" @click=\"onOverlayClick\">\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <div class=\"p-multiselect-header\" v-if=\"(showToggleAll && selectionLimit == null) || filter\">\n                        <div class=\"p-checkbox p-component\" @click=\"onToggleAll\" role=\"checkbox\" :aria-checked=\"allSelected\" v-if=\"showToggleAll && selectionLimit == null\">\n                            <div class=\"p-hidden-accessible\">\n                                <input type=\"checkbox\" readonly @focus=\"onHeaderCheckboxFocus\" @blur=\"onHeaderCheckboxBlur\">\n                            </div>\n                            <div :class=\"['p-checkbox-box', {'p-highlight': allSelected, 'p-focus': headerCheckboxFocused}]\" role=\"checkbox\" :aria-checked=\"allSelected\">\n                                <span :class=\"['p-checkbox-icon', {'pi pi-check': allSelected}]\"></span>\n                            </div>\n                        </div>\n                        <div v-if=\"filter\" class=\"p-multiselect-filter-container\">\n                            <input type=\"text\" ref=\"filterInput\" v-model=\"filterValue\" class=\"p-multiselect-filter p-inputtext p-component\" :placeholder=\"filterPlaceholder\" @input=\"onFilterChange\">\n                            <span class=\"p-multiselect-filter-icon pi pi-search\"></span>\n                        </div>\n                        <button class=\"p-multiselect-close p-link\" @click=\"onCloseClick\" type=\"button\" v-ripple>\n                            <span class=\"p-multiselect-close-icon pi pi-times\" />\n                        </button>\n                    </div>\n                    <div class=\"p-multiselect-items-wrapper\" :style=\"{'max-height': virtualScrollerDisabled ? scrollHeight : ''}\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{'height': scrollHeight}\" :disabled=\"virtualScrollerDisabled\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions }\">\n                                <ul :ref=\"contentRef\" :class=\"['p-multiselect-items p-component', styleClass]\" role=\"listbox\" aria-multiselectable=\"true\">\n                                    <template v-if=\"!optionGroupLabel\">\n                                        <li v-for=\"(option, i) of items\" :class=\"['p-multiselect-item', {'p-highlight': isSelected(option), 'p-disabled': isOptionDisabled(option)}]\" role=\"option\" :aria-selected=\"isSelected(option)\"\n                                            :key=\"getOptionRenderKey(option)\" @click=\"onOptionSelect($event, option)\" @keydown=\"onOptionKeyDown($event, option)\" :tabindex=\"tabindex||'0'\" :aria-label=\"getOptionLabel(option)\"  v-ripple>\n                                            <div class=\"p-checkbox p-component\">\n                                                <div :class=\"['p-checkbox-box', {'p-highlight': isSelected(option)}]\">\n                                                    <span :class=\"['p-checkbox-icon', {'pi pi-check': isSelected(option)}]\"></span>\n                                                </div>\n                                            </div>\n                                            <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span>{{getOptionLabel(option)}}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <template v-else>\n                                        <template v-for=\"(optionGroup, i) of items\" :key=\"getOptionGroupRenderKey(optionGroup)\">\n                                            <li  class=\"p-multiselect-item-group\">\n                                                <slot name=\"optiongroup\" :option=\"optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{getOptionGroupLabel(optionGroup)}}</slot>\n                                            </li>\n                                            <li v-for=\"(option, i) of getOptionGroupChildren(optionGroup)\" :class=\"['p-multiselect-item', {'p-highlight': isSelected(option), 'p-disabled': isOptionDisabled(option)}]\" role=\"option\" :aria-selected=\"isSelected(option)\"\n                                                :key=\"getOptionRenderKey(option)\" @click=\"onOptionSelect($event, option)\" @keydown=\"onOptionKeyDown($event, option)\" :tabindex=\"tabindex||'0'\" :aria-label=\"getOptionLabel(option)\"  v-ripple>\n                                                <div class=\"p-checkbox p-component\">\n                                                    <div :class=\"['p-checkbox-box', {'p-highlight': isSelected(option)}]\">\n                                                        <span :class=\"['p-checkbox-icon', {'pi pi-check': isSelected(option)}]\"></span>\n                                                    </div>\n                                                </div>\n                                                <slot name=\"option\" :option=\"option\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                    <span>{{getOptionLabel(option)}}</span>\n                                                </slot>\n                                            </li>\n                                        </template>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" class=\"p-multiselect-empty-message\">\n                                        <slot name=\"emptyfilter\">{{emptyFilterMessageText}}</slot>\n                                    </li>\n                                    <li v-else-if=\"(!options || (options && options.length === 0))\" class=\"p-multiselect-empty-message\">\n                                        <slot name=\"empty\">{{emptyMessageText}}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-slot:loader=\"{ options }\" v-if=\"$slots.loader\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                </div>\n            </transition>\n        </Teleport>\n    </div>\n</template>\n\n<script>\nimport {ConnectedOverlayScrollHandler,ObjectUtils,DomHandler,ZIndexUtils} from 'primevue/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport {FilterService} from 'primevue/api';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\n\nexport default {\n    name: 'MultiSelect',\n    emits: ['update:modelValue', 'before-show', 'before-hide', 'change', 'show', 'hide', 'filter', 'selectall-change'],\n    props: {\n        modelValue: null,\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n\t\tscrollHeight: {\n\t\t\ttype: String,\n\t\t\tdefault: '200px'\n\t\t},\n\t\tplaceholder: String,\n\t\tdisabled: Boolean,\n        tabindex: String,\n        inputId: String,\n        dataKey: null,\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        ariaLabelledBy: null,\n        appendTo: {\n            type: String,\n            default: 'body'\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        panelClass: null,\n        selectedItemsLabel: {\n            type: String,\n            default: '{0} items selected'\n        },\n        maxSelectedLabels: {\n            type: Number,\n            default: null\n        },\n        selectionLimit: {\n            type: Number,\n            default: null\n        },\n        showToggleAll: {\n            type: Boolean,\n            default: true\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: 'pi pi-spinner pi-spin'\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        selectAll: {\n            type: Boolean,\n            default: null\n        }\n    },\n    data() {\n        return {\n            focused: false,\n            headerCheckboxFocused: false,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    outsideClickListener: null,\n    resizeListener: null,\n    scrollHandler: null,\n    overlay: null,\n    virtualScroller: null,\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndexUtils.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : (fn && fn(index)['index']);\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        getOptionGroupRenderKey(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupLabel(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        isOptionDisabled(option) {\n            if (this.maxSelectionLimitReached && !this.isSelected(option)) {\n                return true;\n            }\n\n            return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n        },\n        getSelectedOptionIndex() {\n            if (this.modelValue != null && this.options) {\n                if (this.optionGroupLabel) {\n                    for (let i = 0; i < this.options.length; i++) {\n                        let selectedOptionIndex = this.findOptionIndexInList(this.modelValue, this.getOptionGroupChildren(this.options[i]));\n                        if (selectedOptionIndex !== -1) {\n                            return {group: i, option: selectedOptionIndex};\n                        }\n                    }\n                }\n                else {\n                    return this.findOptionIndexInList(this.modelValue, this.options);\n                }\n            }\n\n            return -1;\n        },\n        findOptionIndexInList(value, list) {\n            return value ? list.findIndex(item => value.some(val => ObjectUtils.equals(val, this.getOptionValue(item), this.equalityKey))) : -1;\n        },\n        isSelected(option) {\n            if (this.modelValue) {\n                let optionValue = this.getOptionValue(option);\n                let key = this.equalityKey;\n\n                return this.modelValue.some(val => ObjectUtils.equals(val, optionValue, key));\n            }\n\n            return false;\n        },\n        show() {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n        },\n        hide() {\n            this.$emit('before-hide');\n            this.overlayVisible = false;\n        },\n        onFocus() {\n            this.focused = true;\n        },\n        onBlur() {\n            this.focused = false;\n        },\n        onHeaderCheckboxFocus() {\n            this.headerCheckboxFocused = true;\n        },\n        onHeaderCheckboxBlur() {\n            this.headerCheckboxFocused = false;\n        },\n        onClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if ((!this.overlay || !this.overlay.contains(event.target)) && !DomHandler.hasClass(event.target, 'p-multiselect-close')) {\n                DomHandler.hasClass(event.target, 'p-multiselect-close');\n                if (this.overlayVisible)\n                    this.hide();\n                else\n                    this.show();\n\n                this.$refs.focusInput.focus();\n            }\n        },\n        onCloseClick() {\n            this.hide();\n        },\n        onKeyDown(event) {\n            switch(event.which) {\n                //down\n                case 40:\n                    if (this.visibleOptions && !this.overlayVisible && event.altKey) {\n                        this.show();\n                    }\n                break;\n\n                //space\n                case 32:\n                    if (!this.overlayVisible) {\n                        this.show();\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter and escape\n                case 13:\n                case 27:\n                    if (this.overlayVisible) {\n                        this.hide();\n                        event.preventDefault();\n                    }\n                break;\n\n                //tab\n                case 9:\n                    this.hide();\n                break;\n\n                default:\n                break;\n            }\n        },\n        onOptionSelect(event, option) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let value = null;\n\n            if (selected)\n                value = this.modelValue.filter(val => !ObjectUtils.equals(val, this.getOptionValue(option), this.equalityKey));\n            else\n                value = [...(this.modelValue || []), this.getOptionValue(option)];\n\n            this.$emit('update:modelValue', value);\n            this.$emit('change', {originalEvent: event, value: value});\n        },\n        onOptionKeyDown(event, option) {\n            let listItem = event.target;\n\n            switch(event.which) {\n                //down\n                case 40:\n                    var nextItem = this.findNextItem(listItem);\n                    if (nextItem) {\n                        nextItem.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //up\n                case 38:\n                    var prevItem = this.findPrevItem(listItem);\n                    if (prevItem) {\n                        prevItem.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n\n                //enter\n                case 13:\n                    this.onOptionSelect(event, option);\n                    event.preventDefault();\n                break;\n\n                default:\n                break;\n            }\n        },\n        findNextItem(item) {\n            let nextItem = item.nextElementSibling;\n\n            if (nextItem)\n                return DomHandler.hasClass(nextItem, 'p-disabled') || DomHandler.hasClass(nextItem, 'p-multiselect-item-group') ? this.findNextItem(nextItem) : nextItem;\n            else\n                return null;\n        },\n        findPrevItem(item) {\n            let prevItem = item.previousElementSibling;\n\n            if (prevItem)\n                return DomHandler.hasClass(prevItem, 'p-disabled') || DomHandler.hasClass(prevItem, 'p-multiselect-item-group') ? this.findPrevItem(prevItem) : prevItem;\n            else\n                return null;\n        },\n        onOverlayEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            if (this.filter) {\n                this.$refs.filterInput.focus();\n            }\n\n            if (!this.virtualScrollerDisabled) {\n                const selectedIndex = this.getSelectedOptionIndex();\n                if (selectedIndex !== -1) {\n                    this.virtualScroller.scrollToIndex(selectedIndex);\n                }\n            }\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendDisabled) {\n                DomHandler.relativePosition(this.overlay, this.$el);\n            }\n            else {\n                this.overlay.style.minWidth = DomHandler.getOuterWidth(this.$el) + 'px';\n                DomHandler.absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !DomHandler.isAndroid()) {\n                        this.hide();\n                    }\n                };\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        getLabelByValue(val) {\n            let option;\n            if (this.options) {\n                if (this.optionGroupLabel) {\n                    for (let optionGroup of this.options) {\n                        option = this.findOptionByValue(val, this.getOptionGroupChildren(optionGroup));\n                        if (option) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    option = this.findOptionByValue(val, this.options);\n                }\n            }\n\n            return option ? this.getOptionLabel(option): null;\n        },\n        findOptionByValue(val, list) {\n            for (let option of list) {\n                let optionValue = this.getOptionValue(option);\n\n                if(ObjectUtils.equals(optionValue, val, this.equalityKey)) {\n                    return option;\n                }\n            }\n\n            return null;\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            if (pattern.test(this.selectedItemsLabel)) {\n                return this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.modelValue.length + '');\n            }\n\n            return this.selectedItemsLabel;\n        },\n        onToggleAll(event) {\n            if (this.selectAll !== null) {\n                this.$emit('selectall-change', {originalEvent: event, checked: !this.allSelected});\n            }\n            else {\n                let value = null;\n\n                if (this.allSelected) {\n                    value = [];\n                }\n                else if (this.visibleOptions) {\n                    if (this.optionGroupLabel) {\n                        value = [];\n                        this.visibleOptions.forEach(optionGroup => value = [...value, ...this.getOptionGroupChildren(optionGroup)]);\n                    }\n                    else  {\n                        value = this.visibleOptions.map(option => this.getOptionValue(option));\n                    }\n                }\n\n                this.$emit('update:modelValue', value);\n                this.$emit('change', {originalEvent: event, value: value});\n            }\n        },\n        onFilterChange(event) {\n            this.$emit('filter', {originalEvent: event, value: event.target.value});\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        },\n        removeChip(item) {\n            let value = this.modelValue.filter(val => !ObjectUtils.equals(val, item, this.equalityKey));\n\n            this.$emit('update:modelValue', value);\n            this.$emit('change', {originalEvent: event, value: value});\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        }\n    },\n    computed: {\n         visibleOptions() {\n            if (this.filterValue) {\n                if (this.optionGroupLabel) {\n                    let filteredGroups = [];\n                    for (let optgroup of this.options) {\n                        let filteredSubOptions = FilterService.filter(this.getOptionGroupChildren(optgroup), this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n                        if (filteredSubOptions && filteredSubOptions.length) {\n                            filteredGroups.push({...optgroup, ...{items: filteredSubOptions}});\n                        }\n                    }\n                    return filteredGroups\n                }\n                else {\n                    return FilterService.filter(this.options, this.searchFields, this.filterValue, 'contains', this.filterLocale);\n                }\n            }\n            else {\n                return this.options;\n            }\n        },\n        containerClass() {\n            return ['p-multiselect p-component p-inputwrapper', {\n                'p-multiselect-chip': this.display === 'chip',\n                'p-disabled': this.disabled,\n                'p-focus': this.focused,\n                'p-inputwrapper-filled': this.modelValue && this.modelValue.length,\n                'p-inputwrapper-focus': this.focused || this.overlayVisible\n            }];\n        },\n        labelClass() {\n            return ['p-multiselect-label', {\n                'p-placeholder': this.label === this.placeholder,\n                'p-multiselect-label-empty': !this.placeholder && (!this.modelValue || this.modelValue.length === 0)\n            }];\n        },\n        panelStyleClass() {\n            return ['p-multiselect-panel p-component', this.panelClass, {\n                'p-input-filled': this.$primevue.config.inputStyle === 'filled',\n                'p-ripple-disabled': this.$primevue.config.ripple === false\n            }];\n        },\n        label() {\n            let label;\n\n            if (this.modelValue && this.modelValue.length) {\n                if (!this.maxSelectedLabels || this.modelValue.length <= this.maxSelectedLabels) {\n                    label = '';\n                    for(let i = 0; i < this.modelValue.length; i++) {\n                        if(i !== 0) {\n                            label += ', ';\n                        }\n\n                        label += this.getLabelByValue(this.modelValue[i]);\n                    }\n                }\n                else {\n                    return this.getSelectedItemsLabel();\n                }\n            }\n            else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        allSelected() {\n            if (this.selectAll !== null) {\n                return this.selectAll;\n            }\n            else {\n                if (this.filterValue && this.filterValue.trim().length > 0) {\n                    if (this.visibleOptions.length === 0) {\n                        return false;\n                    }\n\n                    if (this.optionGroupLabel) {\n                        for (let optionGroup of this.visibleOptions) {\n                            for (let option of this.getOptionGroupChildren(optionGroup)) {\n                                if (!this.isSelected(option)) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        for (let option of this.visibleOptions) {\n                            if (!this.isSelected(option)) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n                else {\n                    if (this.modelValue && this.options) {\n                        let optionCount = 0;\n                        if (this.optionGroupLabel)\n                            this.options.forEach(optionGroup => optionCount += this.getOptionGroupChildren(optionGroup).length);\n                        else\n                            optionCount = this.options.length;\n\n                        return optionCount > 0 && optionCount === this.modelValue.length;\n                    }\n\n                    return false;\n                }\n            }\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptyFilterMessage;\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage;\n        },\n        appendDisabled() {\n            return this.appendTo === 'self';\n        },\n        appendTarget() {\n            return this.appendDisabled ? null : this.appendTo;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        },\n        maxSelectionLimitReached() {\n            return this.selectionLimit && (this.modelValue && this.modelValue.length === this.selectionLimit);\n        },\n        dropdownIconClass() {\n            return ['p-multiselect-trigger-icon', this.loading ? this.loadingIcon : 'pi pi-chevron-down'];\n        }\n    },\n    directives: {\n        'ripple': Ripple\n    },\n    components: {\n        'VirtualScroller': VirtualScroller\n    }\n}\n</script>\n\n<style>\n.p-multiselect {\n    display: inline-flex;\n    cursor: pointer;\n    position: relative;\n    user-select: none;\n}\n\n.p-multiselect-trigger {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n}\n\n.p-multiselect-label-container {\n    overflow: hidden;\n    flex: 1 1 auto;\n    cursor: pointer;\n}\n\n.p-multiselect-label  {\n    display: block;\n    white-space: nowrap;\n    cursor: pointer;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.p-multiselect-label-empty {\n    overflow: hidden;\n    visibility: hidden;\n}\n\n.p-multiselect-token {\n    cursor: default;\n    display: inline-flex;\n    align-items: center;\n    flex: 0 0 auto;\n}\n\n.p-multiselect-token-icon {\n    cursor: pointer;\n}\n\n.p-multiselect .p-multiselect-panel {\n    min-width: 100%;\n}\n\n.p-multiselect-panel {\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.p-multiselect-items-wrapper {\n    overflow: auto;\n}\n\n.p-multiselect-items {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n}\n\n.p-multiselect-item {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    font-weight: normal;\n    white-space: nowrap;\n    position: relative;\n    overflow: hidden;\n}\n\n.p-multiselect-item-group {\n    cursor: auto;\n}\n\n.p-multiselect-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.p-multiselect-filter-container {\n    position: relative;\n    flex: 1 1 auto;\n}\n\n.p-multiselect-filter-icon {\n    position: absolute;\n    top: 50%;\n    margin-top: -.5rem;\n}\n\n.p-multiselect-filter-container .p-inputtext {\n    width: 100%;\n}\n\n.p-multiselect-close {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n    overflow: hidden;\n    position: relative;\n    margin-left: auto;\n}\n\n.p-fluid .p-multiselect {\n    display: flex;\n}\n</style>\n"]}]}