{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue?vue&type=template&id=4c8252b4","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue","mtime":1634589566260},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cgk8ZGl2PgoJCTxkaXYgY2xhc3M9ImNvbnRlbnQtc2VjdGlvbiBpbnRyb2R1Y3Rpb24iPgoJCQk8ZGl2IGNsYXNzPSJmZWF0dXJlLWludHJvIj4KCQkJCTxoMT5EYXRhVGFibGUgPHNwYW4+TGF6eTwvc3Bhbj48L2gxPgoJCQkJPHA+TGF6eSBtb2RlIGlzIGhhbmR5IHRvIGRlYWwgd2l0aCBsYXJnZSBkYXRhc2V0cywgaW5zdGVhZCBvZiBsb2FkaW5nIHRoZSBlbnRpcmUgZGF0YSwgc21hbGwgY2h1bmtzIG9mIGRhdGEgaXMgbG9hZGVkIGJ5IGludm9raW5nIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tzIGV2ZXJ5dGltZSBwYWdpbmcsIHNvcnRpbmcgYW5kIGZpbHRlcmluZyBoYXBwZW5zLgogICAgICAgICAgICAgICAgICAgIFNhbXBsZSBiZWxvd3MgaW1pdGF0ZXMgbGF6eSBwYWdpbmcgYnkgdXNpbmcgYW4gaW4gbWVtb3J5IGxpc3QuIEl0IGlzIGFsc28gaW1wb3J0YW50IHRvIGFzc2lnbiB0aGUgbG9naWNhbCBudW1iZXIgb2Ygcm93cyB0byB0b3RhbFJlY29yZHMgYnkgZG9pbmcgYSBwcm9qZWN0aW9uIHF1ZXJ5IGZvciBwYWdpbmF0b3IgY29uZmlndXJhdGlvbgogICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgcGFnaW5hdG9yIGRpc3BsYXlzIHRoZSBVSSBhc3N1bWluZyB0aGVyZSBhcmUgYWN0dWFsbHkgcmVjb3JkcyBvZiB0b3RhbFJlY29yZHMgc2l6ZSBhbHRob3VnaCBpbiByZWFsaXR5IHRoZXkgYXJlbid0IGFzIGluIGxhenkgbW9kZSwgb25seSB0aGUgcmVjb3JkcyB0aGF0IGFyZSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgcGFnZSBleGlzdC4KICAgICAgICAgICAgICAgIDwvcD4KCQkJPC9kaXY+CiAgICAgICAgICAgIDxBcHBEZW1vQWN0aW9ucyAvPgoJCTwvZGl2PgoKCQk8ZGl2IGNsYXNzPSJjb250ZW50LXNlY3Rpb24gaW1wbGVtZW50YXRpb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgIDxEYXRhVGFibGUgOnZhbHVlPSJjdXN0b21lcnMiIDpsYXp5PSJ0cnVlIiA6cGFnaW5hdG9yPSJ0cnVlIiA6cm93cz0iMTAiIHYtbW9kZWw6ZmlsdGVycz0iZmlsdGVycyIgcmVmPSJkdCIKICAgICAgICAgICAgICAgICAgICA6dG90YWxSZWNvcmRzPSJ0b3RhbFJlY29yZHMiIDpsb2FkaW5nPSJsb2FkaW5nIiBAcGFnZT0ib25QYWdlKCRldmVudCkiIEBzb3J0PSJvblNvcnQoJGV2ZW50KSIgQGZpbHRlcj0ib25GaWx0ZXIoJGV2ZW50KSIgZmlsdGVyRGlzcGxheT0icm93IgogICAgICAgICAgICAgICAgICAgIDpnbG9iYWxGaWx0ZXJGaWVsZHM9IlsnbmFtZScsJ2NvdW50cnkubmFtZScsICdjb21wYW55JywgJ3JlcHJlc2VudGF0aXZlLm5hbWUnXSIgcmVzcG9uc2l2ZUxheW91dD0ic2Nyb2xsIiA+CiAgICAgICAgICAgICAgICAgICAgPENvbHVtbiBmaWVsZD0ibmFtZSIgaGVhZGVyPSJOYW1lIiBmaWx0ZXJNYXRjaE1vZGU9InN0YXJ0c1dpdGgiIHJlZj0ibmFtZSIgOnNvcnRhYmxlPSJ0cnVlIj4gIAogICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2ZpbHRlcj0ie2ZpbHRlck1vZGVsLGZpbHRlckNhbGxiYWNrfSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRUZXh0IHR5cGU9InRleHQiIHYtbW9kZWw9ImZpbHRlck1vZGVsLnZhbHVlIiBAa2V5ZG93bi5lbnRlcj0iZmlsdGVyQ2FsbGJhY2soKSIgY2xhc3M9InAtY29sdW1uLWZpbHRlciIgcGxhY2Vob2xkZXI9IlNlYXJjaCBieSBuYW1lIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8L0NvbHVtbj4KICAgICAgICAgICAgICAgICAgICA8Q29sdW1uIGZpZWxkPSJjb3VudHJ5Lm5hbWUiIGhlYWRlcj0iQ291bnRyeSIgZmlsdGVyRmllbGQ9ImNvdW50cnkubmFtZSIgZmlsdGVyTWF0Y2hNb2RlPSJjb250YWlucyIgcmVmPSJjb3VudHJ5Lm5hbWUiIDpzb3J0YWJsZT0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjZmlsdGVyPSJ7ZmlsdGVyTW9kZWwsZmlsdGVyQ2FsbGJhY2t9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFRleHQgdHlwZT0idGV4dCIgdi1tb2RlbD0iZmlsdGVyTW9kZWwudmFsdWUiIEBrZXlkb3duLmVudGVyPSJmaWx0ZXJDYWxsYmFjaygpIiBjbGFzcz0icC1jb2x1bW4tZmlsdGVyIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGJ5IGNvdW50cnkiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4KICAgICAgICAgICAgICAgICAgICA8L0NvbHVtbj4KICAgICAgICAgICAgICAgICAgICA8Q29sdW1uIGZpZWxkPSJjb21wYW55IiBoZWFkZXI9IkNvbXBhbnkiIGZpbHRlck1hdGNoTW9kZT0iY29udGFpbnMiIHJlZj0iY29tcGFueSIgOnNvcnRhYmxlPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNmaWx0ZXI9IntmaWx0ZXJNb2RlbCxmaWx0ZXJDYWxsYmFja30iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0VGV4dCB0eXBlPSJ0ZXh0IiB2LW1vZGVsPSJmaWx0ZXJNb2RlbC52YWx1ZSIgQGtleWRvd24uZW50ZXI9ImZpbHRlckNhbGxiYWNrKCkiIGNsYXNzPSJwLWNvbHVtbi1maWx0ZXIiIHBsYWNlaG9sZGVyPSJTZWFyY2ggYnkgY29tcGFueSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICAgIDwvQ29sdW1uPgogICAgICAgICAgICAgICAgICAgIDxDb2x1bW4gZmllbGQ9InJlcHJlc2VudGF0aXZlLm5hbWUiIGhlYWRlcj0iUmVwcmVzZW50YXRpdmUiIGZpbHRlckZpZWxkPSJyZXByZXNlbnRhdGl2ZS5uYW1lIiByZWY9InJlcHJlc2VudGF0aXZlLm5hbWUiIDpzb3J0YWJsZT0idHJ1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjZmlsdGVyPSJ7ZmlsdGVyTW9kZWwsZmlsdGVyQ2FsbGJhY2t9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFRleHQgdHlwZT0idGV4dCIgdi1tb2RlbD0iZmlsdGVyTW9kZWwudmFsdWUiIEBrZXlkb3duLmVudGVyPSJmaWx0ZXJDYWxsYmFjaygpIiBjbGFzcz0icC1jb2x1bW4tZmlsdGVyIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGJ5IHJlcHJlc2VudGF0aXZlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgPC9Db2x1bW4+CiAgICAgICAgICAgICAgICA8L0RhdGFUYWJsZT4KICAgICAgICAgICAgPC9kaXY+CgkJPC9kaXY+CiAKICAgICAgICA8QXBwRG9jIG5hbWU9IkRhdGFUYWJsZUxhenlEZW1vIiA6c291cmNlcz0ic291cmNlcyIgOnNlcnZpY2U9IlsnQ3VzdG9tZXJTZXJ2aWNlJ10iIGdpdGh1Yj0iZGF0YXRhYmxlL0RhdGFUYWJsZUxhenlEZW1vLnZ1ZSIgLz4KCTwvZGl2Pgo="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue"],"names":[],"mappings":";CACC,CAAC,CAAC,CAAC,CAAC;EACH,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;GACxC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnoBACzogBAC7M,CAAC,CAAC,CAAC;GAChB,CAAC,CAAC,CAAC,CAAC,CAAC;YACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACrG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;ooBAC1G,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvwBAC9I,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;owBACnwBACjJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC9F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBACjJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;owBACpwBACxJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,CAAC,CAAC,CAAC,CAAC,CAAC;EACfpI,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/views/datatable/DataTableLazyDemo.vue","sourceRoot":"","sourcesContent":["<template>\n\t<div>\n\t\t<div class=\"content-section introduction\">\n\t\t\t<div class=\"feature-intro\">\n\t\t\t\t<h1>DataTable <span>Lazy</span></h1>\n\t\t\t\t<p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking corresponding callbacks everytime paging, sorting and filtering happens.\n                    Sample belows imitates lazy paging by using an in memory list. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration\n                    so that paginator displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist.\n                </p>\n\t\t\t</div>\n            <AppDemoActions />\n\t\t</div>\n\n\t\t<div class=\"content-section implementation\">\n            <div class=\"card\">\n                <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n                    :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n                    :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\" >\n                    <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                        </template>                    \n                    </Column>\n                    <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                        </template>\n                    </Column>\n                    <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                        </template>\n                    </Column>\n                    <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                        <template #filter=\"{filterModel,filterCallback}\">\n                            <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                        </template>\n                    </Column>\n                </DataTable>\n            </div>\n\t\t</div>\n \n        <AppDoc name=\"DataTableLazyDemo\" :sources=\"sources\" :service=\"['CustomerService']\" github=\"datatable/DataTableLazyDemo.vue\" />\n\t</div>\n</template>\n\n<script>\nimport CustomerService from '../../service/CustomerService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            filters: {\n                'name': {value: '', matchMode: 'contains'},\n                'country.name': {value: '', matchMode: 'contains'},\n                'company': {value: '', matchMode: 'contains'},\n                'representative.name': {value: '', matchMode: 'contains'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: 'name', header: 'Name'},\n                {field: 'country.name', header: 'Country'},\n                {field: 'company', header: 'Company'},\n                {field: 'representative.name', header: 'Representative'}\n            ],\n            sources: {\n                'options-api': {\n                    tabName: 'Options API Source',\n                    content: `\n<template>\n\t<div>\n        <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n            :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n            :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\">\n            <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                </template>                    \n            </Column>\n            <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                </template>\n            </Column>\n            <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                </template>\n            </Column>\n            <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport CustomerService from './service/CustomerService';\n\nexport default {\n    data() {\n        return {\n            loading: false,\n            totalRecords: 0,\n            customers: null,\n            filters: {\n                'name': {value: '', matchMode: 'contains'},\n                'country.name': {value: '', matchMode: 'contains'},\n                'company': {value: '', matchMode: 'contains'},\n                'representative.name': {value: '', matchMode: 'contains'},\n            },\n            lazyParams: {},\n            columns: [\n                {field: 'name', header: 'Name'},\n                {field: 'country.name', header: 'Country'},\n                {field: 'company', header: 'Company'},\n                {field: 'representative.name', header: 'Representative'}\n            ]\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n        \n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers(\n                    {lazyEvent: JSON.stringify( this.lazyParams )})\n                        .then(data => {\n                            this.customers = data.customers;\n                            this.totalRecords = data.totalRecords;\n                            this.loading = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        }\n    }\n}\n<\\\\/script>                  \n`\n                },\n                'composition-api': {\n                    tabName: 'Composition API Source',\n                    content: `\n<template>\n\t<div>\n        <DataTable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n            :totalRecords=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filterDisplay=\"row\"\n            :globalFilterFields=\"['name','country.name', 'company', 'representative.name']\" responsiveLayout=\"scroll\">\n            <Column field=\"name\" header=\"Name\" filterMatchMode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"/>\n                </template>                    \n            </Column>\n            <Column field=\"country.name\" header=\"Country\" filterField=\"country.name\" filterMatchMode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"/>\n                </template>\n            </Column>\n            <Column field=\"company\" header=\"Company\" filterMatchMode=\"contains\" ref=\"company\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"/>\n                </template>\n            </Column>\n            <Column field=\"representative.name\" header=\"Representative\" filterField=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                <template #filter=\"{filterModel,filterCallback}\">\n                    <InputText type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"/>\n                </template>\n            </Column>\n        </DataTable>\n\t</div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue';\nimport CustomerService from './service/CustomerService';\n\nexport default {\n    setup() {\n        onMounted(() => {\n            loading.value = true;\n        \n            lazyParams.value = {\n                first: 0,\n                rows: dt.value.rows,\n                sortField: null,\n                sortOrder: null,\n                filters: filters.value\n            };\n\n            loadLazyData();\n        })\n\n        const dt = ref();\n        const loading = ref(false);\n        const totalRecords = ref(0);\n        const customers = ref();\n        const customerService = ref(new CustomerService());\n        const filters = ref({\n            'name': {value: '', matchMode: 'contains'},\n            'country.name': {value: '', matchMode: 'contains'},\n            'company': {value: '', matchMode: 'contains'},\n            'representative.name': {value: '', matchMode: 'contains'},\n        });\n        const lazyParams = ref({});\n        const columns = ref([\n            {field: 'name', header: 'Name'},\n            {field: 'country.name', header: 'Country'},\n            {field: 'company', header: 'Company'},\n            {field: 'representative.name', header: 'Representative'}\n        ]);\n\n        const loadLazyData = () => {\n            loading.value = true;\n\n            setTimeout(() => {\n                customerService.value.getCustomers(\n                    {lazyEvent: JSON.stringify( lazyParams.value )})\n                        .then(data => {\n                            customers.value = data.customers;\n                            totalRecords.value  = data.totalRecords;\n                            loading.value = false;\n                    }\n                );\n            }, Math.random() * 1000 + 250);\n        };\n        const onPage = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onSort = (event) => {\n            lazyParams.value = event;\n            loadLazyData();\n        };\n        const onFilter = () => {\n            lazyParams.value.filters = filters.value ;\n            loadLazyData();\n        }\n\n        return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter }\n    }\n}\n<\\\\/script>                  \n`\n                },\n                'browser-source': {\n                    tabName: 'Browser Source',\n                    imports: `<script src=\"https://unpkg.com/primevue@^3/datatable/datatable.min.js\"><\\\\/script>\n        <script src=\"https://unpkg.com/primevue@^3/column/column.min.js\"><\\\\/script>\n        <script src=\"./CustomerService.js\"><\\\\/script>`,\n                    content: `<div id=\"app\">\n            <p-datatable :value=\"customers\" :lazy=\"true\" :paginator=\"true\" :rows=\"10\" v-model:filters=\"filters\" ref=\"dt\"\n                :total-records=\"totalRecords\" :loading=\"loading\" @page=\"onPage($event)\" @sort=\"onSort($event)\" @filter=\"onFilter($event)\" filter-display=\"row\"\n                :global-filter-fields=\"['name','country.name', 'company', 'representative.name']\" responsive-layout=\"scroll\">\n                <p-column field=\"name\" header=\"Name\" filter-match-mode=\"startsWith\" ref=\"name\" :sortable=\"true\">  \n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by name\"></p-inputtext>\n                    </template>                    \n                </p-column>\n                <p-column field=\"country.name\" header=\"Country\" filter-field=\"country.name\" filter-match-mode=\"contains\" ref=\"country.name\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by country\"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field=\"company\" header=\"Company\" filter-match-mode=\"contains\" ref=\"company\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by company\"></p-inputtext>\n                    </template>\n                </p-column>\n                <p-column field=\"representative.name\" header=\"Representative\" filter-field=\"representative.name\" ref=\"representative.name\" :sortable=\"true\">\n                    <template #filter=\"{filterModel,filterCallback}\">\n                        <p-inputtext type=\"text\" v-model=\"filterModel.value\" @keydown.enter=\"filterCallback()\" class=\"p-column-filter\" placeholder=\"Search by representative\"></p-inputtext>\n                    </template>\n                </p-column>\n            </p-datatable>\n        </div>\n\n        <script type=\"module\">\n        const { createApp, ref, onMounted } = Vue;\n\n        const App = {\n            setup() {\n                onMounted(() => {\n                    loading.value = true;\n                \n                    lazyParams.value = {\n                        first: 0,\n                        rows: dt.value.rows,\n                        sortField: null,\n                        sortOrder: null,\n                        filters: filters.value\n                    };\n\n                    loadLazyData();\n                })\n\n                const dt = ref();\n                const loading = ref(false);\n                const totalRecords = ref(0);\n                const customers = ref();\n                const customerService = ref(new CustomerService());\n                const filters = ref({\n                    'name': {value: '', matchMode: 'contains'},\n                    'country.name': {value: '', matchMode: 'contains'},\n                    'company': {value: '', matchMode: 'contains'},\n                    'representative.name': {value: '', matchMode: 'contains'},\n                });\n                const lazyParams = ref({});\n                const columns = ref([\n                    {field: 'name', header: 'Name'},\n                    {field: 'country.name', header: 'Country'},\n                    {field: 'company', header: 'Company'},\n                    {field: 'representative.name', header: 'Representative'}\n                ]);\n\n                const loadLazyData = () => {\n                    loading.value = true;\n\n                    setTimeout(() => {\n                        customerService.value.getCustomers(\n                            {lazyEvent: JSON.stringify( lazyParams.value )})\n                                .then(data => {\n                                    customers.value = data.customers;\n                                    totalRecords.value  = data.totalRecords;\n                                    loading.value = false;\n                            }\n                        );\n                    }, Math.random() * 1000 + 250);\n                };\n                const onPage = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onSort = (event) => {\n                    lazyParams.value = event;\n                    loadLazyData();\n                };\n                const onFilter = () => {\n                    lazyParams.value.filters = filters.value ;\n                    loadLazyData();\n                }\n\n                return { dt, loading, totalRecords, customers, filters, lazyParams, columns, loadLazyData, onPage, onSort, onFilter }\n            },\n            components: {\n                \"p-datatable\": primevue.datatable,\n                \"p-column\": primevue.column,\n                \"p-inputtext\": primevue.inputtext\n            }\n        };\n        \n        createApp(App)\n            .use(primevue.config.default)\n            .mount(\"#app\");\n        <\\\\/script>                  \n`\n                }\n            }\n        }\n    },\n    customerService: null,\n    created() {\n        this.customerService = new CustomerService();\n    },\n    mounted() {\n        this.loading = true;\n        \n        this.lazyParams = {\n            first: 0,\n            rows: this.$refs.dt.rows,\n            sortField: null,\n            sortOrder: null,\n            filters: this.filters\n        };\n\n        this.loadLazyData();\n    },\n    methods: {\n        loadLazyData() {\n            this.loading = true;\n\n            setTimeout(() => {\n                this.customerService.getCustomers({lazyEvent: JSON.stringify( this.lazyParams )}).then(data => {\n                    this.customers = data.customers;\n                    this.totalRecords = data.totalRecords;\n                    this.loading = false;\n                });\n            }, Math.random() * 1000 + 250);\n        },\n        onPage(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onSort(event) {\n            this.lazyParams = event;\n            this.loadLazyData();\n        },\n        onFilter() {\n            this.lazyParams.filters = this.filters;\n            this.loadLazyData();\n        }\n    }\n}\n</script>"]}]}