{"remainingRequest":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/fullcalendar/FullCalendar.vue?vue&type=template&id=9c9a90a2","dependencies":[{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/fullcalendar/FullCalendar.vue","mtime":1634589566220},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/babel-loader/lib/index.js","mtime":1634585934594},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1634585949898},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/cache-loader/dist/cjs.js","mtime":1634585934434},{"path":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/node_modules/vue-loader-v16/dist/index.js","mtime":1634585949898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2PjwvZGl2Pgo="},{"version":3,"sources":["/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/fullcalendar/FullCalendar.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/crocslut/Desktop/Git/main-cleanaway-pwa/src/components/fullcalendar/FullCalendar.vue","sourceRoot":"","sourcesContent":["<template>\n    <div></div>\n</template>\n\n<script>\nimport '@fullcalendar/core/vdom'; // vite support\nimport {Calendar} from '@fullcalendar/core';\n\nexport default {\n    name: 'FullCalendar',\n    props: {\n        events: Array,\n        options: null\n    },\n    calendar: null,\n    watch: {\n        events(value) {\n            if (value && this.calendar) {\n                this.calendar.removeAllEventSources();\n                this.calendar.addEventSource(value);\n            }\n        },\n        options(value) {\n            if (value && this.calendar) {\n                for (let prop in value) {\n                    this.calendar.setOption(prop, value[prop]);\n                }\n            }\n        }\n    },\n    mounted() {\n        if (this.$el.offsetParent) {\n            this.initialize();\n        }\n    },\n    updated() {\n        if (!this.calendar && this.$el.offsetParent) {\n            this.initialize();\n        }\n    },\n    beforeUnmount() {\n        if (this.calendar) {\n            this.calendar.destroy();\n            this.calendar = null;\n        }\n    },\n    methods: {\n        initialize() {\n            let defaultConfig = {themeSystem: 'standard'};\n            let config = this.options ? {...this.options, ...defaultConfig} : defaultConfig;\n            this.calendar = new Calendar(this.$el, config);\n            this.calendar.render();\n\n            if (this.events) {\n                this.calendar.removeAllEventSources();\n                this.calendar.addEventSource(this.events);\n            }\n        }\n    }\n}\n</script>\n\n<style>\n</style>\n"]}]}